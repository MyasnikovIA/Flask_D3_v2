(function(){if (!Number.prototype.toLocaleString) {
    Number.prototype.toLocaleString = function () {
        return String(this);
    };
}

if (typeof Number.isFinite !== 'function') {
    Number.isFinite = function isFinite(value) {
        // 1. If Type(number) is not Number, return false.
        if (typeof value !== 'number') {
            return false;
        }
        // 2. If number is NaN, +?, or ??, return false.
        if (value !== value || value === Infinity || value === -Infinity) {
            return false;
        }
        // 3. Otherwise, return true.
        return true;
    };
}
if (!String.prototype.padStart) {
    String.prototype.padStart = function padStart(targetLength,padString) {
        targetLength = targetLength>>0;
        padString = String((typeof padString !== 'undefined' ? padString : ' '));
        if (this.length > targetLength) {
            return String(this);
        }
        else {
            targetLength = targetLength-this.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength/padString.length); //append to original to ensure we are longer than needed
            }
            return padString.slice(0,targetLength) + String(this);
        }
    };
};
if (!String.prototype.padEnd) {
    String.prototype.padEnd = function padEnd(targetLength,padString) {
        targetLength = targetLength>>0;
        padString = String((typeof padString !== 'undefined' ? padString : ' '));
        if (this.length > targetLength) {
            return String(this);
        }
        else {
            targetLength = targetLength-this.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength/padString.length); //append to original to ensure we are longer than needed
            }
            return String(this) + padString.slice(0,targetLength);
        }
    };
};
if (!String.prototype.replaceAll) {
    String.prototype.replaceAll = function(str, newStr){

        // если регулярное выражение
        if (Object.prototype.toString.call(str).toLowerCase() === '[object regexp]') {
            return this.replace(str, newStr);
        }

        // если строка
        return this.replace(new RegExp(str, 'g'), newStr);

    };
};
(function () {
    if(typeof window.Promise != 'function'){
        /**
         * @description Core Внутренние работы обещаний.
         * @param {function}
         **/
        function Promise(resolver){
            var fulFilleds = [];
            var reJecteds = [];
            this.result = null;
            this.reason = null;
            if(typeof resolver == 'function'){
                resolver(function(_value){
                    this.result = _value;
                    for(var i = 0, len = fulFilleds.length ; i < len ; i++){
                        try{
                            var res = fulFilleds[i]['FulFilled'](_value);
                            fulFilleds[i]['deferred'].resolve(res);
                        }catch (e) {
                            fulFilleds[i]['deferred'].reject(e);
                        }
                    }
                },function(_reason){
                    if (typeof _reason != 'undefined') {
                        this.reason = _reason;
                        for(var i = 0, len = reJecteds.length ; i < len ; i++){
                            try{
                                var res = reJecteds[i]['Rejected'](_reason);
                                reJecteds[i]['deferred'].resolve(res);
                            }catch (e) {
                                reJecteds[i]['deferred'].reject(e);
                            }
                        }
                    }
                });
            }
            this.then = function(onFulfilled,onRejected){
                var deferred = new Deferred();
                var promise = deferred.promise();
                if(typeof onFulfilled == 'function'){
                    fulFilleds.push({
                        'FulFilled' : onFulfilled,
                        'deferred' : deferred
                    })
                }
                if(typeof onRejected == 'function'){
                    reJecteds.push({
                        'Rejected' : onRejected,
                        'deferred' : deferred
                    });
                }
                if(this.result && onFulfilled){
                    try{
                        var result = onFulfilled(this.result);
                        deferred.resolve(result);
                    }catch (e) {
                        deferred.reject(e);
                    }
                }
                if(this.reason && onRejected){
                    try{
                        var result = onRejected(this.reason);
                        deferred.resolve(result);
                    }catch (e) {
                        deferred.reject(e);
                    }
                }
                return promise;
            }
            this.otherwise = function(onRejected){
                return this.then(null,onRejected);
            }
        }
        /**
         * @description Core внутренние работы отложенной функции.
         *
         **/
        function Deferred (){
            var promise = null;
            var resolveCallback = null;
            var rejectCallback = null;
            this.promise = function(){
                if(!promise){
                    promise = new Promise(function(_resolve, _reject){
                        resolveCallback = _resolve;
                        rejectCallback = _reject;
                    });
                }
                return promise;
            }
            this.resolve = function(_value){
                resolveCallback.call(promise,_value);
            }
            this.reject = function(_value){
                rejectCallback.call(promise,_value);
            }
        };

        /**
         * @description Объект для отложенных и асинхронных вычислений.
         * https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise
         * @param {function} Функция выполнения
         * @return {Object} объет промис
         **/
        window.Promise = function(executor){
            var deferred = new Deferred();
            var promise = deferred.promise();
            if(typeof executor == 'function'){
                executor(deferred.resolve,deferred.reject);
            }
            return promise;
        };
        /**
         * @description Возвращает обещание, которое выполнится тогда, когда будут выполнены все обещания, переданные в виде перечисляемого аргумента, или отклонено любое из переданных обещаний.
         * https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise/all
         * @param promiseList
         * @return {Object} объет промис
         **/
        window.Promise.all = function(promiseList){
            var fulFilleds = [];
            var reJecteds = [];
            var promise = new this(function(resolve,reject){
                for(var i = 0,len = promiseList.length ; i < len ; i++){
                    if(promiseList[i] instanceof Promise){
                        promiseList[i].then(function(_value){
                            fulFilleds.push(_value);
                        },function(_reason){
                            reJecteds.push(_reason);
                        });
                    }else{
                        fulFilleds.push(promiseList[i]);
                    }
                }
                if(reJecteds.length > 0){
                    reject(reJecteds);
                }else{
                    resolve(fulFilleds);
                }
            });

            return promise;
        };
        /**
         * @description возвращает Promise выполненый с переданным значением.
         * https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve
         * @return {Object} объет промис
         **/
        window.Promise.resolve = function (_value) {
            return new this(function(resolve,reject){
                resolve(_value);
            });
        };
        /**
         * @description возвращает Promise, который был отклонен по указанной причине.
         * https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject
         * @return {Object} объет промис
         **/
        window.Promise.reject = function(_reason){
            return new this(function(resolve,reject){
                reject(_reason);
            });
        };
        /**
         * @description Возвращает обещание, которое было выполнено после того, как все обещания были выполнены или отклонены, и содержит массив объектов с описанием результата каждого обещания.
         * https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled
         * @return {Object} объет промис
         **/
        window.Promise.allSettled = function(iterable){
            var res = [];
            return new this(function(resolve){
                if(iterable instanceof Array){
                    for(var i = 0,len = resolve.length ; i < len ; i++){
                        if(resolve[i] instanceof Promise){
                            resolve[i].then(function(_val){
                                res.push({
                                    'status' : 'fulfilled',
                                    'value' : _val
                                });
                            },function(_reason){
                                res.push({
                                    'status' : 'rejected',
                                    'value' : _reason
                                });
                            })
                        }else{
                            res.push({
                                'status' : 'fulfilled',
                                'value' : resolve[i]
                            });
                        }
                    }
                    resolve(res);
                }
            });
        };
    }

    if (typeof window.CustomEvent === 'function') {
        return false;
    }

    function CustomEvent(name, params) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };

        var event = document.createEvent('CustomEvent');
        event.initCustomEvent(name, params.bubbles, params.cancelable, params.detail);
        return event;
    }

    CustomEvent.prototype = window.Event.prototype;

    window.CustomEvent = CustomEvent;
})();/*!
 * clipboard.js v1.7.1
 * https://zenorocha.github.io/clipboard.js
 *
 * Licensed MIT © Zeno Rocha
 */
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.Clipboard=t()}}(function(){var t,e,n;return function t(e,n,o){function i(a,c){if(!n[a]){if(!e[a]){var l="function"==typeof require&&require;if(!c&&l)return l(a,!0);if(r)return r(a,!0);var s=new Error("Cannot find module '"+a+"'");throw s.code="MODULE_NOT_FOUND",s}var u=n[a]={exports:{}};e[a][0].call(u.exports,function(t){var n=e[a][1][t];return i(n||t)},u,u.exports,t,e,n,o)}return n[a].exports}for(var r="function"==typeof require&&require,a=0;a<o.length;a++)i(o[a]);return i}({1:[function(t,e,n){function o(t,e){for(;t&&t.nodeType!==i;){if("function"==typeof t.matches&&t.matches(e))return t;t=t.parentNode}}var i=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var r=Element.prototype;r.matches=r.matchesSelector||r.mozMatchesSelector||r.msMatchesSelector||r.oMatchesSelector||r.webkitMatchesSelector}e.exports=o},{}],2:[function(t,e,n){function o(t,e,n,o,r){var a=i.apply(this,arguments);return t.addEventListener(n,a,r),{destroy:function(){t.removeEventListener(n,a,r)}}}function i(t,e,n,o){return function(n){n.delegateTarget=r(n.target,e),n.delegateTarget&&o.call(t,n)}}var r=t("./closest");e.exports=o},{"./closest":1}],3:[function(t,e,n){n.node=function(t){return void 0!==t&&t instanceof HTMLElement&&1===t.nodeType},n.nodeList=function(t){var e=Object.prototype.toString.call(t);return void 0!==t&&("[object NodeList]"===e||"[object HTMLCollection]"===e)&&"length"in t&&(0===t.length||n.node(t[0]))},n.string=function(t){return"string"==typeof t||t instanceof String},n.fn=function(t){return"[object Function]"===Object.prototype.toString.call(t)}},{}],4:[function(t,e,n){function o(t,e,n){if(!t&&!e&&!n)throw new Error("Missing required arguments");if(!c.string(e))throw new TypeError("Second argument must be a String");if(!c.fn(n))throw new TypeError("Third argument must be a Function");if(c.node(t))return i(t,e,n);if(c.nodeList(t))return r(t,e,n);if(c.string(t))return a(t,e,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function i(t,e,n){return t.addEventListener(e,n),{destroy:function(){t.removeEventListener(e,n)}}}function r(t,e,n){return Array.prototype.forEach.call(t,function(t){t.addEventListener(e,n)}),{destroy:function(){Array.prototype.forEach.call(t,function(t){t.removeEventListener(e,n)})}}}function a(t,e,n){return l(document.body,t,e,n)}var c=t("./is"),l=t("delegate");e.exports=o},{"./is":3,delegate:2}],5:[function(t,e,n){function o(t){var e;if("SELECT"===t.nodeName)t.focus(),e=t.value;else if("INPUT"===t.nodeName||"TEXTAREA"===t.nodeName){var n=t.hasAttribute("readonly");n||t.setAttribute("readonly",""),t.select(),t.setSelectionRange(0,t.value.length),n||t.removeAttribute("readonly"),e=t.value}else{t.hasAttribute("contenteditable")&&t.focus();var o=window.getSelection(),i=document.createRange();i.selectNodeContents(t),o.removeAllRanges(),o.addRange(i),e=o.toString()}return e}e.exports=o},{}],6:[function(t,e,n){function o(){}o.prototype={on:function(t,e,n){var o=this.e||(this.e={});return(o[t]||(o[t]=[])).push({fn:e,ctx:n}),this},once:function(t,e,n){function o(){i.off(t,o),e.apply(n,arguments)}var i=this;return o._=e,this.on(t,o,n)},emit:function(t){var e=[].slice.call(arguments,1),n=((this.e||(this.e={}))[t]||[]).slice(),o=0,i=n.length;for(o;o<i;o++)n[o].fn.apply(n[o].ctx,e);return this},off:function(t,e){var n=this.e||(this.e={}),o=n[t],i=[];if(o&&e)for(var r=0,a=o.length;r<a;r++)o[r].fn!==e&&o[r].fn._!==e&&i.push(o[r]);return i.length?n[t]=i:delete n[t],this}},e.exports=o},{}],7:[function(e,n,o){!function(i,r){if("function"==typeof t&&t.amd)t(["module","select"],r);else if(void 0!==o)r(n,e("select"));else{var a={exports:{}};r(a,i.select),i.clipboardAction=a.exports}}(this,function(t,e){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=n(e),r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),c=function(){function t(e){o(this,t),this.resolveOptions(e),this.initSelection()}return a(t,[{key:"resolveOptions",value:function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function t(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function t(){var e=this,n="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[n?"right":"left"]="-9999px";var o=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=o+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,i.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function t(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function t(){this.selectedText=(0,i.default)(this.target),this.copyText()}},{key:"copyText",value:function t(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function t(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function t(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function t(){this.removeFake()}},{key:"action",set:function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function t(){return this._action}},{key:"target",set:function t(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":r(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function t(){return this._target}}]),t}();t.exports=c})},{select:5}],8:[function(e,n,o){!function(i,r){if("function"==typeof t&&t.amd)t(["module","./clipboard-action","tiny-emitter","good-listener"],r);else if(void 0!==o)r(n,e("./clipboard-action"),e("tiny-emitter"),e("good-listener"));else{var a={exports:{}};r(a,i.clipboardAction,i.tinyEmitter,i.goodListener),i.clipboard=a.exports}}(this,function(t,e,n,o){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function l(t,e){var n="data-clipboard-"+t;if(e.hasAttribute(n))return e.getAttribute(n)}var s=i(e),u=i(n),f=i(o),d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),p=function(t){function e(t,n){r(this,e);var o=a(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return o.resolveOptions(n),o.listenClick(t),o}return c(e,t),h(e,[{key:"resolveOptions",value:function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===d(e.container)?e.container:document.body}},{key:"listenClick",value:function t(e){var n=this;this.listener=(0,f.default)(e,"click",function(t){return n.onClick(t)})}},{key:"onClick",value:function t(e){var n=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new s.default({action:this.action(n),target:this.target(n),text:this.text(n),container:this.container,trigger:n,emitter:this})}},{key:"defaultAction",value:function t(e){return l("action",e)}},{key:"defaultTarget",value:function t(e){var n=l("target",e);if(n)return document.querySelector(n)}},{key:"defaultText",value:function t(e){return l("text",e)}},{key:"destroy",value:function t(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],n="string"==typeof e?[e]:e,o=!!document.queryCommandSupported;return n.forEach(function(t){o=o&&!!document.queryCommandSupported(t)}),o}}]),e}(u.default);t.exports=p})},{"./clipboard-action":7,"good-listener":4,"tiny-emitter":6}]},{},[8])(8)}); var AGENT_INFO_PLATFORM = "windows";
    /* Функция отладки ghbvty*/
    var console_log = function(message){
       if ((AGENT_INFO_PLATFORM == "android") && (Android)) {
         msg="";
         for (let args of arguments) {
            if (typeof args === 'string') {
               msg+="|"+args;
            }
            if (typeof args === 'object') {
               try {
                 msg+="|"+JSON.stringify(args);
               } catch {
                 msg+="|"+args;
               }
            }
         }
         Android.console_log(msg);
       } else {
         console.log(arguments);
       }
    }
    var log = console_log; 
    /**
 * Определение браузера.
 * @constructor
 */
D3BROWSERAPI = function () {
    var agt = navigator.userAgent.toLowerCase();
    this.name = '';
    this.suported = true;
    this.msie = (agt.indexOf("msie") != -1 && agt.indexOf("opera") == -1 && (this.name = 'msie')) ? true : false;
    this.opera = (agt.indexOf("opera") != -1 && (this.name = 'opera')) ? true : false;
    this.firefox = (agt.indexOf('firefox') != -1 && (this.name = 'firefox')) ? true : false;
    this.chrome = (agt.indexOf('chrome') != -1 && (this.name = 'chrome')) ? true : false;
    this.safari = (agt.indexOf('safari') != -1 && agt.indexOf('chrome') == -1 && (this.name = 'safari')) ? true : false;
    var ver = agt.match(this.name + '[\/ ](([0-9]+)[0-9\.]*)');
    var ver2 = agt.match('version\/(([0-9]+)[0-9\.]*)');

    if (ver && ver2)
        ver = (+ver[2] > +ver2[2]) ? ver : ver2;
    else
        ver = ver || ver2;

    this.versionMajor = ver ? +ver[2] : null;
    this.version = ver ? ver[1] : null;
}
/**
 * Эксемпляр класса D3BROWSERAPI
 * @type {Object}
 * @see {@link D3BROWSERAPI}
 */
D3BROWSER = new D3BROWSERAPI();
switch (true) {
    case D3BROWSER.msie && D3BROWSER.versionMajor < 8:
    case D3BROWSER.firefox && D3BROWSER.versionMajor < 13:
    case D3BROWSER.chrome && D3BROWSER.versionMajor < 15:
    case D3BROWSER.safari && D3BROWSER.versionMajor < 5:
    case D3BROWSER.opera && D3BROWSER.versionMajor < 11:
        D3BROWSER = false;
        break;
    default:
        break;
}
/**
 * Главные объект D3Api
 * @class
 * @type Object
 * @name D3Api
 * @this {D3Api}
 */
D3Api = new function () {
    var GLOBAL_VARS = {};
    var CONFIG = {};
    this.openFormByUnitModifiers = []; // массив функций модификаторов для метода openFormByUnit
    this.BROWSER = D3BROWSER;
    this.forms = {};
    this.threads = {};
    this.controlsApi = {};
    this.current_theme = '';
    this.GLOBAL_CONTEXT_FORM = null;
    this.platform = (AGENT_INFO_PLATFORM) ? AGENT_INFO_PLATFORM : "windows";
    var uniq = 0;
    var SYSREQUEST = ''; // Не обновляет активность пользователя при обращении к серверу
    /**
     * @property {Function} Инициализация проекта
     * @returns void
     */
    this.init = function () {
        D3Api.MainDom = document.body;
        D3Api.D3MainContainer = D3Api.MainDom;
        D3Api.mixin(CONFIG, D3Api.SYS_CONFIG || {});
        D3Api.SYS_CONFIG = undefined;
        delete D3Api.SYS_CONFIG;
        D3Api.init = undefined;
        delete D3Api.init;
    }
    /**
     * преобразует значение в строку JSON
     * @param obj {Object}
     * @param unCyclic {boolean}
     * @param except {string}
     * @returns {string}
     */
    this.JSONstringify = function (obj, unCyclic, except) {
        if (D3Api.isUndefined(obj))
            return obj;
        var cyclObj = [];
        return JSON.stringify(obj, function (k, v) {
            if (except && String(k).match(except))
                return undefined;
            if (unCyclic && typeof(v) == 'object') {
                if (cyclObj.indexOf(v) > -1)
                    return undefined;
                cyclObj.push(v);
            }
            return (v === '') ? '' : v;
        });
        cyclObj = null;
    }
    /**
     * разбирает строку JSON
     * @param json {string}
     * @returns {Object}
     */
    this.JSONparse = function (json) {
        if (!json)
            return json;
        return JSON.parse(json);
    }
    /**
     * Генерация уникального значения.
     *
     * @example
     * var i = 1;
     * var b= 123;
     * var str = 'fvvgg';
     *
     * @param prefix {string} - префикс
     * @returns {string}

     */
    this.getUniqId = function (prefix) {
        if (uniq > 9999999) //fix
            uniq = 0;
        prefix = prefix || '';
        return prefix + (uniq++) + (new Date()).getTime();
    }

    /**
     * Полечение кэш формы
     * @param data {Object}
     * @returns {string}
     */
    function calcFormHash(data) {
        return data.Form + '.' + MD5.hex_md5(D3Api.JSONstringify(data));
    }

    /**
     * Установка переменной
     * @param name {string} - Имя переменной
     * @param value {string} - значение.
     */
    this.setVar = function (name, value) {
        GLOBAL_VARS[name] = value;
    }
    /**
     * Получение значений от имени переменной
     * @param name {string} - Имя переменной
     * @param defValue {string} - значение по умолчанию
     * @returns {string}
     */
    this.getVar = function (name, defValue) {
        return GLOBAL_VARS[name] || defValue;
    }
    /**
     * @property {Function} Получение значения в свойстве объекта
     * @param name {string} - имя свойства
     * @param obj {Object} - объект
     * @param defValue {string} - значение по умолчанию
     * @returns {string}
     */
    this.getValueInObj = function (name, obj, defValue) {
        var value = defValue;
        if (name.indexOf('.') > -1) { // для объекта
            var arr = name.split('.');
            if (obj && obj[arr[0]] && obj[arr[0]][arr[1]])
                value = obj[arr[0]][arr[1]];
        }
        else {
            if (obj && obj[name])
                value = obj[name];
        }
        return value;
    }
    /**
     *
     * @param name
     * @param defaultValue
     * @returns {*}
     */
    this.getOption = function (name, defaultValue) {
        if (CONFIG[name] === undefined)
            return defaultValue;
        return CONFIG[name];
    }
    function calcThreadHash(data) {
        return data.Form + '.' + MD5.hex_md5(D3Api.JSONstringify(data));
    }

    function getNewThread(name) {
        //Новая нить
        if (D3Api.threads[name])
            name = name + D3Api.getUniqId('.thread:');

        D3Api.threads[name] = new D3Api.D3ThreadForms(name);
        D3Api.threads[name].name = name;//нужно для вкладок
        return name;
    }

    /**
     * Находит компонент по всему документу
     * @param name {string} - Имя кмпонента
     * @returns {Object|boolean}
     */
    this.getControlInAllForms = function (name) {
        if (!name) {
            return false;
        }
        var ctrl = D3Api.getDomBy(document,'div [name="'+name+'"]');
        if (ctrl && ctrl.getAttribute('cmptype')) {
            return ctrl;
        } else {
            D3Api.debug_msg('Компонент не найден: ' + name);
            return false;
        }
    };

    /**
     * Копирование в буфер обмена.
     * @param data {String} - что скопировать.
     * @param notify_caption {string} - Заголовок сообщения
     * @param notify_text {string} - текст сообщения
     */
    this.buferCopy = function (data,notify_caption,notify_text) {
        if (data) {
            var clipboard = new Clipboard('body', {
                text: function () {
                    return String(data)
                }
            });
            clipboard.on('success', function(e) {
                e.clearSelection();
                clipboard.destroy();
            });

            clipboard.on('error', function(e) {
                clipboard.destroy();
            });
            if (notify_caption && notify_text) {
                D3Api.notify(notify_caption,notify_text,{'expires': 2000});
            }
        } else {
            D3Api.notify('Ошибка','Нет данных для копирования', {'expires': 2000});
        }
    };
    /**
     * закрытие модальной формы.
     */
    this.close_modal_form = function () {
        D3Api.confirm('Вы действительно хотите закрыть текущее окно?', function(){
            var open_modal_cont = D3Api.getDomBy(D3Api.D3MainContainer, 'div[id="open_modal"]');
            if(open_modal_cont && D3Api.showedDom(open_modal_cont) && open_modal_cont.childNodes.length > 1){
                if(open_modal_cont.childNodes[0].D3Form){
                    open_modal_cont.childNodes[0].D3Form.close();
                };
            }
        });
    };
    /**
     * открытие формы
     * @param name {string} - имя формы
     * @param dom {Object} - дом куда будет вставлена форма
     * @param data {Object} - параметры
     * @param contextForm {Object} - Контекст
     * @returns {string|D3Api.D3Form}
     */
    this.showForm = function (name, dom, data, contextForm) {
        var open_modal_cont = D3Api.getDomBy(D3Api.D3MainContainer, 'div[id="open_modal"]');
        /*если окно открывается в модальном режиме*/
        if((data && String(data.modal_form)=='true')){
            /*и контейнера для модалки нет, то создаем его*/
            if(!open_modal_cont){
                var open_modal       = document.createElement("div"),
                    close_open_modal = document.createElement("div");
                open_modal.id               = 'open_modal';
                open_modal.style.cssText    = 'position: fixed; width: 100%; height: 100%; top: 0px; left: 0px; display: none;background: #f9f9f9aa;z-index: 3;';
                close_open_modal.className  = 'close_open_modal fa-times fas';
                open_modal.appendChild(close_open_modal);
                open_modal_cont = D3Api.MainDom.appendChild(open_modal);
                close_open_modal.onclick = function() {
                    D3Api.close_modal_form();
                };
                D3Api.showDomBlock(open_modal_cont);
            }else if(!D3Api.showedDom(open_modal_cont)){
                /*если есть контейнер для модалки, то просто показываем его*/
                D3Api.showDomBlock(open_modal_cont);
            }
        }
        /*если показано модальное окно - открываем окна только в модальном режиме*/
        if(open_modal_cont && D3Api.showedDom(open_modal_cont)){
            dom = (dom == D3Api.MainDom?(open_modal_cont):(dom || open_modal_cont));
        }else{
            dom = dom || D3Api.MainDom;
        }
        data = data || {};
        if (data.request)
            data.request.Form = name;
        else
            data.request = {Form: name};

        if(data.modal_form){
            data.request['modal'] = '1'
        }
        var hname = calcFormHash(data.request);

        data._contextForm_ = contextForm;
        data._currentContext_ = contextForm ? contextForm.currentContext : null;

        D3Api.Base.callEvent('onShowForm', name, dom, data, hname);

        if (!data.notthread) {
            //Новая нить принудительно
            if (data.newthread) {
                data.newthread = getNewThread(calcThreadHash(data.request));
            } else if (data.thread) //Форма начала потока
            {
                var tname = calcThreadHash(data.request);
                //Ищем среди нитей
                if (D3Api.threads[tname]) {
                    //Открываем нить
                    D3Api.threads[tname].activate();
                    return;
                } else
                    data.newthread = getNewThread(tname);
            }
        }
        var fobj = D3Api.forms[hname];
        if (fobj) {
            if (fobj.status == 'ready' && D3Api.getOption('formCache', true)) {
                var form = fobj.form;
                if (form instanceof D3Api.D3Form) {
                    if (fobj.form.isShowed)
                        form = new D3Api.D3Form(form.name, fobj.content);
                    form.show(data, dom);
                    return form;
                }
            } else
            {
                if(fobj.status != 'load')
                    fobj.status = null;
                D3Api.forms[hname].onReadyObj.push({formData: data, showDom: dom});
            }
        }else{
            D3Api.forms[hname] = {onReadyObj: [
                {formData: data, showDom: dom}
            ]};
        }
        D3Api.loadForm(data);
        return hname;
    }
    /**
     * Загрузка Формы по его имени
     * @param name {string} - Имя формы
     */
    this.loadFormByName = function (name) {
        this.loadForm({request: {Form: name}});
    }
    /**
     * Загрузка Формы
     * @param data {Object} - параметры
     * @returns {string}
     */
    this.loadForm = function openForm(data) {
        if (!data.request.Form) {
            D3Api.debug_msg('Не указано имя формы.');
            return;
        }
        var hname = calcFormHash(data.request);
        D3Api.forms[hname] = D3Api.forms[hname] || {onReadyObj: []};
        if (D3Api.forms[hname].status)
            return hname;
        else
            D3Api.forms[hname].status = 'load';

        D3Api.requestServer({
            url: 'getform.php',
            method: 'POST',
            urlData: data.request,
            onSuccess: parseForm,
            onError: function () {},
            contextObj: {name: data.request.Form, hash: hname, thread: data.newthread},
            responseXml: false
        });
        return hname;
    };
    /**
     * Функция парса формы можно вызвать локально D3Api.parseForm.call(dataForm,xml), где dataForm данные формы (name и тд.); xml - строка дом модели с одним корневым узлом.
     * @param xml {xmlHttp}
     * @param _peq {XMLHttpRequest}
     */
    function parseForm(xml,_peq) {
        if (this.name.indexOf('.') != -1) {
             let fragArr = this.name.split('.');
             // Модифицируем HTML в формат FRM
             // Выредзаем содержимое <body> и вставляем в блоки <div>
             // Необходимо написать полнноценный конвертор на  регулярных вырожениях
             if ((fragArr[fragArr.length-1]).toLowerCase() == 'html') {
                let sysinfo = xml.split("</html>")[1];
                let bodyText = "<div"+xml.split("<body")[1];
                bodyText = bodyText.split("</body>")[0]+"</div>"
                xml = bodyText+sysinfo;
             }
        }
        var formCache = "";
        if(_peq) {
           formCache = _peq.getResponseHeader('FormCache');
        }
        var fobj = D3Api.forms[this.hash];
        fobj.content = xml;
        fobj.status = 'ready';
        fobj.form = new D3Api.D3Form(this.name, xml);
        fobj.form.callEvent('onload');
        var form = fobj.form;
        for (var i = 0, c = fobj.onReadyObj.length; i < c; i++) {
            if (i > 0){
                form = new D3Api.D3Form(this.name, xml);
            }
            form.show(fobj.onReadyObj[i].formData, fobj.onReadyObj[i].showDom);
            form.formCache = formCache;
        }
        fobj.onReadyObj = [];
    };

    /**
     * Открытие формы по разделу
     * @param dom - DOM формы
     * @param unit string - раздел
     * @param primary int - ID записи раздела
     * @param params {} - параметры
     */
    this.openFormByUnit = function(dom, unit, primary, params){
        params = params || {};
        var form;
        var data  = {
            isView: params.isView ? params.isView : undefined
        };
        var vars = {
            IS_VIEW : params.isView ? params.isView : undefined
        };
        var request = {
            unit: unit,
            method: params.method || 'default'
        };

        if (params.composition){
            form = 'System/composition';
            request.composition = params.composition;
            request.show_buttons = params.isView ? false : true;
            data.id  = primary;
            vars.PRIMARY = primary;
            vars.LOCATE = primary ? primary : undefined;
        }
        else{
            form = 'UniversalEditForm/UniversalEditForm';
            data.id  = primary;
            data.isCopy = params.isCopy ? params.isCopy : undefined;
            vars.PRIMARY = primary;
            vars.SHOW_BUTTON_OK = params.isView ? 0 : 1;
        }
        vars.data = data;

        // прокидываем доп. переменные из params
        if (params.vars){
            for (var key in params.vars){
                if(!params.vars.hasOwnProperty(key)){
                    continue;
                }
                if (typeof(params.vars[key]) == "object"){
                    vars[key] = vars[key] || {};
                    for (var k in params.vars[key]){
                        if(params.vars[key].hasOwnProperty(k)){
                            vars[key][k] = params.vars[key][k];
                        }
                    }
                }
                else vars[key] = params.vars[key];
            }
        }
        if (params.request){
            for (var key in params.request){
                if(params.request.hasOwnProperty(key)){
                    request[key] = params.request[key];
                }
            }
        }

        // функции-модификаторы параметров. Расширяются через модули в файле MODULE/System/js/common.js
        if (D3Api.openFormByUnitModifiers.length > 0){
            D3Api.openFormByUnitModifiers.forEach(function (item){
                if (item instanceof Function) item.call(this, { unit:unit, primary:primary, params:params, vars:vars, request:request });
            })
        }

        dom.openForm(form, {
            request: request,
            vars: vars,
            thread:params.thread,
            newthread:params.newthread,
            oncreate:params.oncreate,
            onclose:params.onclose
        }, params.container)
    };

    /**
     * Показать отчет
     * @param name {string}
     * @param data {Object}
     */
    this.showReport = function (name, data) {
        data = data || {};
        data.vars = data.vars || {};
        data.vars._reportName = name;
        this.showForm('report', undefined, data);
    }
    /**
     * Установить слеующий запрос как системный
     */
    this.setSysRequest = function () {
        SYSREQUEST = '&SYSREQUEST=1';
    }
    /**
     * Паралельные Запроы к веб серверу
     * @param params {Object} - параметры запроса
     * @returns {XMLHttpRequest | any | null}
     */
    this.requestThreadServer = function (params){
        /*
         * Пробежимся по параметрам если нет навигации то установим для DataSet-ов
         */
       // var datasets = {};
        var infoThread = D3Api.MULTI_REQUEST;//информация об отправляемых запросах(потоках)
        if (!infoThread) {
            infoThread = {"MAX_THREAD": "10", "MAX_REQUEST": "10", "MAX_DATA_COUNT": "6000"};
        }
        if(!('ENABLED' in infoThread)){
            infoThread.ENABLED = false;
        }
        var isDataSetTheads = false;
        if(('data' in params) && ('request' in params.data) && infoThread.ENABLED == true){
            params.data.requestThread = true;
            var copyParams = D3Api.mixin({}, params);

            var onSuccess = null;
            if(('onSuccess' in copyParams) && typeof copyParams.onSuccess == 'function'){
                onSuccess = copyParams.onSuccess;
            }

            var onError = null;
            if(('onError' in copyParams) && typeof copyParams.onError == 'function'){
                onError = copyParams.onError;
            }

            var recCount = +infoThread.MAX_DATA_COUNT || 6000;

            copyParams.data.request = D3Api.JSONparse(copyParams.data.request);
            var request = copyParams.data.request;

            for(var _cmpname in request){
                if(request.hasOwnProperty(_cmpname) && (('type' in request[_cmpname]) && request[_cmpname]['type'] == "DataSet")){


                    if(!('params' in request[_cmpname])){
                        request[_cmpname]['params'] = {};
                    }
                    if(!('_ext_' in request[_cmpname]['params'])){
                        request[_cmpname]['params']['_ext_'] = {};
                    }
                    if(!('range' in request[_cmpname]['params']['_ext_'])){
                        isDataSetTheads = true;
                        request[_cmpname]['params']['_ext_']['range'] = {
                            amount: recCount,
                            count: true,
                            keyfield: 1,
                            page: 0
                        };
                    }

                }
            }


            if(isDataSetTheads == true){
                var _reqObj = null;
                var results = {}
                var currThread = 0;
                function requestDataSetsTreadServer(){

                    // Собираем данные


                    if(D3Api.Equals({},copyParams.data.request)){
                        /* все записи получили */

                        if(currThread > 0){
                            return
                        }
                        for(var cmpname in results){
                            if(results.hasOwnProperty(cmpname) && typeof results[cmpname] == 'object'){
                                var base = results[cmpname][0];
                                for(var i = 1 ; i < results[cmpname].length; i++){
                                    base.data = base.data.concat(results[cmpname][i].data);
                                }
                                results[cmpname] = base;
                            }
                        }
                        if(onSuccess != null){
                            onSuccess.call(params.contextObj, D3Api.JSONstringify(results), _reqObj);
                        }
                        return;
                    }else{
                        if (currThread >= +infoThread['MAX_THREAD']) {
                            return;
                        }


                        for(var dataset in copyParams.data.request){
                            if(copyParams.data.request.hasOwnProperty(dataset)){
                                var ext = copyParams.data.request[dataset].params['_ext_'];
                                ext.range.page += 1;
                                if(ext.range.page > ext.countpage){
                                    /* удаляем DataSet если все данные пришли */
                                    delete copyParams.data.request[dataset];
                                }
                            }
                        }
                        if(!D3Api.Equals({},copyParams.data.request)){
                            ++currThread;
                            requestMultiServer(function(_response,_reqObj){
                                --currThread;
                                var response = D3Api.JSONparse(_response);
                                for(var cmptype in response){
                                    if(typeof response[cmptype] != 'object'){
                                        continue;
                                    }
                                    if(!(cmptype in results)){
                                        results[cmptype] = [];
                                    }
                                    results[cmptype][response[cmptype].page] = response[cmptype];
                                }
                                requestDataSetsTreadServer();
                            },function(_response,_reqObj){
                                --currThread;
                                if(onError != null){
                                    onError.call(params.contextObj,_response, _reqObj);
                                }
                            })
                        }

                    }
                    requestDataSetsTreadServer();
                }
                function requestMultiServer(_callBack,_callErrBack){
                    copyParams.onSuccess = _callBack;
                    copyParams.onError = _callErrBack;
                    copyParams.data.request = D3Api.JSONstringify(copyParams.data.request);
                    D3Api.requestServer(copyParams);
                    copyParams.data.request = D3Api.JSONparse(copyParams.data.request);

                }
                _reqObj = requestMultiServer(function(_response,_reqObj){
                    try {
                        // собираем информацию об кол-ве записей
                        var response = D3Api.JSONparse(_response);
                        for(var cmptype in response){
                            if(response.hasOwnProperty(cmptype)){
                                if(typeof response[cmptype] != 'object'){
                                    continue;
                                }
                                if(!(cmptype in results)){
                                    results[cmptype] = [];
                                }
                                results[cmptype].push(response[cmptype]);
                                if(response[cmptype].type == 'DataSet'){
                                    copyParams.data.request[cmptype]['params']['_ext_'].rowcount = response[cmptype].rowcount;
                                    copyParams.data.request[cmptype]['params']['_ext_'].countpage = Math.ceil( copyParams.data.request[cmptype]['params']['_ext_'].rowcount / recCount) - 1;
                                }else{
                                    /* удаляем не датасеты */
                                    delete copyParams.data.request[cmptype];
                                }
                            }
                        }
                        requestDataSetsTreadServer();

                    } catch (e) {
                        D3Api.debug_msg('В ответе сервера: ' + e.message);
                        return;
                    }


                },function(_response,_obj){

                })
            }else{
                return D3Api.requestServer(params);
            }
        }else {
            return D3Api.requestServer(params);
        }


    }
    /**
     * Запрос к веб серверу
     * @param params {Object} - параметры запроса
     * @returns {XMLHttpRequest | any | null}
     */
    this.requestServer = function (params) {
        var default_ctype = "application/x-www-form-urlencoded; charset=UTF-8";
        var reqObj = getRequestObject();
        var requestData = '';
        var postData = '';
        var _param = ''

        if('cache_enabled' in D3Api){
            _param += 'cache_enabled='+D3Api.cache_enabled;
        }
        if('session_cache' in D3Api){
            if(_param != ''){
                _param += "&";
            }
            _param += 'session_cache='+D3Api.session_cache;
        }
        if(_param != ''){
            _param += "&";
        }
        if (params.async == undefined){
            params.async = true;
        }
        if(params.content_type == undefined)
            params.content_type = default_ctype;
        if (params.method == 'POST') {
            postData += parseDataToUrl(params.data);
            reqObj.open('POST', D3Api.getOption('path', '') + params.url + '?' + _param + parseDataToUrl(params.urlData) + 'cache=' + D3Api.SYS_CACHE_UID + SYSREQUEST, params.async);
            reqObj.setRequestHeader("Method", "POST " + D3Api.getOption('path', '') + params.url + " HTTP/1.1");
            reqObj.setRequestHeader("Content-Type", params.content_type);
            if(params.content_type == default_ctype){
                postData += parseDataToUrl(params.data);
            }
            else{
                postData = '' + params.data;
            }
        } else {
            requestData += parseDataToUrl(params.data);
            postData = null;
            reqObj.open('GET', D3Api.getOption('path', '') + params.url + '?' + _param + parseDataToUrl(params.urlData) + requestData + 'cache=' + D3Api.SYS_CACHE_UID + SYSREQUEST, params.async);
        }
        var isSysRequest = SYSREQUEST != '';
        SYSREQUEST = '';
        if (params.requestHeaders) {
            for (var rh in params.requestHeaders) {
                if(params.requestHeaders.hasOwnProperty(rh)){
                    reqObj.setRequestHeader(rh, params.requestHeaders[rh]);
                }
            }
        }
        if('headers' in params){
            for(var key in params.headers){
                if(params.headers.hasOwnProperty(key)){
                    reqObj.setRequestHeader(key, params.headers[key]);
                }
            }
        }
        var systemUserToken = D3Api.globalClientData.get('systemUserToken');
        if (systemUserToken) {
            reqObj.setRequestHeader('X-User-Token', systemUserToken);
        }

        var reqUid = D3Api.getUniqId('req');
        var func = function () {
            if (reqObj.readyState != 4) return;
            try {
                if (reqObj.status == 200) {
                    if (checkErrorRequest(reqObj, params) && params.onSuccess instanceof Function)
                        params.onSuccess.call(params.contextObj, ((params.responseXml) ? reqObj.responseXML : reqObj.responseText),reqObj);
                } else if (params.onError instanceof Function) {
                    checkErrorRequest(reqObj, params);
                    params.onError.call(params.contextObj, (params.responseXml) ? reqObj.responseXML : reqObj.responseText, reqObj);
                }
            } catch (e) {
                D3Api.debug_msg(e);
            }
            D3Api.Base.callEvent('onRequestServerEnd', reqObj, reqUid, isSysRequest);
            delete reqObj;
        }
        if (params.async)
            reqObj.onreadystatechange = func;
        D3Api.Base.callEvent('onRequestServerBegin', reqObj, reqUid, isSysRequest);
        reqObj.send(postData);
        if (!params.async) func();
        return reqObj;
    };
    /**
     * Ошибка авторизации
     */
    this.AuthError = function() {
        D3Api.showForm.apply(this, Array.prototype.slice.call(arguments))
    }

    function checkErrorRequest(req, params) {
        var error = req.getResponseHeader('D3RequestError');
        if (!error)
            return true;

        if (params.contextObj && params.contextObj.hash) {
            D3Api.forms[params.contextObj.hash] = null;
            delete D3Api.forms[params.contextObj.hash];
            if (params.contextObj.thread)
                D3Api.threads[params.contextObj.thread].close();
        }
        var code, ind = error.indexOf(':');
        if (ind > -1) {
            code = error.substr(0, ind);
            error = error.substr(ind + 1);
        }

        switch (code) {
            case 'AuthErrorLogin':
            case 'AuthErrorLpu':
            case 'AuthErrorPass':
                var f = error.split('|');
                if (f[1]) {
                    D3Api.debug_msg(f[1]);
                } else {
                    D3Api.AuthError(f[0], D3Api.D3MainContainer, {vars: {onlyLPU: code == 'AuthErrorLpu', onlyPass: code == 'AuthErrorPass'}});
                }
                break;
            case 'DBConnectError':
                alert('Ошибка при подключении к БД: ' + error);
                break;
            default:
                D3Api.alert_msg('Неизвестная ошибка ответа: ' + error);
                break;
        }
        return false;
    };
    function isObject(_object) {
        return (_object instanceof Object) || (window['Node'] && _object instanceof window['Node']);
    };
    function parseDataToUrl(_Data, _PropName) {
        if (_PropName == undefined) _PropName = null;
        if (_Data == undefined) return '';

        var urlData = '';

        for (var _propertyName in _Data) {
            if(!_Data.hasOwnProperty(_propertyName)){
                continue;
            }
            if (isObject(_Data[_propertyName])) {
                var l_PropName = _PropName != null ? _PropName + '[' + _propertyName + ']' : _propertyName;
                urlData += parseDataToUrl(_Data[_propertyName], l_PropName);
            }
            else {
                if (_PropName != null) urlData += _PropName + '[' + _propertyName + ']=' + encodeURIComponent(_Data[_propertyName]) + '&';
                else urlData += _propertyName + '=' + encodeURIComponent(_Data[_propertyName]) + '&';
            }
        }
        return urlData;
    };
    function getRequestObject() {
        if (window.XMLHttpRequest) {
            try {
                return new XMLHttpRequest();
            } catch (e) {
            }
        } else if (window.ActiveXObject) {
            try {
                return new ActiveXObject('MSXML2.XMLHTTP.3.0');
            } catch (e) {
            }
            try {
                return new ActiveXObject('Msxml2.XMLHTTP');
            } catch (e) {
            }
            try {
                return new ActiveXObject('Microsoft.XMLHTTP');
            } catch (e) {
            }
        }
        return null;
    };
    /**
     *
     * @param text
     * @returns {ChildNode|null|*}
     */
    this.parseXML = function parseXML(text) {
        try {
            if (window.DOMParser) {
                var parser = new DOMParser();
                return parser.parseFromString(text, "text/xml").childNodes[0];
            } else if (window.ActiveXObject) {
                var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = "false";
                xmlDoc.loadXML(text);
                return xmlDoc.childNodes[0];
            }
        } catch (e) {
        }
        return null;
    };
    this.including_js = {};
    /**
     * подключение js файла
     * @param filename {string} - путь до файла
     * @param callback {Function|any|null} - колбэк
     * @returns {boolean}
     */
    this.include_js = function (filename, callback) {
        var path = filename.split('?');
        filename = path[0];
        if (this.including_js[filename] == true) {
            if (callback instanceof Function)
                callback.call(this, filename);
            return true;
        }
        this.including_js[filename] = false;
        var objHead = document.getElementsByTagName('head')[0];
        var objScript = document.createElement('script');
        objScript.type = 'text/javascript';
        objScript.src = filename.replace('.js', '') + ((this.current_theme != '') ? '_' : '') + this.current_theme + '.js' + ((path[1]) ? '?' + path[1] : '');
        objScript.onload = function () {
            D3Api.including_js[filename] = true;
            if (callback instanceof Function)
                callback.call(this, filename);
            this.onload = undefined;
            this.onreadystatechange = undefined;
        }
        objScript.onreadystatechange = function () {
            if (this.readyState == 'loaded' || this.readyState == 'complete') {
                D3Api.including_js[fileName] = true;
                if (callback instanceof Function)
                    callback.call(this, filename);
                this.onload = undefined;
                this.onreadystatechange = undefined;
            }
        }
        objHead.appendChild(objScript);
        return true;
    }
    this.including_css = {};
    /**
     * подключение css файла
     * @param filename {string} - путь до файла
     * @returns {boolean}
     */
    this.include_css = function (filename) {
        var path = filename.split('?');
        filename = path[0];
        if (this.including_css[filename] == true)
            return true;
        this.including_css[filename] = true;
        var objHead = document.getElementsByTagName('head')[0];
        var objStyle = document.createElement('link');
        objStyle.rel = 'stylesheet';
        objStyle.type = 'text/css';
        objStyle.href = filename.replace('.css', '') + ((this.current_theme != '') ? '_' : '') + this.current_theme + '.css' + ((path[1]) ? '?' + path[1] : '');

        objHead.appendChild(objStyle);
        return true;
    }
    var lastWidth = 0;
    var lastHeight = 0;
    /**
     * Изменение размера окна
     * @param force
     */
    this.resize = function (force) {
        force = force === undefined ? true : force;
        if (force || document.body.offsetWidth != lastWidth || document.body.offsetHeight != lastHeight) {
            lastWidth = document.body.offsetWidth;
            lastHeight = document.body.offsetHeight;
            this.Base.callEvent('onResize');
        }
    }
    document.onkeydown = function(e){

        var e = e || D3Api.getEvent();
        var focus_control = D3Api.getControlByDom(document.activeElement);
        if(!focus_control || !focus_control.D3Form)
            return;

        if (e.keyCode == 9 ){
            D3Api.setVar('KeyDown_shiftKey', e.shiftKey);
        } else {
            if('D3Form' in focus_control && 'callControlMethod' in focus_control.D3Form){
                focus_control.D3Form.callControlMethod(focus_control, 'CtrlKeyDown', e);
            }
        }
    }
}();
/**
 * Базовый объект D3Base
 * @class
 * @param thisObj {Object}
 * @constructor
 */
D3Api.D3Base = function (thisObj) {
    this.events = {};
    this.currentEventName = '';
    this.removedEvents = [];
    /**
     * Добавить событие
     * @param eventName {string} - Имя события
     * @param listener {Function} - колбэк вызова.
     * @returns {string}
     */
    this.addEvent = function (eventName, listener) {
        if (!(listener instanceof Function))
            return null;
        if (!this.events[eventName])
            this.events[eventName] = {};
        var uniqid = D3Api.getUniqId('event_');
        this.events[eventName][uniqid] = {func: listener, once: false};
        return uniqid;
    }
    /**
     * Добавить событие
     * @param eventName {string} - Имя события
     * @param listener {Function} - колбэк вызова.
     * @returns {string}
     */
    this.addEventOnce = function (eventName, listener) {
        var uniqid = this.addEvent(eventName, listener);
        if (!uniqid)
            return null;
        this.events[eventName][uniqid].once = true;
        return uniqid;
    }
    /**
     * Вызвать событие
     * @param eventName {string} - Имя события
     * @returns {boolean}
     */
    this.callEvent = function (eventName) {
        if (!this.events[eventName])
            return;
        this.currentEventName = eventName;
        var args = Array.prototype.slice.call(arguments, 1);
        var onces = new Array();
        var res = true;
        for (var e in this.events[eventName]) {
            if(!('events' in this)){
                continue;
            }
            if(!this.events[eventName].hasOwnProperty(e)){
                continue;
            }
            if (this.events[eventName][e].func.apply(thisObj || this, args) === false)
                res = false;
            if (this.events && this.events[eventName][e].once)
                onces.push(e);
        }
        this.currentEventName = '';
        onces = onces.concat(this.removedEvents);
        for (var i = 0, c = onces.length; i < c; i++) {
            this.removeEvent(eventName, onces[i]);
        }
        this.removedEvents = [];
        onces = null;
        return res;
    }
    /**
     * Очистить Событие по имени
     * @param eventName {string} - Имя события
     */
    this.clearEvents = function (eventName) {
        this.events[eventName] = {};
    }
    /**
     * Удалить событие по uid
     * @param eventName {string} - Имя события
     * @uniqid uniqid {string} - уникальный идентификатор события
     * @returns {boolean}
     */
    this.removeEvent = function (eventName, uniqid) {
        if (!this.events[eventName] || !this.events[eventName][uniqid])
            return false;
        if (eventName == this.currentEventName) {
            this.removedEvents.push(uniqid);
            return true;
        }
        this.events[eventName][uniqid] = null;
        delete this.events[eventName][uniqid];
        return true;
    }
    /**
     * Удалить событие
     * @param eventName {string} - Имя события
     * @returns {boolean}
     */
    this.removeEvents = function (eventName) {
        if (!this.events[eventName])
            return false;

        if (eventName == this.currentEventName) {
            for (var uid in this.events[eventName]){
                if(this.events[eventName].hasOwnProperty(uid)){
                    this.removedEvents.push(uid);
                }

            }
            return true;
        }
        this.events[eventName] = null;
        delete this.events[eventName];
        return true;
    }
    /**
     * Удалить все событие
     * @returns {boolean}
     */
    this.removeAllEvents = function () {
        this.events = [];
        return true;
    }
    /**
     * Деструктор
     */
    this.destructorBase = function () {
        this.destroyed = true;
        this.events = null;
        delete this.events;
    }
}
D3Api.Base = {};
D3Api.D3Base.call(D3Api.Base);

/**
 * Базовый объект D3Form
 * @class
 * @param name {string} - путь формы
 * @param xml {Object} - Дом объект
 * @constructor
 */
D3Api.D3Form = function (name, xml) {
    D3Api.D3Base.call(this);
    this.destroyed = false;
    this.isActive = false;
    this.isShowed = false;
    this.isCreated = false; // метка отработки пользовательского события onCreate
    this.leftForm = null;
    this.rightForm = null;
    this.formUid = D3Api.getUniqId('f');
    this.name = name;
    this.formData = {};
    this.formEditMode = false;
    this.formCheckPrivs = null; // нужно ли проверять на форме права
    this.formCheckCreated = null; // нужно ли дожитаться завершения работы onCreate
    this.formSkipRefresh = null; // пропуск системной проверки D3Api.D3Form.onRefreshForm при открытии формы
    this.formUnit = null; // привязанный к форме раздел системы
    this.formPrimary = null; // имя PRIMARY переменной на форме
    this.currentContext = null;
    this.vars = {};
    this.container = null;
    var dataSets = {};
    this.dataSets = dataSets;
    var repeaters = {};
    this.repeaters = repeaters;
    var activateDataSets = new Array();
    var modules = {};
    var actions = {};
    this.actions = actions;
    var sysinfo = {};
    this.sysinfo = sysinfo;
    var MainForm = this;
    var resizeEventUid = D3Api.Base.addEvent('onResize', resizeForm);
    var resizeTimer = null;
    this.scrollDoms = [];
    function resizeForm(DOM, resize) {
        if(!MainForm){
            return
        }
        if (!D3Api.showedDom(MainForm.DOM))
            return;
        DOM = DOM || MainForm.DOM;
        D3Api.runCalcSize(DOM, DOM);
        MainForm.callEvent('onResize');
        if (_modalBorders_.top) {
            D3Api.MainDom.D3FormCloseCtrl && D3Api.setControlPropertyByDom(D3Api.MainDom.D3FormCloseCtrl, 'visible', false);
            D3Api.MainDom.D3FormHelp && D3Api.setControlPropertyByDom(D3Api.MainDom.D3FormHelp, 'visible', false);
            D3Api.hideDom(_modalBorders_.top);
            D3Api.hideDom(_modalBorders_.right);
            D3Api.hideDom(_modalBorders_.bottom);
            D3Api.hideDom(_modalBorders_.left);
            var md = D3Api.getAbsoluteClientRect(D3Api.MainDom);
            var fs = D3Api.getAbsoluteClientRect(MainForm.DOM);
            _modalBorders_.top.style.top = md.y + 'px';
            _modalBorders_.top.style.left = fs.x + 'px';
            _modalBorders_.top.style.width = fs.width + 'px';
            _modalBorders_.top.style.height = (fs.y - md.y) + 'px';

            _modalBorders_.right.style.top = md.y + 'px';
            _modalBorders_.right.style.left = (fs.x + fs.width) + 'px';
            _modalBorders_.right.style.width = (md.x + md.width - fs.x - fs.width) + 'px';
            _modalBorders_.right.style.height = md.height + 'px';

            _modalBorders_.bottom.style.top = (fs.y + fs.height) + 'px';
            _modalBorders_.bottom.style.left = fs.x + 'px';
            _modalBorders_.bottom.style.width = fs.width + 'px';
            _modalBorders_.bottom.style.height = (md.y + md.height - fs.y - fs.height) + 'px';

            _modalBorders_.left.style.top = md.y + 'px';
            _modalBorders_.left.style.left = md.x + 'px';
            _modalBorders_.left.style.width = (fs.x - md.x) + 'px';
            _modalBorders_.left.style.height = md.height + 'px';

            D3Api.setDomDisplayDefault(_modalBorders_.top);
            D3Api.setDomDisplayDefault(_modalBorders_.right);
            D3Api.setDomDisplayDefault(_modalBorders_.bottom);
            D3Api.setDomDisplayDefault(_modalBorders_.left);

        }
    }

    function resizeOnlyForm() {
        if (!MainForm) {
            return;
        }
        D3Api.runCalcSize(MainForm.DOM, MainForm.DOM);
    }

    /**
     * Изменение размер текущей формы
     */
    this.resize = function () {
        if (resizeTimer) {
            clearTimeout(resizeTimer);
            resizeTimer = null;
        }
        resizeTimer = setTimeout(resizeOnlyForm, 100);
    }
    var _modalBorders_ = {top: null, right: null, bottom: null, left: null};
    var fDOM = document.createElement('DIV');
    fDOM.innerHTML = xml;

    this.DOM = fDOM.children[0];
    var div_first = document.createElement("div");
    div_first.innerHTML = '<div cmptype="Base" tabindex="0" name="firstControl" oncreate="D3Api.BaseCtrl.init_focus(this);"/>';
    this.DOM.insertBefore(div_first, this.DOM.children[0]);

    // Дубликат дива ()
    //var div_last = document.createElement("div");
    //div_last.innerHTML = '<div cmptype="Base" tabindex="0" name="lastControl" oncreate="D3Api.BaseCtrl.init_focus(this);"/>';
    //this.DOM.appendChild(div_last);

    if (!this.DOM.getAttribute) {
        D3Api.notify('Информация', 'Ошибка синтаксиса при создании формы "' + name + '"', {modal: true});
        this.DOM = document.createElement('DIV');
    }
    this.DOM.D3Form = this;

    //Пространство скрипта формы
    var Form = {
        _DOM_: MainForm.DOM,
        _pushHistory_: function (container) {
            return container.DOM == D3Api.MainDom;
        },
        //Объект для проброса в onclose
        _onCloseResult_: undefined
        //_withParams_: false
    };

    this.formParams = null;
    this.formParamsHash = [];
    this.formParamsSettings = {};
    var formParamsHash = this.formParams;
    var getParamsAction = createAction('get_form_params');
    getParamsAction.requestParams['form'] = 'System/FormParams/get_form_params';
    getParamsAction.addSysInfoParam({get: 'ps_form', srctype: 'var', src: 'ps_form'});
    getParamsAction.addSysInfoParam({put: 'ps_params', srctype: 'var', src: 'ps_params'});

    var setParamsAction = createAction('set_form_params');
    setParamsAction.requestParams['form'] = 'System/FormParams/set_form_params';
    setParamsAction.addSysInfoParam({get: 'ps_form', srctype: 'var', src: 'ps_form'});
    setParamsAction.addSysInfoParam({get: 'ps_params', srctype: 'var', src: 'ps_params'});


    // var CacheSessDelete = createModule('CacheSessDelete');
    // CacheSessDelete.requestParams['form'] = 'System/CacheSessDelete/CacheSessDelete';
    // CacheSessDelete.addSysInfoParam({get: 'formCache', srctype: 'var', src: 'formCache'});

    //События, которые оборачиваются внутренним обработчиком
    /*this.execDomEvents = new Array(
     'onclick',
     'ondblclick',
     //'onchange',
     'onfocus',
     'onblur',
     'onmousemove',
     'onmousedown',
     'onmouseup',
     'onkeydown',
     'onkeyup',
     'onkeypress',
     'onmouseover',
     'onmouseout',
     'onselect',
     'onsubmit',
     'onreset');*/
    this.execDomEvents = {
        'onclick': true,
        'ondblclick': true,
        //'onchange'     : true,
        'onfocus': true,
        'onblur': true,
        'onmousemove': true,
        'onmousedown': true,
        'onmouseup': true,
        'onkeydown': true,
        'onkeyup': true,
        'onkeypress': true,
        'onmouseover': true,
        'onmouseout': true,
        'onselect': true,
        'onsubmit': true,
        'onreset': true,
        'onmouseleave':true,
        'onmouseenter':true,
        'oncontextmenu':true
    };
    if (D3Api.BROWSER.msie) {
        this.execDomEventsIE = {};
        for (var en in this.execDomEvents) {
            if(this.execDomEvents.hasOwnProperty(en)){
                this.execDomEventsIE['_' + en + '_'] = en;
            }
        }
    }
    var notCheckEnabledEvents = {
        'dummy': true,
        'onload': true,
        'onshow': true,
        'onprepare': true,
        'oncreate': true,
        'oninit': true,
        'onformactivate': true,
        'onclose': true,
        'onrefresh': true,
        'onbefore_refresh': true,
        'onafter_refresh': true
    };
    ////////////////////////////////////////////////////////
    //Функция для замыкания
    function execEventFunc(funcBody, argumentsObj) {
        var res = null;
        var args = Array.prototype.slice.call(argumentsObj);
        var argsNames = '';
        if ((args[0] instanceof Object) && (args[0] instanceof Event))
            argsNames = 'event';
        if (funcBody instanceof Object) {
            argsNames = funcBody['args'] || argsNames;
            funcBody = funcBody['func'];
        }
        eval('try{ res = (function(' + argsNames + '){' + funcBody + '}).apply(this,args); }catch(e){D3Api.debug_msg(e);}');
        return res;
    };
    /**
     * Вызвать фукнциою текущей формы
     * @param funcName {string} - имя формы
     * @returns {null}
     */
    this.callFunction = function (funcName) {
        var args = Array.prototype.slice.call(arguments, 1);
        res = null;
        try {
            var res = Form[funcName].apply(this, args);
        } catch (e) {
            D3Api.debug_msg(e);
        }
        ;
        return res;
    }
    /**
     * Проверить на существование функции
     * @param funcName {string} - имя функции
     * @returns {boolean}
     */
    this.existsFunction = function (funcName) {
        return Form[funcName] instanceof Function;
    }
    this.execScript = execEventFunc;

    /**ы
     * Для дом событий, замыкает функцию в пространство формы
     * @param dom
     * @param funcBody
     * @param eventName
     * @param context
     * @returns {function(): null}
     */
    this.execDomEventFunc = function (dom, funcBody, eventName, context) {
        eventName = eventName || 'dummy';
        context = context || MainForm.currentContext;
        return function () {
            var ev = D3Api.getEvent(arguments[0]);
            D3Api.setEvent(arguments[0]);
            var cC = MainForm.currentContext;
            MainForm.currentContext = context || MainForm.currentContext;

            var notCheckEnabledEventsControl = []; // события компонента, на которые не должно влиять enabled
            if (D3Api.getProperty(dom, 'not_check_enabled_events'))
                notCheckEnabledEventsControl = D3Api.getProperty(dom, 'not_check_enabled_events','').split(";");
            if (!notCheckEnabledEvents[eventName] && notCheckEnabledEventsControl.indexOf(eventName) == -1) {
                if (getControlProperty(dom, 'enabled') === false) {
                    D3Api.setEvent(ev);
                    return;
                }
            }
            var res = execEventFunc.call(dom, funcBody, arguments);
            //Форму могли закрыть
            if (MainForm)
                MainForm.currentContext = cC;

            D3Api.setEvent(ev);
            return res;
        };
    }
    ///////////////////////////////////////////////////////
    /**
     * Парсер формы
     * @param dom
     * @param dataset
     * @param repeatersStack
     * @param currentUid
     */
    this.parse = function (dom, dataset, repeatersStack, currentUid) {
        var rStack = repeatersStack && repeatersStack.length > 0;
        if (D3Api.hasProperty(dom, 'noparse'))
            return;
        repeatersStack = repeatersStack || new Array();
        var dsName = D3Api.getProperty(dom, 'dataset');
        var rep = D3Api.getProperty(dom, 'repeat');
        if (dsName || rep) {
            if (rStack) {
                D3Api.setProperty(dom, 'isrepeat', repeatersStack[repeatersStack.length - 1].uniqId);
            }
            if (dsName) {
                if (!dataSets[dsName])
                    dataSets[dsName] = new D3Api.D3DataSet(this, dsName);
                dataset = dataSets[dsName];
                if (!rStack) {
                    var prop = null;
                    if (prop = D3Api.getProperty(dom, 'onbefore_refresh'))dataset.addEvent('onbefore_refresh', this.execDomEventFunc(dom, prop));
                    if (prop = D3Api.getProperty(dom, 'onrefresh'))dataset.addEvent('onrefresh', this.execDomEventFunc(dom, prop));
                    if (prop = D3Api.getProperty(dom, 'onafter_refresh'))dataset.addEvent('onafter_refresh', this.execDomEventFunc(dom, prop));
                }
            }
            //Это повторитель

            if (rep) {
                var parent = null;
                if (repeatersStack.length > 0)
                    parent = repeatersStack[repeatersStack.length - 1];

                var repeater = new D3Api.D3Repeater(this, dom, parent, dataset);
                if (repeater.name)
                    repeaters[repeater.name] = repeater;
            }
        }
        var cmptype = D3Api.getProperty(dom, 'cmptype');
        var p = '';
        if (cmptype) {
            if (rStack) {
                D3Api.setProperty(dom, 'isrepeat', repeatersStack[repeatersStack.length - 1].uniqId);
            }
            switch (cmptype.toLowerCase()) {
                case 'sysinfo':
                    sysinfo_parse(dom);
                    break;
                case 'script':
                    script_parse.call(this, dom);
                    break;
                default:
                    currentUid = MainForm.default_parse(dom, true, undefined, currentUid);
                    var find = false;
                    if (dsName) {
                        if(rep){
                            repeater.addControl(dom);
                            find = true;
                        }else {
                            for (var c = repeatersStack.length - 1; c >= 0; c--) {
                                if (repeatersStack[c].dataSet && repeatersStack[c].dataSet.name == dsName) {
                                    repeatersStack[c].addControl(dom);
                                    find = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (!find)
                        if (repeatersStack.length > 0 && !dsName)
                            repeatersStack[repeatersStack.length - 1].addControl(dom);
                        else if (dataset)
                            dataset.addControl(dom);
                    break;
            }
        } else if (p = D3Api.getProperty(dom, 'cmpparse', false)) {
            if (rStack) {
                D3Api.setProperty(dom, 'isrepeat', repeatersStack[repeatersStack.length - 1].uniqId);
            }
            MainForm.default_parse(dom, true, undefined, currentUid);
        }
        if (repeater) repeatersStack.push(repeater);
        if (dom.children) {
            for (var i = 0, c = dom.children.length; i < c; i++) {
                this.parse(dom.children[i], dataset, repeatersStack, currentUid);
            }
        }

        if (repeater) repeatersStack.pop();
    }
    var scriptsLoad = 0;
    var sysinfo_types =
    {
        'dataset': function (dom) {
            var dsName = D3Api.getProperty(dom, 'name');
            if (!dsName) {
                D3Api.debug_msg('Не указано имя DataSet');
                return;
            }
            if (!dataSets[dsName])
                dataSets[dsName] = new D3Api.D3DataSet(MainForm, dsName, dom);
            else {
                dataSets[dsName].init(dom);
            }
            sysinfo_load(sysinfo, dom, {type: 'dataset', name: '', activateoncreate: 'true', showerror: 'true'}, new Array('get', 'srctype', 'src', 'parent', 'property', 'global'), dataSets[dsName]);
            if (sysinfo[dsName].properties.activateoncreate == 'true')
                activateDataSets.push(dsName);
        },
        'action': function (dom) {
            var actName = D3Api.getProperty(dom, 'name');
            if (!actName) {
                D3Api.debug_msg('Не указано имя Action');
                return;
            }
            if (!actions[actName])
                actions[actName] = new D3Api.D3Action(MainForm, actName, dom);
            else {
                actions[actName].init(dom);
            }
            sysinfo_load(sysinfo, dom, {type: 'action', name: '', activateoncreate: 'true', showerror: 'true', mode: 'get'}, new Array('get', 'put', 'srctype', 'src', 'property', 'global'), actions[actName]);
        },
        'module':function(dom){
            var actName = D3Api.getProperty(dom, 'name');
            if (!actName) {
                D3Api.debug_msg('Не указано имя Module');
                return;
            }
            if (!modules[actName]){
                modules[actName] = new D3Api.D3Module(MainForm, actName, dom);
            }else{
                modules[actName].init(dom);
            }
            sysinfo_load(sysinfo, dom, {type: 'module', name: '', activateoncreate: 'true', showerror: 'true', mode: 'get'}, new Array('get', 'put', 'srctype', 'src', 'property', 'global'), modules[actName]);
        },
        'subaction': function (dom, params, postObject) {
            var subActName = D3Api.getProperty(dom, 'name');
            if (!subActName) {
                D3Api.debug_msg('Не указано имя SubAction');
                return;
            }
            var subActPO = sysinfo_load(postObject.childs, dom, {type: 'subaction', name: '', repeatername: '', showerror: 'true', mode: 'get', execon: 'upd'}, new Array('get', 'put', 'srctype', 'src', 'property', 'global'));

            if (subActPO.properties.repeatername != '') {
                var rep = MainForm.getRepeater(subActPO.properties.repeatername);
                if (rep) {
                    rep.actionData = true;
                } else {
                    D3Api.debug_msg('SubAction "' + subActName + '" ссылается на несуществующий Repeater ("' + subActPO.properties.repeatername + '").');
                    return;
                }
            }
            //Переопределяем функцию получения данных для запроса
            subActPO.getChildData = function () {
                var rep = MainForm.getRepeater(this.properties.repeatername);
                var cC = MainForm.currentContext;
                params = [];
                if (rep && this.properties.execon) {
                    var chData = rep.getChangedData(this.properties.execon);
                    for (var chD in chData) {
                        if(!chData.hasOwnProperty(chD)){
                            continue;
                        }
                        MainForm.currentContext = chData[chD];
                        MainForm.setVar('_clonedata_', chData[chD].clone.data);
                        params.push(this.getParams());
                    }
                    MainForm.setVar('_clonedata_', undefined);
                } else
                    params.push(this.getParams());

                MainForm.currentContext = cC;
                return params;
            }
            subActPO.setParams = function (data) {
                for (var i = 0, ip = this.params.length; i < ip; i++) {
                    if (this.params[i].put != undefined) {
                        switch (this.params[i].srctype) {
                            case 'var':
                                var DESTOBJ = MainForm;
                                if (this.params[i].global === 'true')
                                    DESTOBJ = D3Api;
                                if (this.params[i].property) {
                                    var obj = DESTOBJ.getVar(this.params[i].src) || {};
                                    obj[this.params[i].property] = data[this.params[i].put];
                                    DESTOBJ.setVar(this.params[i].src, obj);
                                } else
                                    DESTOBJ.setVar(this.params[i].src, data[this.params[i].put]);
                                break;
                            case 'ctrl':
                                D3Api.BaseCtrl.callMethod(MainForm.getControl(this.params[i].src), 'stopWait');
                                MainForm.setControlProperty(this.params[i].src, this.params[i].prop, data[this.params[i].put]);
                                break;
                        }
                    }
                }
            }
        },
        'var': function (dom, params, postObject) {
            var pObj = {ignorenull: false};

            for (var i = 0, c = params.length; i < c; i++) {
                var attr = D3Api.getProperty(dom, params[i]);
                if (attr != null)
                    pObj[params[i]] = attr;
            }
            if (postObject.properties.type == 'action') {
                actions[postObject.properties.name].addSysInfoParam(pObj);
            } else if (postObject.properties.type == 'dataset') {
                dataSets[postObject.properties.name].addSysInfoParam(pObj);
            } else if(postObject.properties.type == 'module'){
                modules[postObject.properties.name].addSysInfoParam(pObj);
            } else
                postObject.params.push(pObj);
        },
        'scriptfile': function (dom) {
            scriptsLoad++;
            if (!D3Api.include_js(dom.textContent || dom.text, function () {
                scriptsLoad--;
            }))
                scriptsLoad--;
        },
        'cssfile': function (dom) {
            D3Api.include_css(dom.textContent || dom.text);
        },
        'formgetparam': function (dom) {
            MainForm.formParamsHash.push(D3Api.getTextContent(dom));
        },
        'formparam': function (dom) {
            var t = D3Api.getTextContent(dom);
            t = t.split(':');
            MainForm.formParamsSettings[t[0]] = t[1] || true;
        }
    }

    function postObject(defProperties) {
        this.properties = defProperties || {};
        this.params = new Array();
        this.childs = {};

        this.getParams = function () {
            var params = {};
            for (var i = 0, c = this.params.length; i < c; i++) {
                var par = this.params[i];
                if (par['get'] && par['srctype'] && par['src']) {
                    var value = '';
                    switch (par['srctype']) {
                        case 'ctrl':
                            var pf = par['src'].split(':');
                            if(par['property'])
                            {
                                value = MainForm.getControlProperty(pf[0], par['property']);
                            }else if (pf.length > 1)
                            {
                                value = MainForm.getControlProperty(pf[0], pf[1]);
                            }else{
                                value = MainForm.getControlProperty(pf[0], 'value');
                            }
                            break;
                        case 'var':
                            var SRCOBJ = MainForm;
                            if (par['global'] === 'true')
                                SRCOBJ = D3Api;
                            if (par['property'])
                                value = SRCOBJ.getVar(par['src'])[par['property']];
                            else
                                value = SRCOBJ.getVar(par['src']);
                            break;
                    }
                    params[par['get']] = par[par['get']] || value;
                }
            }
            for (var ch in this.childs) {
                if(!this.childs.hasOwnProperty(ch)){
                    continue;
                }
                params['_childs_'] = params['_childs_'] || {};
                params['_childs_'][ch] = this.childs[ch].getChildData();
            }
            return params;
        }
        this.setParams = function () {
        };
        this.getChildData = function () {
            //Переопределить
            return this.getParams();
        }
    }
    /**
     *
     * @param defProperties
     */
    this.postObject = function(defProperties){
        postObject.call(this,defProperties);
    }
    function sysinfo_load(sys_array, dom, defProperties, params, obj) {
        var name = D3Api.getProperty(dom, 'name');
        if (!name) {
            D3Api.debug_msg('Загрузка sysinfo. Имя объекта не указано.');
            return;
        }
        sys_array[name] = new postObject(D3Api.mixin(defProperties));
        if (obj)
            obj.sysinfo = sys_array[name];

        for (var i = 0, c = dom.attributes.length; i < c; i++) {
            sys_array[name].properties[dom.attributes[i].name] = dom.attributes[i].value;
        }
        for (var i = 0, c = dom.childNodes.length; i < c; i++) {
            var ch = dom.childNodes[i];
            var nodeName = ch.nodeName.toLowerCase();
            if (nodeName === '#text') continue;
            if (sysinfo_types[nodeName] instanceof Function) {
                sysinfo_types[nodeName](ch, params, sys_array[name]);
            }
        }
        return sys_array[name];
    }

    function sysinfo_parse(dom) {
        var xml = D3Api.parseXML('<sysinfo>' + dom.innerHTML + '</sysinfo>');
        for (var i = 0, c = xml.childNodes.length; i < c; i++) {
            var ch = xml.childNodes[i];
            var nodeName = ch.nodeName.toLowerCase();
            if (nodeName === '#text') continue;
            if (sysinfo_types[nodeName] instanceof Function) {
                sysinfo_types[nodeName](ch);
            }
        }
    }

    function script_parse(dom) {
        try {
            eval(dom.value);
        } catch (e) {
            D3Api.debug_msg(e);
            D3Api.debug_msg(dom.value);
        }
    }

    /**
     * Парсер
     * @param dom
     * @param systemEvents
     * @param context
     * @param currentUid
     * @returns {*}
     */
    this.default_parse = function (dom, systemEvents, context, currentUid) {
        var p = '';
        var thisDom = dom;
        if (p = D3Api.getProperty(dom, 'cmptype', false)) {
            if (!dom.id)
                dom.id = D3Api.getUniqId('d3ctrl');

            dom.D3Base = new D3Api.D3Base(dom);
            p = 'cmptype';
        } else if (p = D3Api.getProperty(dom, 'cmpparse', false)) {
            if (p != 'true') {
                thisDom = D3Api.getControlByDom(dom, p);
            }
            thisDom = thisDom || dom;
            dom.D3NotCmp = true;
        } else
            return;

        dom.D3Form = MainForm;
        dom.D3Store = {_setEvents_: {}};
        var attrs = null;
        if (systemEvents) {
            var attrsNeed = {onload: true, onshow: true, oncreate: true, onprepare: true, onclose: true, onformactivate: true};
            for (var i = 0, c = dom.attributes.length; i < c; i++) {
                if (this.execDomEvents[dom.attributes[i].name] === true) {
                    attrs = attrs || {};
                    attrs[dom.attributes[i].name] = dom.attributes[i].value;
                }
                if (!dom.attributes[i] || attrsNeed[dom.attributes[i].name] !== true) continue;
                MainForm.addEvent(dom.attributes[i].name, MainForm.execDomEventFunc(thisDom, dom.attributes[i].value, dom.attributes[i].name));
            }
        }
        if (!attrs) {
            attrs = {};
            for (var i = 0, c = dom.attributes.length; i < c; i++) {
                if (this.execDomEvents[dom.attributes[i].name] === true)
                    attrs[dom.attributes[i].name] = dom.attributes[i].value;
            }
        }
        for (var name in attrs) {
            if(!attrs.hasOwnProperty(name)){
                continue;
            }
            dom.D3Store._setEvents_[name] = true;
            dom[name] = MainForm.execDomEventFunc(thisDom, 'if(callControlEvent(D3Api.getControlByDom(this),\'' + name + '\',event)===false)return;' + attrs[name], name, context);
            if (D3Api.BROWSER.msie) {
                D3Api.setProperty(dom, '_' + name + '_', attrs[name]);
            }
        }
        if (D3Api.BROWSER.msie) {
            attrs = {};
            for (var i = 0, c = dom.attributes.length; i < c; i++) {
                if (this.execDomEventsIE[dom.attributes[i].name] !== undefined)
                    attrs[this.execDomEventsIE[dom.attributes[i].name]] = dom.attributes[i].value;
            }
            for (var name in attrs) {
                if(attrs.hasOwnProperty(name)){
                    dom[name] = MainForm.execDomEventFunc(thisDom, attrs[name], name, context);
                }
            }
        }
        if (p == 'cmptype' && !D3Api.hasProperty(dom, 'isrepeat', false)) {
            MainForm.addEvent('oninit', function () {
                D3Api.BaseCtrl.callMethod(dom, 'init')
            });
            if (D3Api.hasProperty(dom, 'cmpext'))
                MainForm.addEvent('oninit', function () {
                    var ct = D3Api.getProperty(dom,'cmptype');
                    D3Api.setProperty(dom,'cmptype',D3Api.getProperty(dom,'cmpext'));
                    D3Api.BaseCtrl.callMethod(dom, 'init');
                    D3Api.setProperty(dom,'cmptype',ct);
                });
            dom.D3Store._uid_ = D3Api.getUniqId('uid');
        }
        if (D3Api.hasProperty(dom, 'events')) {
            D3Api.setProperty(dom, 'events' + currentUid, D3Api.getProperty(dom, 'events'));
        }
        return dom.D3Store._uid_;
    }
    /**
     * Получить значение переменной
     * @param name {string} - имя переменной
     * @returns {*}
     */
    this.getVar = function (name) {
        var objProp = false;
        if(name.indexOf('.') != -1)
        {
            name = name.split('.');
            objProp = name[1];
            name = name[0];
        }
        if (!this.vars.hasOwnProperty(name))
            D3Api.debug_msg('Переменная "' + name + '" на форме не определенна.');
        return objProp?this.vars[name][objProp]:this.vars[name];
    }
    /**
     * устанвить переменную
     * @param name {string} - имя переменной
     * @param value {*} - значение
     */
    this.setVar = function (name, value) {
        this.vars[name] = value;
        if (value === undefined)
            delete this.vars[name];
    }
    /**
     * Получить свойство контрола
     * @param control {string|Object} - котрол
     * @param nameProperty {string} - Свойство
     * @returns {*}
     */
    this.getControlProperty = function (control, nameProperty) {
        if (typeof(control) == 'string') {
            var control = getControl(control);
            if (!control) return;
        }
        return D3Api.getControlPropertyByDom(control, nameProperty);
    }
    /**
     * Установить свойство контрола
     * @param control {string|Object} - котрол
     * @param nameProperty {string} - Свойство
     * @param value {string} - значение
     * @returns {*}
     */
    this.setControlProperty = function (control, nameProperty, value) {
        if (!Array.isArray(control)) {
            control = [control];
        }

        // Возвращаем 0ой элемент чтобы случайно не сломать интерфейс, по старой логике!
        return control.map(function (control) {
            if (typeof control === 'string') {
                control = getControl(control);

                if (!control) {
                    return;
                }
            }

            return D3Api.setControlPropertyByDom(control, nameProperty, value);
        })[0];
    }
    /**
     * Добавить событие для контрола.
     * @param control {string|Object} - контрол
     * @param eventName {string} - имя эвента
     * @param listener {Function} - колбэк функция
     */
    this.addControlEvent = function (control, eventName, listener) {
        if (typeof(control) == 'string') {
            var control = getControl(control);
            if (!control) return;
        }
        D3Api.addControlEventByDom(control, eventName, listener);
    }

    /**
     * Вызвать событие для контрола.
     * @param control {string|Object} - контрол
     * @param eventName {string} - имя эвента
     * @returns {*}
     */
    this.callControlEvent = function (control, eventName) {
        if (typeof(control) == 'string') {
            var control = getControl(control);
            if (!control) return;
        }
        arguments[0] = control;
        return D3Api.callControlEventByDom.apply(this, arguments);
    }
    /**
     * Удалить событие для контрола.
     * @param control {string|Object} - контрол
     * @param eventName {string} - имя эвента
     * @param uniqid
     */
    this.removeControlEvent = function (control, eventName, uniqid) {
        if (typeof(control) == 'string') {
            var control = getControl(control);
            if (!control) return;
        }
        D3Api.removeControlEventByDom(control, eventName, uniqid);
    }

    /**
     * Удалить все событие для контрола
     * @param control {string|Object} - контрол
     * @param eventName {string} - имя эвента
     */
    this.removeControlEvents = function (control, eventName) {
        if (typeof(control) == 'string') {
            var control = getControl(control);
            if (!control) return;
        }
        D3Api.removeControlEventsByDom(control, eventName);
    }
    /**
     * Получить невидимое значение
     * @param control {string|Object} - контрол
     * @returns {*}
     */
    this.getValue = function (control) {
        return this.getControlProperty(control, 'value');
    }

    /**
     * Установить невидимое значение
     * @param control {string|Object} - Контрол
     * @param value {*} - Значение
     * @returns {*}
     */
    this.setValue = function (control, value) {
        return this.setControlProperty(control, 'value', value);
    }

    /**
     * Получить видимое значение
     * @param control {string|Object} - Контрол
     * @returns {*}
     */
    this.getCaption = function (control) {
        return this.getControlProperty(control, 'caption');
    }

    /**
     * Установить видимое значение
     * @param control {string|Object} - Контрол
     * @param value {*} - Значение
     * @returns {*}
     */
    this.setCaption = function (control, value) {
        return this.setControlProperty(control, 'caption', value);
    }

    /**
     * Доступен  ли элемент
     * @param control {string|Object} - Контрол
     * @returns {*}
     */
    this.getEnabled = function (control) {
        return this.getControlProperty(control, 'enabled');
    }
    /**
     * установка доступности
     * @param control {string|Object} - Контрол
     * @param value {boolean}
     * @returns {*}
     */
    this.setEnabled = function (control, value) {
        return this.setControlProperty(control, 'enabled', value);
    }

    /**
     * Видимый ли элемент
     * @param control {string|Object} - Контрол
     * @returns {*}
     */
    this.getVisible = function (control) {
        return this.getControlProperty(control, 'visible');
    }

    /**
     * Установить видимость элемента
     * @returns {*}
     */
    this.setVisible = function () {
        var ctrls = Array.prototype.concat.apply([], arguments);
        var value = ctrls.pop();

        return this.setControlProperty(ctrls, 'visible', value);
    };

    /**
     * Получить дом контрола
     * @param name {string} - Имя контрола
     * @returns {Object}
     */
    this.getControl = function (name) {
        var ctrl = this.controlExist(name);
        if (!ctrl)
            D3Api.debug_msg('Компонент не найден: ' + name);

        return ctrl;
    }

    /**
     * Удалить контрол
     * @param name {string} - Имя контрола
     */
    this.removeControl = function (name) {
        var ctrl = this.getControl(name);
        if (ctrl)
            D3Api.removeDom(ctrl);
    }

    /**
     * Существует ли контрол
     * @param name {string} - Имя контрола
     * @returns {boolean|*}
     */
    this.controlExist = function (name) {
        var ctrl = false;
        var sel = '[cmptype][name="' + name + '"]';

        if (this.currentContext) {
            ctrl = D3Api.getDomBy(this.currentContext, sel);
            if (!ctrl && D3Api.hasProperty(this.currentContext, 'cmptype') && D3Api.getProperty(this.currentContext, 'name') == name) {
                ctrl = this.currentContext;
            }
        }
        if (!ctrl) {
            var ctrls = D3Api.getAllDomBy(this.DOM, sel);

            for (var i = 0; i < ctrls.length; i++) {
                if (ctrls[i].D3Form == this) {
                    return ctrls[i];
                }
            }
            return false;
        }
        if (ctrl && ctrl.D3Form && ctrl.D3Form != this)
            ctrl = false;
        return ctrl;
    };

    /**
     * Вызвать метод контрола
     * @param control {string|Object} - Имя контрола
     * @param method {string} - Имя метода
     * @returns {*}
     */
    this.callControlMethod = function (control, method) {
        if (typeof(control) == 'string') {
            var control = getControl(control);
            if (!control) return;
        }
        return D3Api.BaseCtrl.callMethod.apply(D3Api.BaseCtrl, arguments);
    }
    /**
     *
     * @param control
     * @returns {undefined}
     */
    this.controlAPI = function (control) {
        if (typeof(control) == 'string') {
            var control = getControl(control);
            if (!control) return;
        }
        return D3Api.getControlAPIByDom(control);
    }

    /**
     * Установить значение формы
     * @param caption {string} - значение.
     */
    this.setFormCaption = function (caption) {
        if (caption === undefined)
            caption = D3Api.getProperty(this.DOM, 'caption', '');
        else
            D3Api.setProperty(this.DOM, 'caption', caption);

        this.callEvent('onformcaption',caption);
        if (!this.container.DOM.D3FormCaption)
            return;

        this.container.DOM.D3FormCaption._setCaption(caption);
        this.container.DOM.D3FormCaption._setIcon(D3Api.getProperty(this.DOM, 'icon', ''));
        this.container.DOM.D3FormCaption.onclick = showFormMenu;
        if (caption)
            this.container.DOM.D3FormCaption._show();
        else
            this.container.DOM.D3FormCaption._hide();
    }

    /**
     * Установить подсказку
     * @param hint {string} - значение.
     */
    this.setFormHint = function (hint) {
        if (!this.container.DOM.D3FormCaption)
            return;
        this.container.DOM.D3FormCaption._setHint(hint);
    }

    /**
     * Получить значение формы
     * @returns {string}
     */
    this.getFormCaption = function () {
        return D3Api.getProperty(this.DOM, 'caption', '');
    }

    /**
     * получить иконку формы
     * @returns {*}
     */
    this.getFormIcon = function () {
        return D3Api.getProperty(this.DOM, 'icon', '');
    }
    /**
     * Замыкание функции
     * @param func {Function} - функция
     * @returns {Function}
     */
    this.closure = function (func) {
        var clC = this.currentContext;
        var self = this;
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            if (self == null)return;
            var curC = self.currentContext;
            self.currentContext = clC;
            func.apply(this, Array.prototype.slice.call(arguments).concat(args));
            if (self == null)return;
            self.currentContext = curC;
        }
    }
    var deepContext = [];

    /**
     * Установить контекст
     * @param contextDom {Object} - дом объект для замыкания
     */
    this.closureContext = function (contextDom) {
        deepContext.push(this.currentContext);
        this.currentContext = contextDom;
    }

    /**
     * убрать контекст
     */
    this.unClosureContext = function () {
        this.currentContext = deepContext.pop();
    }

    /**
     * Переоткрыть
     * @param closeBefore {boolean}
     */
    this.reload = function (closeBefore) {
        var name = this.name;
        var data = this.formData;
        var dom = this.container.DOM;
        if (closeBefore) {
            this.close();
            D3Api.showForm(name, dom, data);
        } else {
            D3Api.showForm(name, dom, data);
            this.close();
        }
    }

    /**
     * Показать пользовательский отчет
     * @param code
     * @param primary
     * @param unit
     * @param vars
     * @param request
     */
    this.showUserReport = function(code,primary,unit,vars,request)
    {
        var vars = vars || {};
        if(primary && controlExist(primary))
        {
            vars.PRIMARY = getValue(primary);
            if(controlExist(primary+'_SelectList'))
                vars.PRIMARY_SelectList = getValue(primary+'_SelectList');
        }else if(primary)
            vars.PRIMARY = primary;
        if(unit)
            vars.UNIT = unit;
        vars.vars = this.vars;

        request = request || {};
        request.report = code;

        openForm('UniversalReportParamForm/UniversalReportParamForm', {request:request, vars:vars});
    }

    /**
     * Показать меню формы
     * @param event
     */
    function showFormMenu(event) {
        var menu = D3Api.getProperty(MainForm.DOM, 'menu', false);
        if (!menu)
            return;

        var menu = MainForm.getControl(menu);
        if (menu) {
            var cap = MainForm.container.DOM.D3FormCaption;
            var coords = {left: cap.offsetLeft, top: cap.offsetTop + cap.offsetHeight};
            D3Api.PopupMenuCtrl.show(menu, coords);
        }
    }

    /**
     * скрыть значение формы.
     */
    this.hideFormCaption = function () {
        if (!this.container.DOM.D3FormCaption)
            return;
        this.container.DOM.D3FormCaption.onclick = null;
        this.container.DOM.D3FormCaption._hide();
    }
    var dataRequests = [];

    /**
     * Начать устанавливать вызовы в стэк
     */
    this.beginRequest = function () {
        dataRequests[dataRequests.length] = {};
    }

    /**
     * Прекратить установку вызовов стэка и вызвать запрос.
     * @param immediately
     * @param sync
     * @param onsuccess
     * @param onerror
     */
    this.endRequest = function (immediately, sync, onsuccess, onerror) {
        var num = dataRequests.length -1;
        if(!immediately && dataRequests.length > 1){
            //добавляем вызов к предыдущему вызову
            var requests = dataRequests.splice(num, 1);//вытаскиваю стэк из общего вызова
            if(requests && requests.length > 0){
                requests = requests[0];
            }
            if(requests instanceof Object){
                dataRequests[dataRequests.length - 1] = Object.assign(dataRequests[dataRequests.length - 1],requests);
            }else{
                D3Api.debug_msg("Ошибка типа в переменной requests");
                return;
            }
            if (onsuccess instanceof Function){
                onsuccess.call(this);
            }
            return;
        }
        if(dataRequests.length  == 0){
            return;
        }
        var async = !sync;
        var requests = dataRequests.splice(num, 1);//вытаскиваю стэк из общего вызова
        if(requests && requests.length > 0){
            requests = requests[0];
        }
        if(requests instanceof Object){
            if(Object.keys(requests).length == 0){
                if (onsuccess instanceof Function){
                    onsuccess.call(this);
                }
                return;
            }
        }else{
            D3Api.debug_msg("Ошибка типа в переменной requests");
            return;
        }
        //Собираем все события
        onsuccess = {
            _: onsuccess
        };
        onerror = {
            _: onerror
        };
        for (var n in requests) {
            if(!requests.hasOwnProperty(n)){
                continue;
            }
            if (requests[n]._.onsuccess instanceof Function)
                onsuccess[n + '_' + requests[n].type] = requests[n]._.onsuccess;
            if (requests[n]._.onerror instanceof Function)
                onerror[n + '_' + requests[n].type] = requests[n]._.onerror;
            requests[n]._ = null;
            delete requests[n]._;
        }
        var res = [];
        var error = null;
        var errObj = null;
        var that = this;

        var promise = new Promise(function(resolve,reject){
            var infoThread = D3Api.MULTI_REQUEST;//информация об отправляемых запросах(потоках)
            if(!infoThread){
                infoThread = {"MAX_THREAD":"","MAX_REQUEST":""};
            }
            var currThread = 0;
            var nResult = 0;
            requests = D3Api.DataChunk(requests,+infoThread['MAX_REQUEST']);
            var cnt = requests.length;
            if(!infoThread['MAX_THREAD']){
                infoThread['MAX_THREAD'] = cnt;
            }
            function requestServerThread() {
                if(!error){
                    if(currThread >= +infoThread['MAX_THREAD']){
                        return;
                    }
                    var remove;
                    if(requests){
                        remove = requests.splice(0, 1);
                    }
                    if(remove && remove.length > 0){
                        ++currThread;
                        if(Array.isArray(remove)){
                            remove = remove[0];
                        }
                        var headers = {};
                        if('formCache' in that && this.formCache){
                            that.formData.request['FormCache'] = that.formCache;
                        }
                        D3Api.requestThreadServer({
                            url: 'request.php',
                            async: async,
                            method: 'POST',
                            urlData: that.formData.request,
                            data: {request: D3Api.JSONstringify(remove)},
                            onSuccess: function(r){
                                --currThread;
                                ++nResult;
                                res.push(r);
                                requestServerThread();
                            },
                            onError: function(r, rObj){
                                error = r;
                                errObj = rObj;
                                --currThread;
                                ++nResult;
                                requestServerThread();
                            },
                            contextObj: that,
                            headers: headers
                        });
                        requestServerThread();
                    }else{
                        if(nResult >= cnt){
                            resolve(res);
                        }
                    }
                }else{
                    reject({
                        'error': error,
                        'errObj':errObj
                    });
                }
            }
            requestServerThread();
        });
        promise.then(function(_result){
                that.closure(function () {
                    var _arr = [];
                    for(var i = 0, len = _result.length ; i < len ; i++){
                        _arr[i] = JSON.parse(_result[i]);
                    }
                    _result = D3Api.mixin.apply(that,_arr);
                    _result = JSON.stringify(_result);
                    that.acceptRequest(_result, onsuccess, onerror);
                })();
            },
            function(_obj){
                that.closure(function(){
                    that.errorRequest(_obj['error'], _obj['errObj'], onerror);
                })();
            }
        );
    }

    /**
     * ОТправить запрос
     * @param name
     * @param data
     * @param sync
     * @param onsuccess
     * @param onerror
     * @param repeatersRefresh
     */
    this.sendRequest = function (name, data, sync, onsuccess, onerror, repeatersRefresh) {
        var async = !sync;
        if (async && dataRequests.length > 0) {
            dataRequests[dataRequests.length - 1][name] = data || {};
            dataRequests[dataRequests.length - 1][name]._ = {
                onsuccess: onsuccess,
                onerror: onerror
            };
        } else {
            var reqObj = {};
            reqObj[name] = data;
            var headers = {};
            if('formCache' in this && this.formCache){
                this.formData.request['FormCache'] = this.formCache;
            }

            D3Api.requestThreadServer({
                url: 'request.php',
                async: async,
                method: 'POST',
                urlData: this.formData.request,
                data: {request: D3Api.JSONstringify(reqObj)},
                onSuccess: this.closure(function (r) {
                    this.acceptRequest(r, onsuccess, onerror, repeatersRefresh);
                }),
                onError: this.closure(function (r, rObj) {
                    this.errorRequest(r, rObj, onerror);
                }),
                contextObj: this,
                headers: headers
            });
        }
    }

    /**
     * колбэк после вызова запроса
     * @param res
     * @param onsuccess
     * @param onerror
     * @param repeatersRefresh
     */
    this.acceptRequest = function (res, onsuccess, onerror, repeatersRefresh) {
        //Долго данные шли, форму уже прикрыли
        if (MainForm == null)
            return;
        var onerrorFunc = null;
        var onsuccessFunc = null;
        try {
            var resObj = JSON.parse(res);
        } catch (e) {
            onerrorFunc = (onerror) ? (onerror._ || onerror) : null;
            if (onerrorFunc instanceof Function)
                onerrorFunc.call(this, res, e);
            D3Api.debug_msg('В ответе сервера: ' + e.message);
            return;
        }
        for (var name in resObj) {
            if(!resObj.hasOwnProperty(name)){
                continue;
            }
            switch (resObj[name].type) {
                case 'DataSet':
                    var ds = dataSets[name];
                    if (!ds) {
                        resObj[name].breakStep = true;
                        break;
                    }
                    if (!ds.allResponse && ds.requestUid != resObj[name].uid && ds.sendRequest == true) {
                        resObj[name].breakStep = true;
                        break;
                    }

                    ds.dataHash = resObj[name].hash;
                    break;
                case 'Action':
                    var act = actions[name];
                    if (!act) {
                        resObj[name].breakStep = true;
                        break;
                    }
                    break;
                case 'Module':
                    var mod = modules[name];
                    if(!mod){
                        resObj[name].breakStep = true;
                        break;
                    }
            }
        }
        var isError = [];
        for (var name in resObj) {
            if(!resObj.hasOwnProperty(name)){
                continue;
            }
            if (resObj[name].breakStep || D3Api.isUndefined(resObj[name].type))
                continue;
            switch (resObj[name].type) {
                case 'DataSet':
                    if (!D3Api.empty(resObj[name].error)) {
                        var shnot = true;
                        onerrorFunc = (onerror) ? (onerror[name + '_' + resObj[name].type] || onerror) : null;
                        if (onerrorFunc instanceof Function)
                            shnot = onerrorFunc.call(this, res, resObj[name].error);
                        if (shnot !== false)
                        {
                            isError.push(name);
                            D3Api.alert_msg(resObj[name].error);
                        }
                        D3Api.debug_msg(resObj[name].error);
                        break;
                    }

                    var ds = dataSets[name];
                    ds.setResponse(resObj[name], repeatersRefresh);
                    onsuccessFunc = (onsuccess) ? (onsuccess[name + '_' + resObj[name].type] || onsuccess) : null;
                    if (onsuccessFunc instanceof Function)
                        onsuccessFunc.call(this, res, resObj);
                    break;
                case 'Action':
                    var errorCall = false;
                    if (!D3Api.empty(resObj[name].error)) {
                        errorCall = true;
                        var shnot = true;
                        onerrorFunc = (onerror) ? (onerror[name + '_' + resObj[name].type] || onerror) : null;
                        if (onerrorFunc instanceof Function)
                            shnot = onerrorFunc.call(this, res, resObj[name].error);
                        if (shnot !== false)
                        {
                            isError.push(name);
                            console.log(resObj[name].error);
                            // D3Api.alert_msg(resObj[name].error);
                        }
                        D3Api.debug_msg(resObj[name].error);
                        break;
                    }
                    var pCh = function (postObj, childs, errorOnly) {
                        for (var c in childs) {
                            if(!childs.hasOwnProperty(c)){
                                continue;
                            }
                            for (var i = 0, ic = childs[c].length; i < ic; i++) {
                                if (childs[c][i].error !== undefined && (!errorCall || errorOnly)) {
                                    errorCall = true;
                                    var shnot = true;
                                    onerrorFunc = (onerror) ? (onerror[name + '_' + resObj[name].type] || onerror) : null;
                                    if (onerrorFunc instanceof Function)
                                        shnot = onerrorFunc.call(this, res, resObj[name].error);
                                    if (shnot !== false)
                                    {
                                        isError.push(name);
                                        D3Api.alert_msg(childs[c][i].error);
                                    }
                                    D3Api.debug_msg(childs[c][i].error);
                                    return false;
                                } else if (!errorOnly) {
                                    postObj.childs[c].setParams(childs[c][i].data);
                                    if (!pCh(postObj.childs[c], childs[c][i]._childs_))
                                        return false;
                                }
                            }
                        }
                        return true;
                    }
                    if (!pCh(sysinfo[name], resObj[name]._childs_, true))
                        break;
                    var act = actions[name];
                    act.setData(resObj[name].data);
                    if (!pCh(sysinfo[name], resObj[name]._childs_))
                        break;
                    onsuccessFunc = (onsuccess) ? (onsuccess[name + '_' + resObj[name].type] || onsuccess) : null;
                    if (onsuccessFunc instanceof Function)
                        onsuccessFunc.call(this, res, resObj);
                    break;
                case 'Module':
                    var errorCall = false;
                    if (!D3Api.empty(resObj[name].error)) {
                        var shnot = true;
                        errorCall = true;
                        onerrorFunc = (onerror) ? (onerror[name + '_' + resObj[name].type] || onerror) : null;
                        if (onerrorFunc instanceof Function)
                            shnot = onerrorFunc.call(this, res, resObj[name].error);
                        if (shnot !== false)
                        {
                            isError.push(name);
                            D3Api.alert_msg(resObj[name].error);
                        }
                        D3Api.debug_msg(resObj[name].error);
                        break;
                    }
                    var act = modules[name];
                    act.setData(resObj[name].data);
                    onsuccessFunc = (onsuccess) ? (onsuccess[name + '_' + resObj[name].type] || onsuccess) : null;
                    if (onsuccessFunc instanceof Function)
                        onsuccessFunc.call(this, res, resObj);
                    break;
                    break;
                default:
                    if (!D3Api.empty(resObj[name].error)) {
                        var shnot = true;
                        onerrorFunc = (onerror) ? (onerror[name + '_' + resObj[name].type] || onerror) : null;
                        if (onerrorFunc instanceof Function)
                            shnot = onerrorFunc.call(this, res, resObj[name].error);
                        if (shnot !== false)
                        {
                            isError.push(name);
                            D3Api.alert_msg(resObj[name].error);
                        }
                        D3Api.debug_msg(resObj[name].error);
                        break;
                    }
                    onsuccessFunc = (onsuccess) ? (onsuccess[name + '_' + resObj[name].type] || onsuccess) : null;
                    if (onsuccessFunc instanceof Function)
                        onsuccessFunc.call(this, res, resObj);
                    break;
            }
        }
        onerrorFunc = (onerror) ? (onerror._) : null;
        if(isError.length > 0 && onerrorFunc instanceof Function)
        {
            onerrorFunc.call(this, res, resObj, isError);
            return;
        }
        onsuccessFunc = (onsuccess) ? (onsuccess._) : null;
        if (isError.length == 0 && onsuccessFunc instanceof Function)
            onsuccessFunc.call(this, res, resObj);
    }
    /**
     * коллбэк после после неудачного вызова
     * @param res
     * @param resObj
     * @param onerror
     */
    this.errorRequest = function (res, resObj, onerror) {
        if (onerror instanceof Function)
            onerror.call(this, res, resObj);
        else if(onerror)
        {
            for (var n in onerror) {
                if(!onerror.hasOwnProperty(n)){
                    continue;
                }
                if (n != '_' && onerror[n] instanceof Function)
                    onerror[n].call(this, res, resObj);
            }
            if(onerror._ instanceof Function)
            {
                onerror._.call(this, res, resObj);
            }
        }
    }

    /**
     * JSONRPC вызов
     * @param httpmethod
     * @param unit
     * @param method
     * @param data
     * @param onsuccess
     * @param onerror
     */
    this.rpcCall = function(httpmethod, unit, method, data, onsuccess, onerror) {
        var search = decodeURIComponent(window.location.search);
        var arrSearch = search.split(/[?&]/);
        var urlData = {};

        if (!data || typeof data !== 'object') {
            data = {};
        }

        for (var i = 0; i < arrSearch.length; i++) {
            var arrItem = arrSearch[i].split('=');

            if (!arrItem[0] || httpmethod === 'GET' && arrItem[0] in data) {
                continue;
            }
            urlData[arrItem[0]] = arrItem[1] || '';
        }

        D3Api.requestServer({
            url: 'rpc/' + unit + '/' + method,
            async: true,
            method: httpmethod,
            content_type: 'application/text+json',
            urlData: urlData,
            data: (httpmethod === 'POST') ? D3Api.JSONstringify(data) : data,
            onSuccess: this.closure(function (response) {
                try {
                    response = D3Api.JSONparse(response);
                    if (response.status === 'error') {
                        throw new Error(response.message);
                    }
                    if (typeof onsuccess === 'function') {
                        onsuccess.call(this, response.response);
                    }
                } catch(e) {
                    if (typeof onerror === 'function') {
                        onerror.call(this, e.message);
                    } else {
                        D3Api.alert_msg('ОШИБКА: ' + e.message);
                    }
                }
            }),
            onError: this.closure(function (response, reqObj) {
                if (typeof onerror === 'function') {
                    onerror.call(this, 'Сервер временно недоступен!');
                } else {
                    D3Api.alert_msg('ОШИБКА: Сервер временно недоступен!');
                }
            }),
            contextObj: this
        });
    };

    /**
     *
     * @param unit
     * @param method
     * @param data
     * @param onsuccess
     * @param onerror
     */
    this.rpcGet = function (unit, method, data, onsuccess, onerror) {
        this.rpcCall('GET', unit, method, data, onsuccess, onerror);
    };

    /**
     *
     * @param unit
     * @param method
     * @param data
     * @param onsuccess
     * @param onerror
     */
    this.rpcPost = function (unit, method, data, onsuccess, onerror) {
        this.rpcCall('POST', unit, method, data, onsuccess, onerror);
    };
    /**
     * Экспорт данных из DataSet
     * @param param
     * @param onsuccess
     * @param onerror
     */
    this.exportDataSetToExcel = function(param, onsuccess, onerror){
        var obj = {
            name: param['name'],
            repeatersRefresh: false
        }
        this.refreshDataSet(obj, function(res, obj){
            if((param['name'] in obj) && ('data' in obj[param['name']])){
                var _param = {
                    data: obj[param['name']].data,
                    Columns: param['Columns']
                }
                D3Api.exportDataToExcel({
                    data: obj[param['name']].data,
                    body: param['body'],
                    header: param['header'],
                    groups: param['groups'],
                    filename: param['filename'],
                    show_number: param['show_number'],
                    title: param['title'],
                    footer: param['footer']
                },onsuccess, onerror);
            }
        }, onerror);
    }
    /**
     * Экспорт данных
     * @param param
     * @param onsuccess
     * @param onerror
     */

    /**
     * Вызвать компонент DataSet
     * @param name
     * @param onsuccess
     * @param onerror
     * @param sync
     * @param force
     * @param details
     */
    this.refreshDataSet = function (name, onsuccess, onerror, sync, force, details) {
        var dsName = null
        var repeatersRefresh = true;
        if(typeof name == 'object'){
            dsName = name['name'];
            if('repeatersRefresh' in name){
                repeatersRefresh = name['repeatersRefresh'];
            }
        }else{
            dsName = name;
        }

        var ds = dataSets[dsName];
        if (!ds) {
            D3Api.debug_msg('DataSet с именем "' + dsName + '" не найден на форме "' + this.name + '"');
            return;
        }
        ds.refresh(onsuccess, onerror, sync, force, details, repeatersRefresh);
    }

    /**
     * Вызвать компонент DataSet по его типу
     * @param name
     * @param mode
     * @param data
     * @param onsuccess
     * @param onerror
     * @param sync
     */
    this.refreshDataSetByMode = function (name, mode, data, onsuccess, onerror, sync) {
        var ds = dataSets[name];
        if (!ds) {
            D3Api.debug_msg('DataSet с именем "' + name + '" не найден на форме "' + this.name + '"');
            return;
        }
        ds.refreshByMode(mode, data, onsuccess, onerror, sync);
    }
    /**
     * получить D3DataSet
     * @param name {string} - Имя DataSet
     * @returns {D3Api.D3DataSet}
     */
    this.getDataSet = function (name) {
        return dataSets[name];
    }

    /**
     * Получить клон
     * @param dom
     * @param repeaterName
     * @returns {null|{clone}|*}
     */
    this.getRepeater = function (name) {
        return repeaters[name];
    }

    /**
     * Вызвать компонент Module
     * @param name
     * @param onsuccess
     * @param onerror
     * @param sync
     * @param force
     */
    this.getClone = function (dom, repeaterName) {
        while (dom && dom.nodeName.toUpperCase() != 'HTML') {
            if (dom.clone && (!repeaterName || D3Api.getProperty(dom, 'repeatername') == repeaterName))
                return dom;
            dom = dom.parentNode;
        }
        return null;
    }

    /**
     * Вызвать компонент Module
     * @param name
     * @param onsuccess
     * @param onerror
     * @param sync
     * @param force
     */
    this.executeModule = function(name,onsuccess,onerror,sync,force){
        var mod = modules[name];
        if(!mod){
            D3Api.debug_msg('Module с именем "' + name + '" не найден на форме "' + this.name + '"');
            return;
        }
        mod.execute(onsuccess,onerror,sync,force)
    }

    /**
     * Вызвать компонент Action
     * @param name
     * @param onsuccess
     * @param onerror
     * @param sync
     * @param force
     */
    this.executeAction = function (name, onsuccess, onerror, sync, force) {
        var act = actions[name];
        if (!act) {
            D3Api.debug_msg('Action с именем "' + name + '" не найден на форме "' + this.name + '"');
            return;
        }
        act.execute(onsuccess, onerror, sync, force);
    }

    /**
     * Получить объект Экшен
     * @param name
     * @returns {D3Api.D3Action}
     */
    this.getAction = function (name) {
        return actions[name];
    }

    /**
     * Открыть форму
     * @param name
     * @param data
     * @param container
     * @returns {undefined}
     */
    this.openForm = function (name, data, container) {
        container = container || this.container.DOM;
        var open_modal_cont = D3Api.getDomBy(D3Api.D3MainContainer, 'div[id="open_modal"]');
        /*если окно открывается в модальном режиме*/
        if((data && String(data.modal_form)=='true')){
            /*и контейнера для модалки нет, то создаем его*/
            if(!open_modal_cont){
                var open_modal       = document.createElement("div"),
                    close_open_modal = document.createElement("div");
                open_modal.id               = 'open_modal';
                open_modal.style.cssText    = 'position: fixed; width: 100%; height: 100%; top: 0px; left: 0px; display: none;background: #f9f9f9aa;z-index: 3;';
                close_open_modal.className  = 'close_open_modal fa-times fas';
                open_modal.appendChild(close_open_modal);
                open_modal_cont = D3Api.MainDom.appendChild(open_modal);
                close_open_modal.onclick = function() {
                    D3Api.close_modal_form();
                };
                D3Api.showDomBlock(open_modal_cont);
            }else if(!D3Api.showedDom(open_modal_cont)){
                /*если есть контейнер для модалки, то просто показываем его*/
                D3Api.showDomBlock(open_modal_cont);
            }
            container = open_modal_cont;
        }

        return D3Api.showForm(name, container, data, _GCF());
    }

    /**
     * Получить контекст формы
     * @returns {D3Api.D3Form}
     * @private
     */
    function _GCF() {
        return D3Api.GLOBAL_CONTEXT_FORM || MainForm;
    }

    /* Глобальные функции для использования внутри пространства скрипта формы */
    function getVar(name) {
        return _GCF().getVar(name);
    }

    function setVar(name, value) {
        return _GCF().setVar(name, value);
    }

    function getControlProperty(controlName, nameProperty) {
        return _GCF().getControlProperty(controlName, nameProperty);
    }

    function setControlProperty(controlName, nameProperty, value) {
        return _GCF().setControlProperty(controlName, nameProperty, value);
    }

    function addControlEvent(control, eventName, listener) {
        return _GCF().addControlEvent(control, eventName, listener)
    }

    function callControlEvent(control, eventName) {
        return _GCF().callControlEvent.apply(_GCF(), arguments);
    }

    function removeControlEvent(control, eventName, uniqid) {
        return _GCF().removeControlEvent(control, eventName, uniqid);
    }

    function removeControlEvents(control, eventName) {
        return _GCF().removeControlEvents(control, eventName);
    }

    function getValue(control) {
        return _GCF().getValue(control);
    }

    function setValue(control, value) {
        return _GCF().setValue(control, value);
    }

    function getCaption(control) {
        return _GCF().getCaption(control);
    }

    function setCaption(control, value) {
        return _GCF().setCaption(control, value);
    }

    function getEnabled(control) {
        return _GCF().getEnabled(control);
    }

    function setEnabled(control, value) {
        return _GCF().setEnabled(control, value);
    }

    function getVisible(control) {
        return _GCF().getVisible(control);
    }

    function setVisible() {
        var ctx = _GCF();

        return ctx.setVisible.apply(ctx, arguments);
    }

    function getControl(name) {
        return _GCF().getControl(name);
    }

    function controlExist(name) {
        return _GCF().controlExist(name);
    }

    function getDataSet(name) {
        return _GCF().getDataSet(name);
    }

    function getRepeater(name) {
        return _GCF().getRepeater(name);
    }

    function getClone(dom, repeaterName) {
        return _GCF().getClone(dom, repeaterName);
    }

    function getAction(name) {
        return _GCF().getAction(name);
    }

    function beginRequest() {
        return _GCF().beginRequest();
    }

    function endRequest(immediately, sync, onsuccess, onerror) {
        return _GCF().endRequest(immediately, sync, onsuccess, onerror);
    }

    function refreshDataSet(name, onsuccess, onerror, sync, force, details) {
        return _GCF().refreshDataSet(name, onsuccess, onerror, sync, force, details);
    }
    function exportDataSetToExcel(param, onsuccess, onerror){
        return _GCF().exportDataSetToExcel(param, onsuccess, onerror);
    }
    function exportDataToExcel(param, onsuccess, onerror){
        return _GCF().exportDataToExcel(param, onsuccess, onerror);
    }

    function refreshDataSetByMode(name, mode, data, onsuccess, onerror, sync) {
        return _GCF().refreshDataSetByMode(name, mode, data, onsuccess, onerror, sync);
    }

    function executeModule(name,onsuccess,onerror,sync,force){
        return _GCF().executeModule(name,onsuccess,onerror,sync,force)
    }
    function executeAction(name, onsuccess, onerror, sync, force) {
        return _GCF().executeAction(name, onsuccess, onerror, sync, force);
    }

    function rpcPost(unit,method,data,onsuccess,onerror) {
        return _GCF().rpcPost(unit,method,data,onsuccess,onerror);
    }

    function rpcGet(unit,method,data,onsuccess,onerror) {
        return _GCF().rpcGet(unit,method,data,onsuccess,onerror);
    }

    function openForm(name, data, container) {
        return _GCF().openForm(name, data, container);
    }

    function close() {
        return _GCF().close.apply(_GCF(), arguments);
    }

    function reload(closeBefore) {
        return _GCF().reload(closeBefore);
    }

    function closure(func) {
        return _GCF().closure.apply(_GCF(), arguments);
    }

    function closureContext(contextDom) {
        return _GCF().closureContext(contextDom);
    }

    function unClosureContext() {
        return _GCF().unClosureContext();
    }

    function empty(v) {
        return D3Api.empty(v);
    }

    function setFormCaption(caption) {
        return _GCF().setFormCaption(caption);
    }

    function setFormHint(hint) {
        return _GCF().setFormHint(hint);
    }

    function getFormCaption() {
        return _GCF().getFormCaption();
    }

    function callControlMethod(control, method) {
        return _GCF().callControlMethod.apply(_GCF(), arguments);
    }

    function controlAPI(control) {
        return _GCF().controlAPI(control);
    }

    function cancelActivateDataSet(ds) {
        var dts = ds.split(';');
        var ind = -1;
        for (var i = 0, c = dts.length; i < c; i++) {
            ind = activateDataSets.indexOf(dts[i]);
            if (ind >= 0)
                activateDataSets.splice(ind, 1);
        }
    }

    function notify(text, title, modal) {
        title = title || 'Сообщение';
        modal = (modal === undefined) ? false : modal;

        D3Api.notify(title, text, {modal: modal});
    }
    function showUserReport(code,primary,unit,vars,request)
    {
        return _GCF().showUserReport(code,primary,unit,vars,request);
    }
    /**********************************************************************/
    /**
     *
     * @param data
     * @param dom
     */
    this.showAfterCheck = function (data, dom) {
        if (data.newthread) {
            D3Api.threads[data.newthread].addForm(this);
            data.newthread = undefined;
            delete data.newthread;
        } else if (!data.notthread && dom == D3Api.MainDom && D3Api.MainDom.D3Container && D3Api.MainDom.D3Container.currentForm && D3Api.MainDom.D3Container.currentForm.D3Thread) {
            //Проверим если открывается в основном контейнере и если это нить, то добавляем форму в стек нити
            D3Api.MainDom.D3Container.currentForm.D3Thread.addForm(this);
        } else {
            //Надо сделать ссылку на нить, для замыкания событий
            var cCD = dom;
            while (cCD && cCD != D3Api.MainDom) {
                if (cCD.D3Container && cCD.D3Container.currentForm && cCD.D3Container.currentForm.D3Thread) {
                    this.D3Thread = cCD.D3Container.currentForm.D3Thread;
                    break;
                }
                if (cCD.D3Form && cCD.D3Form.D3Thread) {
                    this.D3Thread = cCD.D3Form.D3Thread;
                    break;
                }
                cCD = cCD.parentNode;
            }
        }
        if (data.oncreate) {
            if (data.oncreate instanceof Function) {
                var dataOnCreate = data.oncreate;
                this.addEvent('oncreate', function () {
                    var GCF = D3Api.GLOBAL_CONTEXT_FORM;
                    D3Api.GLOBAL_CONTEXT_FORM = MainForm;
                    try {
                        var res = dataOnCreate.apply(this, arguments);
                    } catch (e) {
                        D3Api.debug_msg(e);
                    }
                    D3Api.GLOBAL_CONTEXT_FORM = GCF;
                    return res;
                });
            }
            else if (data.oncreate instanceof Array) {
                for (var i = 0, ic = data.oncreate.length; i < ic; i++) {
                    if (data.oncreate[i] instanceof Function)
                        this.addEvent('oncreate', function (dataOnCreate) {
                            return function () {
                                var GCF = D3Api.GLOBAL_CONTEXT_FORM;
                                D3Api.GLOBAL_CONTEXT_FORM = MainForm;
                                try {
                                    var res = dataOnCreate.apply(this, arguments);
                                } catch (e) {
                                    D3Api.debug_msg(e);
                                }
                                D3Api.GLOBAL_CONTEXT_FORM = GCF;
                                return res;
                            }
                        }(data.oncreate[i]));
                }
            }
            delete data['oncreate'];
        }
        if (data.onprepare) {
            if (data.onprepare instanceof Function) {
                var dataOnPrepare = data.onprepare;
                this.addEvent('onprepare', function () {
                    var GCF = D3Api.GLOBAL_CONTEXT_FORM;
                    D3Api.GLOBAL_CONTEXT_FORM = MainForm;
                    try {
                        var res = dataOnPrepare.apply(this, arguments);
                    } catch (e) {
                        D3Api.debug_msg(e);
                    }
                    D3Api.GLOBAL_CONTEXT_FORM = GCF;
                    return res;
                });
            }
            else if (data.onprepare instanceof Array) {
                for (var i = 0, ic = data.onprepare.length; i < ic; i++) {
                    if (data.onprepare[i] instanceof Function)
                        this.addEvent('onprepare', function (dataOnPrepare) {
                            return function () {
                                var GCF = D3Api.GLOBAL_CONTEXT_FORM;
                                D3Api.GLOBAL_CONTEXT_FORM = MainForm;
                                try {
                                    var res = dataOnPrepare.apply(this, arguments);
                                } catch (e) {
                                    D3Api.debug_msg(e);
                                }
                                D3Api.GLOBAL_CONTEXT_FORM = GCF;
                                return res;
                            }
                        }(data.onprepare[i]));
                }
            }
            delete data['onprepare'];
        }
        if (data.onshow) {
            if (data.onshow instanceof Function) {
                var dataOnShow = data.onshow;
                this.addEvent('onshow', function () {
                    var GCF = D3Api.GLOBAL_CONTEXT_FORM;
                    D3Api.GLOBAL_CONTEXT_FORM = MainForm;
                    try {
                        var res = dataOnShow.apply(this, arguments);
                    } catch (e) {
                        D3Api.debug_msg(e);
                    }
                    D3Api.GLOBAL_CONTEXT_FORM = GCF;
                    return res;
                });
            }
            else if (data.onshow instanceof Array) {
                for (var i = 0, ic = data.onshow.length; i < ic; i++) {
                    if (data.onshow[i] instanceof Function)
                        this.addEvent('onshow', function (dataOnShow) {
                            return function () {
                                var GCF = D3Api.GLOBAL_CONTEXT_FORM;
                                D3Api.GLOBAL_CONTEXT_FORM = MainForm;
                                try {
                                    var res = dataOnShow.apply(this, arguments);
                                } catch (e) {
                                    D3Api.debug_msg(e);
                                }
                                D3Api.GLOBAL_CONTEXT_FORM = GCF;
                                return res;
                            }
                        }(data.onshow[i]));
                }
            }
            delete data['onshow'];
        }
        if (data.onclose) {
            if (data.onclose instanceof Function) {
                var dataOnClose = data.onclose;
                var dataCC = data._currentContext_;
                var dataCF = data._contextForm_;
                this.addEvent('onclose', function () {
                    var GCF = D3Api.GLOBAL_CONTEXT_FORM;
                    D3Api.GLOBAL_CONTEXT_FORM = dataCF;
                    closureContext(dataCC);
                    try {
                        var res = dataOnClose.apply(this, arguments);
                    } catch (e) {
                        D3Api.debug_msg(e);
                    }
                    unClosureContext();
                    D3Api.GLOBAL_CONTEXT_FORM = GCF;
                    return res;
                });
            }
            else if (data.onclose instanceof Array) {
                for (var i = 0, ic = data.onclose.length; i < ic; i++) {
                    if (data.onclose[i] instanceof Function)
                        this.addEvent('onclose', data.onclose[i]);
                }
            }
            delete data['onclose'];
        }
        if (data.onformactivate) {
            if (data.onformactivate instanceof Function) {
                var dataOnFormActivate = data.onformactivate;
                this.addEvent('onformactivate', function () {
                    var GCF = D3Api.GLOBAL_CONTEXT_FORM;
                    D3Api.GLOBAL_CONTEXT_FORM = MainForm;
                    try {
                        var res = dataOnFormActivate.apply(this, arguments);
                    } catch (e) {
                        D3Api.debug_msg(e);
                    }
                    D3Api.GLOBAL_CONTEXT_FORM = GCF;
                    return res;
                });
            }
            else if (data.onformactivate instanceof Array) {
                for (var i = 0, ic = data.onformactivate.length; i < ic; i++) {
                    if (data.onformactivate[i] instanceof Function)
                        this.addEvent('onformactivate', function (dataOnFormActivate) {
                            return function () {
                                var GCF = D3Api.GLOBAL_CONTEXT_FORM;
                                D3Api.GLOBAL_CONTEXT_FORM = MainForm;
                                try {
                                    var res = dataOnFormActivate.apply(this, arguments);
                                } catch (e) {
                                    D3Api.debug_msg(e);
                                }
                                D3Api.GLOBAL_CONTEXT_FORM = GCF;
                                return res;
                            }
                        }(data.onformactivate[i]));
                }
            }
            delete data['onformactivate'];
        }
        if (data.vars) {
            for (var v in data.vars) {
                if(!data.vars.hasOwnProperty(v)){
                    continue;
                }
                this.vars[v] = data.vars[v];
            }
        }
        if (data.icon) {
            D3Api.setProperty(this.DOM, 'icon', data.icon);
        }
        if (data.caption) {
            D3Api.setProperty(this.DOM, 'caption', data.caption);
        }
        if (data.modal) {
            _modalBorders_.top = document.createElement('DIV');
            _modalBorders_.right = document.createElement('DIV');
            _modalBorders_.bottom = document.createElement('DIV');
            _modalBorders_.left = document.createElement('DIV');

            D3Api.addClass(_modalBorders_.top, 'formModalBorder');
            D3Api.addClass(_modalBorders_.right, 'formModalBorder');
            D3Api.addClass(_modalBorders_.bottom, 'formModalBorder');
            D3Api.addClass(_modalBorders_.left, 'formModalBorder');

            D3Api.addDom(document.body, _modalBorders_.top);
            D3Api.addDom(document.body, _modalBorders_.right);
            D3Api.addDom(document.body, _modalBorders_.bottom);
            D3Api.addDom(document.body, _modalBorders_.left);
        }
        this.formData = data;

        this.formStyles = D3Api.getAllDomBy(this.DOM, 'style');

        //Нет форм
        if (!dom.D3Container) {
            dom.D3Container = new D3Api.D3Container(dom);
            dom.D3Container.lastForm = this;
        }
        if (dom.D3Container.currentForm) {
            if (dom.D3Container.currentForm.rightForm) {
                var rF = dom.D3Container.currentForm.rightForm;
                var tmp = null;
                while (rF && dom.D3Container.currentForm.D3Thread == rF.D3Thread) {
                    tmp = rF;
                    if (rF.rightForm)
                        rF = rF.rightForm;
                    else
                        rF = null;
                    if (!tmp.destroyed)
                        tmp.destructor();
                }
            }
            this.leftForm = dom.D3Container.currentForm;
            dom.D3Container.currentForm.rightForm = this;
            dom.D3Container.countForm++;
            dom.D3Container.lastActiveForm = dom.D3Container.currentForm;
            RemoveFormFromCont.call(dom.D3Container.currentForm, dom, dom.D3Container.currentForm.DOM);
        }
        this.container = dom.D3Container;
        this.addHistory();

        dom.D3Container.setCurrentForm(this);
        InsertFormToCont.call(this, dom);

        this.isShowed = true;

        this.loadParams(this.onCreateForm);
    };
    /**
     * Показать форму
     * @param data
     * @param dom
     */
    this.show = function (data, dom) {
        if (this.isShowed) {
            D3Api.debug_msg('Форма уже показана');
            return;
        }

        this.formCheckPrivs = D3Api.getProperty(this.DOM, 'check_privs') == 'true' ? true : false;
        this.formCheckCreated = D3Api.getProperty(this.DOM, 'check_created') == 'true' ? true : false;
        this.formSkipRefresh = D3Api.getProperty(this.DOM, 'skip_refresh') == 'true' ? true : false;

        this.formUnit = D3Api.getProperty(this.DOM, 'unit');
        this.formPrimary = D3Api.getProperty(this.DOM, 'primary', 'PRIMARY');
        var subunits = D3Api.getProperty(this.DOM, 'subunits'); // в формате unit:pid:id, где pid - имя поля с FK основного раздела, id - имя PRIMARY поля в дочернем разделе

        /* находим ID основного раздела по записи detail раздела */
        if (this.formUnit && subunits && data.request && data.request.unit && data.request.unit != this.formUnit){
            var subunit = null; // подраздел
            subunits = subunits.split(';');
            // ищем в атрибуте правило для соответствующего подраздела
            subunits.forEach(function (item) {
                if (item.split(':')[0] == data.request.unit) subunit = item;
            });

            var req = {
                getMainUnit: {type: 'Form', params: {
                    id: D3Api.getValueInObj(this.formPrimary, data.vars),
                    subunit: subunit
                }}
            };

            D3Api.requestServer({
                url: 'request.php',
                method: 'POST',
                urlData:{action: 'main_unit'},
                data: {request: D3Api.JSONstringify(req)},
                contextObj:this,
                onSuccess: function(r) {
                    var result = JSON.parse(r);
                    if (!data.vars) data.vars = {};
                    if (result.unit_PRIMARY) data.vars['UNIT_PRIMARY'] = result.unit_PRIMARY;
                    if (result.subunit_PRIMARY) data.vars[data.request.unit+'_PRIMARY'] = result.subunit_PRIMARY;

                    this.showAfterCheck(data, dom);
                }
            });
        }
        else{
            this.showAfterCheck(data, dom);
        }
    };

    /**
     * Эвенты при открытии формы
     */
    this.onCreateForm = function () {
        if (scriptsLoad > 0) {
            setTimeout(function () {
                MainForm.onCreateForm();
            }, 100);
            return;
        }

        this.callEvent('oninit');
        this.callEvent('onprepare', this);
        this.callEvent('oncreate', this);
        this.beginRequest();
        for (var i = 0, c = activateDataSets.length; i < c; i++) {
            this.refreshDataSet(activateDataSets[i],null,null,false,null,false);
        }
        //Загрузить параметры формы
        //executeAction();
        activateDataSets = null;
        this.endRequest(true, false, this.onShowForm, this.onShowForm);
        if(this.destroyed === true){
            /* форму закрыли */
            return;
        }
        //проверяем наличии блока вкладок, запускаем отрисовку только если он есть
        if(this.container.DOM.D3ThreadsTabs && D3Api.MainDom.D3Container && D3Api.MainDom.D3Container.currentForm == this){
            this.container.DOM.D3ThreadsTabs._refresh(this);
        }
    };

    /**
     * Эвенты при показе формы.
     */
    this.onShowForm = function () {
        /* дожидаемся завершения работы пользовательского onCreate (опционально) */
        if (this.formCheckCreated && !this.isCreated){
            setTimeout(function () {
                if (MainForm) MainForm.onShowForm();
            }, 100);
            return;
        }

        resizeForm(this.DOM);
        //поставить фокус на первый контрол
        var focussableElements = 'input:not([disabled])';
        var focussable = this.DOM.querySelectorAll(focussableElements);
        if(focussable && focussable.length > 0)
        {
            var inp = focussable[0];
            inp.focus();
        }

        var dom = this;
        /* D3Api.D3Form.onRefreshForm - кастомная для каждого проекта функция,
        * выполняющая обязательные действия для всех форм (например, проверку прав)
        * Объявляется в Extensions/[МОДУЛЬ]/System/js/common.js */
        if (!this.formSkipRefresh && D3Api.D3Form.onRefreshForm)
            D3Api.D3Form.onRefreshForm(dom, function(){
                dom.callEvent('onshow', dom);
            });
        else
            dom.callEvent('onshow', dom);
    };

    function InsertFormToCont(contDOM, FormDOM) {
        FormDOM = FormDOM || this.DOM;
        if (FormDOM.parentNode != contDOM) {
            if (contDOM.firstChild)
                D3Api.insertBeforeDom(contDOM.firstChild, FormDOM);
            else
                D3Api.addDom(contDOM, FormDOM);
        } else
            D3Api.showDomBlock(FormDOM);

        D3Api.MainDom.D3FormCloseCtrl && D3Api.setControlPropertyByDom(D3Api.MainDom.D3FormCloseCtrl, 'visible', true);
        D3Api.MainDom.D3FormHelp && D3Api.MainDom.D3FormHelp._show(this);
        if (_modalBorders_.top) {
            D3Api.setDomDisplayDefault(_modalBorders_.top);
            D3Api.setDomDisplayDefault(_modalBorders_.right);
            D3Api.setDomDisplayDefault(_modalBorders_.bottom);
            D3Api.setDomDisplayDefault(_modalBorders_.left);
        }

        this.isActive = true;

        for (var i = 0, c = this.formStyles.length; i < c; i++) {
            D3Api.addDom(FormDOM, this.formStyles[i]);
        }
        //if(this.isShowed)
        resizeForm(FormDOM);

        var chforms = D3Api.getAllDomBy(FormDOM, '[formname]');
        for (var i = 0, c = chforms.length; i < c; i++) {
            if (chforms[i].D3Form && chforms[i].D3Form.formUid != this.formUid && chforms[i].D3Form.isActive) {
                chforms[i].D3Form.parentFormShow();
            }
        }

        for (var i = 0, c = this.scrollDoms.length; i < c; i++) {
            if (this.scrollDoms[i].top > 0) {
                this.scrollDoms[i].dom.scrollTop = this.scrollDoms[i].top;
            }
            if (this.scrollDoms[i].left > 0) {
                this.scrollDoms[i].dom.scrollLeft = this.scrollDoms[i].left;
            }
        }
        this.scrollDoms = [];
        /*if (D3Api.getProperty(FormDOM, 'effects', false))
         {
         $(FormDOM).hide();
         setTimeout(function(){$(FormDOM).show('slide',{duration: 200, direction: 'left'});},200);
         }*/
        this.setFormCaption();

        this.callEvent('onform_dominsert', FormDOM);
    }
    function clearSelection()
    {
        if (window.getSelection) {
            var selection = window.getSelection();

            if (selection.rangeCount > 0 && selection.getRangeAt(0).getClientRects().length > 0) {
                selection.removeAllRanges();
            }
        } else { // старый IE
            document.selection.empty();
        }
    }

    function RemoveFormFromCont(contDOM, FormDOM) {
        clearSelection();
        this.saveParams(true);
        var chforms = D3Api.getAllDomBy(this.DOM, '[formname]');
        for (var i = 0, c = chforms.length; i < c; i++) {
            if (chforms[i].D3Form && chforms[i].D3Form.formUid != this.formUid && chforms[i].D3Form.isActive) {
                chforms[i].D3Form.saveParams(true);
                chforms[i].D3Form.parentFormHide();
            }
        }
        this.hideFormCaption();
        FormDOM = FormDOM || this.DOM;
        contDOM = contDOM || FormDOM.parentNode;

        var scR = D3Api.getAllDomBy(FormDOM, '[scrollable]');
        this.scrollDoms = [];
        for (var i = 0, c = scR.length; i < c; i++) {
            if (scR[i].scrollTop > 0 || scR[i].scrollLeft > 0) {
                this.scrollDoms.push({
                    dom: scR[i],
                    top: scR[i].scrollTop,
                    left: scR[i].scrollLeft
                });
            }
        }
        if (FormDOM.scrollTop > 0 || FormDOM.scrollLeft > 0) {
            this.scrollDoms.push({
                dom: FormDOM,
                top: FormDOM.scrollTop,
                left: FormDOM.scrollLeft
            });
        }
        /*if (D3Api.getProperty(FormDOM, 'effects', false))
         {
         $(FormDOM).hide('slide',{duration: 200, direction: 'right'},function(){contDOM.removeChild(FormDOM)});
         }else*/
        if (_modalBorders_.top) {
            D3Api.hideDom(_modalBorders_.top);
            D3Api.hideDom(_modalBorders_.right);
            D3Api.hideDom(_modalBorders_.bottom);
            D3Api.hideDom(_modalBorders_.left);
        }
        if (D3Api.BROWSER.msie && D3Api.BROWSER.versionMajor < 9) {
            D3Api.removeDom(FormDOM);
        } else
            D3Api.hideDom(FormDOM);
        this.isActive = false;
        for (var i = 0, c = this.formStyles.length; i < c; i++) {
            D3Api.removeDom(this.formStyles[i]);
        }
        //contDOM.removeChild(FormDOM);
        this.callEvent('onform_domremove', FormDOM);
    }

    /**
     * Показать родитеслькую форму
     */
    this.parentFormShow = function () {
        if (_modalBorders_.top) {
            D3Api.MainDom.D3FormCloseCtrl && D3Api.setControlPropertyByDom(D3Api.MainDom.D3FormCloseCtrl, 'visible', false);
            D3Api.MainDom.D3FormHelp && D3Api.setControlPropertyByDom(D3Api.MainDom.D3FormHelp, 'visible', false);
            D3Api.setDomDisplayDefault(_modalBorders_.top);
            D3Api.setDomDisplayDefault(_modalBorders_.right);
            D3Api.setDomDisplayDefault(_modalBorders_.bottom);
            D3Api.setDomDisplayDefault(_modalBorders_.left);
        }
        resizeForm(this.DOM);
    }
    /**
     * скрыть родитескую форму
     */
    this.parentFormHide = function () {
        if (_modalBorders_.top) {
            D3Api.hideDom(_modalBorders_.top);
            D3Api.hideDom(_modalBorders_.right);
            D3Api.hideDom(_modalBorders_.bottom);
            D3Api.hideDom(_modalBorders_.left);
        }
    }
    /**
     * Добавить в историю
     */
    this.addHistory = function () {
        var addHist = true;
        if (Form._pushHistory_ instanceof Function) {
            addHist = Form._pushHistory_(this.container);
        }
        if (addHist && this.formData.history !== false) {
            D3Api.globalClientData.set('history_state', D3Api.JSONstringify({form: this.name, data: this.formData}, true, /^_.+_$/));
            //window.history.pushState(D3Api.JSONstringify({form: this.name, data: this.formData},true),'');
        }
    }

    /**
     * Активировать форму
     */
    this.activate = function () {
        if (this.destroyed)
        {
            D3Api.debug_msg('Попытка активировать не существующую форму.');
            return;
        }
        if (this.container.currentForm == this)
            return;
        if (this.container.currentForm) {
            this.container.lastActiveForm = this.container.currentForm;
            RemoveFormFromCont.call(this.container.currentForm, this.container.DOM, this.container.currentForm.DOM);
        }
        this.container.setCurrentForm(this);
        this.addHistory();
        InsertFormToCont.call(this, this.container.DOM);
        this.callEvent('onformactivate', this);
        var chforms = D3Api.getAllDomBy(this.DOM, '[formname]');
        for (var i = 0, c = chforms.length; i < c; i++) {
            if (chforms[i].D3Form && chforms[i].D3Form.formUid != this.formUid && !chforms[i].D3Form.destroyed)
                chforms[i].D3Form.callEvent('onformactivate', chforms[i].D3Form);
        }
    }
    /**
     * удалить все из формы.
     * @param destroyOnly
     */
    this.destructor = function (destroyOnly) {
        if (this.isActive) {
            this.saveParams(true);
            //TODO: Закрыть все соединения с сервером
            //requests.abort();

            if (!destroyOnly) {
                if (this.container.currentForm == this) {
                    this.setFormCaption('');
                    this.container.setCurrentForm(null);
                    var lF = this.leftForm;
                    while (lF && lF.destroyed) {
                        lF = lF.leftForm;
                    }
                    if (lF) {
                        lF.activate();
                        lF.rightForm = null;
                    }
                } else if (this.container.lastForm == this) {
                    this.rightForm.leftForm = null;
                    this.container.lastForm = this.rightForm;
                } else if (this.leftForm && this.rightForm) // В середине очереди
                    this.leftForm.rightForm = this.rightForm;

                if (this.container.lastActiveForm == this) {
                    this.container.lastActiveForm = null;
                }

                this.container.countForm--;
                if (this.container.countForm <= 0) {
                    this.container.setCurrentForm(null);
                    this.container.lastForm = null;
                    if (this.container.DOM != D3Api.MainDom) {
                        this.container.DOM.D3Container = null;
                        delete this.container.DOM.D3Container;
                    }
                }
            }
        }
        D3Api.Base.removeEvent('onResize', resizeEventUid);
        D3Api.MainDom.D3FormCloseCtrl && D3Api.setControlPropertyByDom(D3Api.MainDom.D3FormCloseCtrl, 'visible', true);
        D3Api.MainDom.D3FormHelp && D3Api.MainDom.D3FormHelp._show(this);
        if (_modalBorders_.top) {
            D3Api.removeDom(_modalBorders_.top);
            D3Api.removeDom(_modalBorders_.right);
            D3Api.removeDom(_modalBorders_.bottom);
            D3Api.removeDom(_modalBorders_.left);
            _modalBorders_.top = null;
            _modalBorders_.right = null;
            _modalBorders_.bottom = null;
            _modalBorders_.left = null;
            _modalBorders_ = null;
        }
        if (this.D3Thread) {
            this.D3Thread.removeForm(this);
        }
        Form = null;
        MainForm = null;
        for (var rep in repeaters) {
            if(!repeaters.hasOwnProperty(rep)){
                continue;
            }
            repeaters[rep].destructor();
        }
        repeaters = null;
        for (var ds in dataSets) {
            if(!dataSets.hasOwnProperty(ds)){
                continue;
            }
            dataSets[ds].destructor();
        }
        dataSets = null;
        for (var act in actions) {
            if(!actions.hasOwnProperty(act)){
                continue;
            }
            actions[act].destructor();
        }
        for (var mod in modules){
            if(!modules.hasOwnProperty(mod)){
                continue;
            }
            modules[mod].destructor();
        }
        modules = null;
        this.isActive = false;
        this.formParams = null;
        this.formParamsHash = null;
        this.formParamsSettings = null;
        formParamsHash = null;
        actions = null;
        sysinfo = null;
        D3Api.removeDom(this.DOM);
        if (!destroyOnly) {
            var chforms = D3Api.getAllDomBy(this.DOM, '[formname]');
            for (var i = 0, c = chforms.length; i < c; i++) {
                if (chforms[i].D3Form && chforms[i].D3Form.formUid != this.formUid && !chforms[i].D3Form.destroyed)
                    chforms[i].D3Form.destructor(true);
            }
        }
        this.callEvent('onform_destroy', this.DOM);
        this.DOM.D3Form = null;
        this.DOM = null;
        this.D3Thread = null;

        delete this.D3Thread;
        delete this.container;
        delete this.DOM;
        //delete this.leftForm;
        delete this.rightForm;
        delete this.currentContext;

        delete this.formData;
        delete this.events;
        delete this.vars;
        this.destructorBase();
    };
    /**
     * закрытие формы
     * @param result
     */
    this.close = function (result,_func) {
        if(this.destroyed === true){
            return;
        }
        this.destroyed = true;
        if(this.callEvent('onbeforeclose', (arguments.length)?result:Form._onCloseResult_) === false)
        {
            this.destroyed = false;
            return;
        }
        //В событии могут закрыть родительскую форму, чтобы небыло цикла destroyed = true
        if(this.callEvent('onclose', (arguments.length)?result:Form._onCloseResult_) === false)
        {
            this.destroyed = false;
            return;
        }
        /* удаление сессионого кэша */
        //setVar('formCache', this.formCache);
        //CacheSessDelete.execute(function(){
        //    if(typeof _func == "function"){
        //        _func();
        //    }
        //});
        //clearSelection();
        /*если показано модальное окно - работаем только с ним и его содержимым*/
        var open_modal_cont = D3Api.getDomBy(D3Api.D3MainContainer, 'div[id="open_modal"]');
        if(open_modal_cont && D3Api.showedDom(open_modal_cont) && open_modal_cont.childNodes.length >1 && open_modal_cont.childNodes[0].D3Form){
            if(this.container && this.container.DOM){
                if(!this.container.DOM.D3Form || this.container.DOM.D3Form != open_modal_cont.childNodes[0].D3Form){
                    if(this.container.DOM && this.container.DOM == open_modal_cont){
                        this.destructor();
                    }else{
                        open_modal_cont.childNodes[0].D3Form.destructor();
                        if(Array.from(open_modal_cont.childNodes).indexOf(this)==-1){
                            this.destroyed = false;
                        }
                    }
                }else{
                    this.destructor();
                }
            }
        }else{
            this.destructor();
        }
        /*если есть такой контейнер и он на данный момент не скрыт и модально открыто не больше 1 формы*/
        if(open_modal_cont && D3Api.showedDom(open_modal_cont) && open_modal_cont.childNodes.length <=1 ){
            /*то прячем этот контейнер*/
            D3Api.hideDom(open_modal_cont);
        }
    };
    /**
     * Добавление контрола
     * @param controls
     * @param dom
     */
    this.addInControls = function (controls, dom) {
        var d = D3Api.getProperty(dom, 'data');
        if (!d)
            return;
        var dfields = {};
        var p = d.split(';');
        for (var i = 0, c = p.length; i < c; i++) {
            var f = p[i].split(':');
            if (f.length > 1)
                dfields[f[0]] = f[1];
        }
        if (i > 0)
            controls.push({control: dom, datafields: dfields});
    };

    /**
     * установка данных в контролы
     * @param controls
     * @param data
     * @param DOM
     * @param resultData
     * @returns {{}}
     */
    this.setControlsData = function (controls, data, DOM, resultData) {
        var resData = {}, ctrls, firstProp;
        DOM = DOM || this.DOM;
        for (var i = 0, c = controls.length; i < c; i++) {
            var ctrl = controls[i];
            firstProp = true;
            for (var prop  in ctrl.datafields) {
                if(!ctrl.datafields.hasOwnProperty(prop)){
                    continue;
                }
                var v = data[ctrl.datafields[prop]];
                /* if (v !== undefined || resultData) { */
                if (firstProp) {
                    if (DOM.id == ctrl.control.id && D3Api.getProperty(DOM,'isrepeat',false) === false)
                        ctrls = [DOM];
                    else
                        ctrls = DOM.querySelectorAll('#' + ctrl.control.id+':not([isrepeat])');
                }
                for (var ci = 0, cc = ctrls.length; ci < cc; ci++) {
                    /* if (v !== undefined) */
                    this.setControlProperty(ctrls[ci], prop, v);
                    if (resultData) {
                        var name = this.getControlProperty(ctrls[ci], 'name');
                        resData[name + '_' + prop] = this.getControlProperty(ctrls[ci], prop);
                    }
                }
                firstProp = false;
                /* } */
            }
        }
        return resData;
    };

    /**
     * получение данных из контрола.
     * @param controls
     * @param DOM
     * @returns {{}}
     */
    this.getControlsData = function (controls, DOM) {
        var data = {}, ctrls, firstProp;
        DOM = DOM || this.DOM;
        for (var i = 0, c = controls.length; i < c; i++) {
            var ctrl = controls[i];
            firstProp = true;
            for (var prop  in ctrl.datafields) {
                if(!ctrl.datafields.hasOwnProperty(prop)){
                    continue;
                }
                if (firstProp) {
                    if (DOM.id == ctrl.control.id || DOM.id == ctrl.control.id + 'clone')
                        ctrls = [DOM];
                    else
                        ctrls = DOM.querySelectorAll('#' + ctrl.control.id);
                }
                for (var ci = 0, cc = ctrls.length; ci < cc; ci++) {
                    var name = this.getControlProperty(ctrls[ci], 'name');
                    data[name + '_' + prop] = this.getControlProperty(ctrls[ci], prop);
                }
                firstProp = false;
            }
        }
        return data;
    };

    /**
     *
     * @param controls
     * @param DOM
     */
    this.startWaitControls = function (controls, DOM) {
        var ctrls;
        DOM = DOM || this.DOM;
        for (var i = 0, c = controls.length; i < c; i++) {
            var ctrl = controls[i];

            if (DOM.id == ctrl.control.id)
                ctrls = [DOM];
            else
                ctrls = DOM.querySelectorAll('#' + ctrl.control.id);
            for (var ci = 0, cc = ctrls.length; ci < cc; ci++) {
                D3Api.BaseCtrl.callMethod(ctrls[ci], 'startWait');
            }
        }
    };
    //Вынес отдельно так как лишние итерации при клонировании
    /**
     *
     * @param controls
     * @param DOM
     */
    this.stopWaitControls = function (controls, DOM) {
        var ctrls;
        DOM = DOM || this.DOM;
        for (var i = 0, c = controls.length; i < c; i++) {
            var ctrl = controls[i];

            if (DOM.id == ctrl.control.id)
                ctrls = [DOM];
            else
                ctrls = DOM.querySelectorAll('#' + ctrl.control.id);
            for (var ci = 0, cc = ctrls.length; ci < cc; ci++) {
                D3Api.BaseCtrl.callMethod(ctrls[ci], 'stopWait');
            }
        }
    };
    function createAction(name) {
        if (!actions[name]) {
            actions[name] = new D3Api.D3Action(_GCF(), name);
            actions[name].sysinfo = new postObject();
        }
        return actions[name];
    }

    function createModule(name) {
        if(!modules[name]){
            modules[name] = new D3Api.D3Module(_GCF(), name);
            modules[name].sysinfo = new postObject();
        }
        return modules[name];
    }
    this.createModule = createModule;
    /**
     *
     * @param cmptype
     * @param name
     * @returns {undefined|*}
     */
    this.getParamsByName = function (cmptype, name) {
        if (!this.withParams())
            return undefined;
        this.formParams = this.formParams || {};
        if (!this.formParams[cmptype] || !this.formParams[cmptype][name]) {
            if (!this.formParams[cmptype] || Array.isArray(this.formParams[cmptype])) {
                this.formParams[cmptype] = {};
            }
            if (D3Api.controlsApi[cmptype] && D3Api.controlsApi[cmptype]._API_ && D3Api.controlsApi[cmptype]._API_._getDefaultParams) {
                this.formParams[cmptype][name] = D3Api.controlsApi[cmptype]._API_._getDefaultParams() || {};
            } else {
                this.formParams[cmptype][name] = {};
            }
        }
        return this.formParams[cmptype][name];
    };

    /**
     *
     * @param cmptype
     * @param name
     * @param params
     */
    this.setParamsByName = function (cmptype, name, params) {
        if (!this.withParams())
            return;
        this.formParams = this.formParams || {};
        this.formParams[cmptype] = this.formParams[cmptype] || {};
        this.formParams[cmptype][name] = params;
    };

    /**
     *
     * @param name
     * @returns {undefined|*}
     */
    this.getGlobalParamsByName = function (name) {
        if (!this.withParams())
            return undefined;
        this.formParams = this.formParams || {};
        return this.formParams[name];
    };

    /**
     *
     * @param name
     * @param params
     */
    this.setGlobalParamsByName = function (name, params) {
        if (!this.withParams())
            return;
        this.formParams = this.formParams || {};
        this.formParams[name] = params;
    };

    /**
     *
     * @param onload
     */
    this.loadParams = function (onload) {
        if (this.withParams()) {
            setVar('ps_form', this.getFormParamsHash());
            getParamsAction.execute(function () {
                setVar('ps_form');
                formParamsHash = getVar('ps_params');
                this.formParams = D3Api.JSONparse(formParamsHash);
                setVar('ps_params');
                if (onload instanceof Function)
                    onload.call(MainForm);
            });
        }
        else
            onload.call(this);

    };

    /**
     *
     * @returns {*|boolean}
     */
    this.withParams = function () {
        return (Form._withParams_ !== undefined && Form._withParams_) || (Form._withParams_ === undefined && this.formParamsSettings['withparams']);
    };
    var _sPTimer = null;

    /**
     *
     * @param force
     * @returns {boolean}
     */
    this.saveParams = function (force) {
        if (this.withParams()) {
            if (_sPTimer) {
                clearTimeout(_sPTimer);
                _sPTimer = null;
            }
            if (!force) {
                _sPTimer = setTimeout(function () {
                    MainForm.saveParams(true)
                }, 1000);
                return true;
            }
            var nFP = D3Api.JSONstringify(this.formParams)
            if (this.formParams && formParamsHash != nFP) {
                setVar('ps_form', this.getFormParamsHash());
                setVar('ps_params', nFP);
                formParamsHash = nFP;
                setParamsAction.execute();
            }
        }
    };
    /**ы
     *
     * @returns {string}
     */
    this.getFormParamsHash = function () {
        var form_hash = this.name;
        for (var i = 0, c = this.formParamsHash.length; i < c; i++) {
            form_hash += ':' + this.formData.request[this.formParamsHash[i]];
        }
        return form_hash;
    };
    this.parse(fDOM);
    fDOM = null;
};

/**
 * @class
 * @param name
 * @constructor
 */
D3Api.D3ThreadForms = function (name) {
    D3Api.D3Base.call(this);
    var threadForms = [];

    /**
     *
     * @returns {*}
     */
    this.getName = function () {
        return name;
    }

    /**
     *
     * @param newName
     */
    this.rename = function (newName) {
        name = newName;
        D3Api.Base.callEvent('onThreadFormsRename', this, name, newName);
    }

    /**
     *
     * @param form
     */
    this.addForm = function (form) {
        threadForms.push(form);
        form.D3Thread = this;
    }

    /**
     *
     * @returns {*}
     */
    this.getRootForm = function () {
        return threadForms[0];
    }

    /**
     *
     * @returns {*}
     */
    this.getStepForm = function () {
        return threadForms[threadForms.length - 1];
    }

    /**
     *
     * @returns {string|*|boolean|undefined}
     */
    this.getThreadCaption = function () {
        var rf = this.getRootForm();
        if (!rf)
            return false;
        if (rf.existsFunction('threadCaption')) {
            return rf.callFunction('threadCaption');
        }
        if (D3Api.hasProperty(rf.DOM, 'thread_caption'))
            return D3Api.getProperty(rf.DOM, 'thread_caption');

        return rf.getFormCaption();
    }

    /**
     *
     * @returns {string|*|boolean|undefined}
     */
    this.getThreadStepCaption = function () {
        var sf = this.getStepForm();
        if (!sf)
            return false;
        if (sf.existsFunction('threadStepCaption')) {
            return rf.callFunction('threadStepCaption');
        }
        if (D3Api.hasProperty(sf.DOM, 'thread_step_caption'))
            return D3Api.getProperty(sf.DOM, 'thread_step_caption');

        return sf.getFormCaption();
    }

    /**
     *
     * @param form
     */
    this.removeForm = function (form) {
        var ind = threadForms.indexOf(form);
        if (ind >= 0)
            threadForms.splice(ind, 1);
        if (threadForms.length <= 0) {
            this.close();
        }
    }

    /**
     *
     */
    this.activate = function () {
        var c = threadForms.length;
        if (c > 0)
            threadForms[c - 1].activate();
        else {
            this.close();
            return;
        }
        D3Api.Base.callEvent('onThreadFormsActivate', this, name);
    }

    /**
     *
     */
    this.close = function () {
        for (var i = threadForms.length - 1; i > -1; i--)
            threadForms[i].destructor();

        //Нить закрыть
        this.destructorBase();
        D3Api.threads[name] = undefined;
        delete D3Api.threads[name];

        var it = name.indexOf('.thread:');
        if (it > 0) {
            name = name.substr(0, it);
        }
        if (D3Api.threads[name])
            return;
        //Проверим есть ли еще нити с таким именем
        if(!D3Api.MainDom.D3ThreadsTabs){
            for (var nt in D3Api.threads) {
                if(!D3Api.threads.hasOwnProperty(nt)){
                    continue;
                }
                if(nt.indexOf(name + '.thread:') === 0){
                    D3Api.threads[name] = D3Api.threads[nt];
                    D3Api.threads[name].rename(name);
                    delete D3Api.threads[nt];
                    break;
                }
            }
        }
        D3Api.Base.callEvent('onThreadFormsClose', this, name);
    }
    D3Api.Base.callEvent('onThreadFormsCreate', this, name);
};

/**
 *
 * @class
 * @param dom{Object}
 */
D3Api.D3Container = function (dom) {
    D3Api.D3Base.call(this);
    this.countForm = 1;
    this.currentForm = null;
    this.lastActiveForm = null;
    this.lastForm = null;
    this.DOM = dom;

    /**
     *
     * @param form
     */
    this.setCurrentForm = function (form) {
        this.callEvent('onChangeCurrentForm', this.currentForm, form);
        this.currentForm = form;
        if(this.countForm == 1)
        {
            this.lastForm = form;
        }
    }

    /**
     *
     */
    this.destructor = function () {
        this.destructorBase();
    }
};

/**
 * @description Выполнить DataSet-ы
 * @example
 * D3Api.RefreshDataSets()
 * @param form {D3Api.D3Form} - Экземпляр класса D3Form
 * @param dataSets {string} - список имен датасетов через ;
 * @param value
 */
D3Api.RefreshDataSets = function (form, dataSets, value) {
    form.beginRequest();
    var ds = dataSets.split(';');
    for (var i = 0, c = ds.length; i < c; i++) {
        if (value != undefined)
            form.setVar(ds[i] + '_parent', value);
        form.refreshDataSet(ds[i]);
    }
    form.endRequest();
};
/**
 * @description Cоответствие двух элементов.
 * @param {Array|Object|Number|String|Boolean} - 1-ый элемент
 * @param {Array|Object|Number|String|Boolean} - 2-ой элемент
 * @return {Boolean} результат соответствие
 **/
D3Api.Equals = function(_obj1, _obj2){
    function equals_obj(obj1, obj2){
        var isEqual = true;
        if(Object.keys(obj1).length != Object.keys(obj2).length){
            return false;
        }
        for(var l in obj1){
            if(obj1.hasOwnProperty(l)){
                if(isEqual == true){
                    if(obj2[l] instanceof Array && obj1[l] instanceof Array){
                        isEqual = equals_arr(obj1[l],obj2[l]);
                    } else if(obj2[l] instanceof Object && obj1[l] instanceof Object){
                        isEqual = equals_obj(obj1[l],obj2[l]);
                    }else{
                        isEqual = obj1[l] == obj2[l];
                    }
                }else{
                    return isEqual;
                }
            }
        }
        return isEqual;
    }
    function equals_arr(obj1, obj2){
        var isEqual = true;
        if(obj1.length != obj2.length){
            return false;
        }
        for(var i = 0,len = obj2.length ; i < len ; i++){
            if(isEqual == true){
                if (obj1[i] instanceof Array && obj2[i] instanceof Array) {
                    isEqual =  equals_arr(obj1[i],obj2[i]);
                }else if (obj1[i] instanceof Object && obj2[i] instanceof Object){
                    isEqual = equals_obj(obj1[i],obj2[i]);
                }else{
                    isEqual = obj1[i] == obj2[i];
                }
            }else{
                return isEqual;
            }
        }
        return isEqual;
    }
    if(Array.isArray(_obj1) && Array.isArray(_obj2)){
        return equals_arr(_obj1,_obj2);
    }else if(_obj1 instanceof Object && _obj2 instanceof Object){
        return equals_obj(_obj1,_obj2);
    }else{
        return _obj1 == _obj2;
    }
};
/**
 * @description разбивает объект или массив на несколько подмассивов
 * @param {Array|Object}
 * @param {number}
 * @return {Array|Object}
 **/
D3Api.DataChunk = function(_data,_size){
    if(Array.isArray(_data)){
        if(!_size){
            _size = _data.length;
        }
        var res = _data.reduce(function(p, c){
            if(p[p.length-1].length == _size){
                p.push([]);
            }

            p[p.length-1].push(c);
            return p
        },[[]]);
        return res;
    }else if(_data instanceof Object){
        var arr = [{}];
        var indx = 0;
        for(var i in _data){
            if(_data.hasOwnProperty(i)){
                if(_size && indx >= _size){
                    indx = 0;
                    arr.push({});
                }
                arr[arr.length - 1][i] = _data[i];
                ++indx;
            }
        }
        return arr;
    }else{
        D3Api.debug_msg('DataChunk принимает только массив или объект');
    }
};
D3Api.Office = {
    Spreadsheet:{},
    WordProcessing:{}
};
/**
 * связываем оригинальный дом с копией
 * @param _originSource оригинал
 * @param _isDisplayNoneRemove не делать ли копию невидимых элементов
 */
D3Api.createClone = function (_param) {
    var _originSource = null;
    var _isDisplayNoneRemove = null;
    var _sync = false;

    if('originSource' in _param){
        _originSource = _param['originSource'];
    }
    if('isDisplayNoneRemove' in _param){
        _isDisplayNoneRemove = _param['isDisplayNoneRemove'];
    }
    if('sync' in _param){
        _sync = _param['sync'];
    }

    var asyncCalls = {};
    var asyncImage = {};
    var asyncCallBack = {};
    var asyncCallBackCancel = {};
    function convertCanvas(_origin, _clone, _callback){
        var uid = D3Api.getUniqId('uid_call');
        var ctx = _clone.getContext("2d");
        asyncCalls[uid] = _clone;
        asyncCallBack[uid] = _callback;
        try{
            _origin.toBlob(function(blob) {
                var newImg = document.createElement('img');
                _clone.parentNode.insertBefore(newImg,_clone);
                initLink(_origin, newImg);
                convertBlobToBase64(blob,_origin,newImg,function(){
                    delete asyncCalls[uid];
                    if(_callback){
                        _callback(uid);
                    }
                    delete asyncCallBack[uid];
                });
                _clone.remove();
            })
        }catch (e){
            delete asyncCalls[uid];
            delete asyncCallBack[uid];
        }
    }
    function convertBlobSrcToBase64(_src,_origin, _clone, _callback){
        var uid = D3Api.getUniqId('uid_call');
        asyncCalls[uid] = _clone;
        asyncCallBack[uid] = _callback;
        var xhr = new XMLHttpRequest();
        xhr.open('GET', _src, true);
        xhr.responseType = 'blob';
        xhr.onload = function() {
            var blob = this.response;
            convertBlobToBase64(blob,_origin,_clone,function(){
                delete asyncCalls[uid];
                if(_callback){
                    _callback(uid);
                }
                delete asyncCallBack[uid];
            })
        };
        xhr.onerror = function(){
            delete asyncCalls[uid];
            D3Api.debug_msg('не удалось получить blob. Возможно объект был освобождем методом revokeObjectURL');
            if(_callback){
                _callback(uid);
            }
            delete asyncCallBack[uid];
        }

        xhr.send();
    }
    function convertBlobToBase64(_blob,_origin, _clone, _callback){
        var uid = D3Api.getUniqId('uid_call');
        asyncCalls[uid] = _clone;
        asyncCallBack[uid] = _callback;
        var reader = new FileReader();
        reader.readAsDataURL(_blob);
        reader.onloadend = function() {
            _clone.height = _origin.offsetHeight;
            _clone.width = _origin.offsetWidth;
            var base64data = reader.result;
            _clone.src = base64data;
            delete asyncCalls[uid];
            if(_callback){
                _callback(uid);
            }
            delete asyncCallBack[uid];
        }

    }
    function convertSrcToBase64(_img){
        var _uid = D3Api.getProperty(_img,'uid_call');
        if(_uid in asyncCalls){
            var c = document.createElement('canvas');
            c.height = _img.offsetHeight;
            c.width = _img.offsetWidth;
            var ctx = c.getContext('2d');
            ctx.drawImage(_img, 0, 0, c.width, c.height);
            var base64String = c.toDataURL();
            asyncCalls[_uid].style.backgroundImage = 'url("' + base64String + '")';
        }
    };
    function createImg(_src, _clone,_callback,_callbackCancel){
        var image = new Image();
        var uid = D3Api.getUniqId('uid_call');
        asyncCalls[uid] = _clone;
        asyncImage[uid] = image;
        asyncCallBack[uid] = _callback;
        asyncCallBackCancel[uid] = _callbackCancel;
        document.body.appendChild(image);
        image.setAttribute('uid_call',uid);
        if(_sync === true){
            image.addEventListener('load', function(_event) {
                convertSrcToBase64(image);
                image.remove();
                delete asyncCalls[uid];
                delete asyncImage[uid];
            }, false);
        } else {
            image.addEventListener('load', function(_event) {
                convertSrcToBase64(_event.target);
                var _uid = D3Api.getProperty(_event.target,'uid_call');
                if(_uid in asyncCalls){
                    convertSrcToBase64(_event.target);
                    _event.target.remove();
                    delete asyncCalls[_uid];
                    delete asyncImage[_uid];
                    if(_callback){
                        _callback(_uid);
                    }
                    delete asyncCallBack[_uid];
                    delete asyncCallBackCancel[_uid];
                }
            }, false);
            image.addEventListener('error', function(_event) {
                _callbackCancel(_uid);
                /*if(Object.keys(asyncCalls).length <= 0){
                    resolve(clone);
                }*/
                delete asyncCalls[_uid];
                delete asyncImage[_uid];
                delete asyncCallBack[_uid];
                if(_uid in asyncCallBackCancel){
                    asyncCallBackCancel[_uid](_uid);
                }
                delete asyncCallBackCancel[_uid];

            }, false);
        }

        image.src = _src;

        return uid;
    }


    var clone = null;
    var origin = null;
    if(_originSource.nodeType == 9){
        clone = _originSource.body.cloneNode(true);
        origin = _originSource.body;
    }else if(_originSource.nodeType == 1){
        clone = _originSource.cloneNode(true);
        origin = _originSource;
    }

    function initLink(_origin, _clone){
        var _or = _origin;
        for(;;){
            if(_or.linkorigin){
                _or = _or.linkorigin;
            }else{
                break;
            }
        }
        _origin.linkclone = _clone;
        _clone.linkorigin = _or;
    }

    function initClone(_origin, _clone, resolve){
        if(_origin.nodeType != 1){
            return;
        }
        var nName = _origin.nodeName.toLowerCase();
        var cName = _clone.nodeName.toLowerCase();
        if(nName == 'canvas' && cName == 'canvas'){
            convertCanvas(_origin, _clone,function(){
                if(Object.keys(asyncCalls).length <= 0){
                    resolve(clone);
                }
            });
            return;
        }

        if (nName == 'script' && cName == 'script') {
            _clone.remove();
            return;
        }
        initLink(_origin, _clone);
        var isClone = true;
        if(_isDisplayNoneRemove === true){
            if(['style'].indexOf(nName) == -1){
                if (getComputedStyle(_origin).display == 'none' || _origin.style.display == 'none') {
                    _clone.remove();
                    /* элемент скрытый не делаем копию */
                    isClone = false;
                }
            }
        }
        if(isClone){
            if(nName == 'select'){
                var span = document.createElement('span');
                span.innerText = _origin.value;
                _clone.parentNode.insertBefore(span,_clone);
                _clone.remove();
                initLink(_origin, span);
            }else if(nName == 'iframe'){
                var divIframe = document.createElement('div');

                for (var jndex = 0; jndex < _origin.attributes.length; jndex++) {
                    if(_origin.attributes[jndex].name == 'height'){
                        if(D3Api.getProperty(_origin,'autoheight','false') === 'true'){
                            continue;
                        }
                    }

                    divIframe.setAttribute(_origin.attributes[jndex].name,_origin.attributes[jndex].value);
                    if(_origin.attributes[jndex].name == 'style'){
                        if(D3Api.getProperty(_origin,'autoheight','false') === 'true'){
                            divIframe.style.height = '100%';
                        }
                    }
                }
                var divBody = document.createElement('div');
                var childBody = _origin.contentDocument.body.cloneNode(true);
                for (var jndex = 0; jndex < childBody.attributes.length; jndex++) {
                    divBody.setAttribute(childBody.attributes[jndex].name,childBody.attributes[jndex].value);
                }
                divIframe.appendChild(divBody);

                var nLIst = D3Api.singleNode();
                nLIst.setNodeList(childBody.childNodes);
                var list = nLIst.get();
                for(var i = 0;i < list.length; i++){
                    divBody.appendChild(list[i]);
                }
                _clone.parentNode.insertBefore(divIframe,_clone);
                _clone.remove();
                initClone(_origin.contentDocument.body, divBody,resolve);
            }else {
                if (nName == 'img'){
                    try{
                        var src = _origin.src;
                        var regExp = src.match(/blob:/);
                        if (!D3Api.empty(regExp) && regExp.length > 0) {
                            convertBlobSrcToBase64(src, _origin, _clone, function(){
                                if(Object.keys(asyncCalls).length <= 0){
                                    resolve(clone);
                                }
                            })
                        }else{
                            var c = document.createElement('canvas');
                            c.height = _origin.naturalHeight;
                            c.width = _origin.naturalWidth;
                            var ctx = c.getContext('2d');
                            ctx.drawImage(_origin,0,0,c.width,c.height);
                            var base64String = c.toDataURL();
                            _clone.src = base64String;
                        }

                    }catch (e){
                        D3Api.debug_msg(e);
                    }

                }
                var backImage = _origin.style.backgroundImage;
                if (!D3Api.empty(backImage)) {
                    var regExp = backImage.match(/url\("([^>]*)"\)/);
                    if (!D3Api.empty(regExp) && regExp.length >= 2) {

                        createImg(regExp[1], _clone,function(){
                            if(Object.keys(asyncCalls).length <= 0){
                                resolve(clone);
                            }
                        },function(){
                            if(Object.keys(asyncCalls).length <= 0){
                                resolve(clone);
                            }
                        })
                    }
                }

                var nLIstOrigin = D3Api.singleNode();
                var nLIstCLone = D3Api.singleNode();
                nLIstOrigin.setNodeList(_origin.childNodes);
                nLIstCLone.setNodeList(_clone.childNodes);

                var orchilds = nLIstOrigin.get(),
                    clchilds = nLIstCLone.get();
                if (orchilds.length != clchilds.length) {
                    //ошибка кол-во дочерних элементов не совапала
                }
                for (var i = 0; i < orchilds.length; i++) {
                    initClone(orchilds[i], clchilds[i], resolve);
                }
            }
        }
    }
    if(_sync === false){
        var promise = new Promise(function(resolve) {
            initClone(origin, clone, resolve);
            if(Object.keys(asyncCalls).length <= 0){
                resolve(clone);
            }
        });
        return promise;
    }else{
        initClone(origin, clone);
        return clone;
    }

};

D3Api.getParentDom = function(_domObject , _attrs){
    var searchDom = _domObject;
    if(_domObject && _domObject.nodeType == 1){
        var _arrtibutes = _domObject.attributes;
        for(var _name in _attrs){
            if(!(_attrs.hasOwnProperty(_name) && _name in _arrtibutes && _arrtibutes[_name].value == _attrs[_name])){
                searchDom = null;
                break;
            }
        }
        if(D3Api.empty(searchDom)){
            searchDom = D3Api.getParentDom(_domObject.parentNode,_attrs);
        }
    }else{
        searchDom = null;
    }
    return searchDom;
};
/**
 * Вместо parseFloat использовать string2Float
 * Если, для parseFloat передать пустую строку(""), вернется NaN
 * Что бы, везде не использовать проверку isNaN, на этапе преобразования его проверяем.
 * Ссылка на спецификацию: https://tc39.es/ecma262/#sec-parsefloat-string
**/
D3Api.string2Float = function(str){
    var f_number = parseFloat(str);
    return (f_number !== f_number) ? 0 : f_number;
};
D3Api.exportDataToExcel = function(param, oncallbacks){
    var body = param.body;
    var header = param.header||[];
    var groups = param.groups;
    var _data = param.data;
    var show_number = param.show_number||false;
    var filename = param.filename;
    var title = param.title||filename;
    var result = {};
    var indexData = {};
    var groupData = {};
    var excel = new D3Api.Office.Spreadsheet.export('xlsx');
    var sheet1 = excel.addSheet(title);
    var startRow = null;
    var postMerges = [];//слить ячейки после того как все ячейки проставились.
    if(!D3Api.Equals([],header)){
        for(var i = 0 ; i < header.length ; i++){
            var maxRow = sheet1.getMaxRow();
            if(i > 0){
                maxRow += 1;
            }
            maxRow = D3Api.Office.Spreadsheet.getRow(maxRow);
            for(var j = 0 ; j < header[i].length ; j++){
                var column = D3Api.Office.Spreadsheet.getColumn(j);
                var coord = column+maxRow;
                var style = sheet1.setCellValue(coord, header[i][j].caption);
                if('style' in header[i][j]){
                    style.setStyleArray(header[i][j].style);
                }
                if('MergeCells' in header[i][j]){
                    postMerges.push({
                        coord: coord,
                        MergeCells: header[i][j].MergeCells
                    })
                }
            }
        }

    }
    if(!D3Api.empty(title)){
        var maxRow = sheet1.getMaxRow();
        if(!D3Api.Equals([],header)){
            maxRow += 1;
        }
        maxRow = D3Api.Office.Spreadsheet.getRow(maxRow);
        var column = D3Api.Office.Spreadsheet.getColumn(0);
        var coord = column+maxRow;
        sheet1.setCellValue(coord,title).setStyleArray(D3Api.mixin({
            border:{
                'all': {
                    borderWidth: 1,
                    borderStyle: 'thin'
                }
            },
            text:{
                wraptext : true,
                bold: true,
                alignment:{
                    horizontal:'center'
                }
            }
        },{}));
        sheet1.setMergeCells(coord+':'+ (D3Api.Office.Spreadsheet.getColumn(body.length - 1) + maxRow));
    }


    if(groups){
        for(var i = 0 ; i < groups.length ; i++){
            var maxRow = D3Api.Office.Spreadsheet.getRow(sheet1.getMaxRow() + 1);
            if(i == 0){
                startRow = maxRow;
            }
            var column = D3Api.Office.Spreadsheet.getColumn(0);
            var coord = column+maxRow;
            sheet1.setCellValue(coord,groups[i].caption).setStyleArray(D3Api.mixin({
                border:{
                    'all': {
                        borderWidth: 1,
                        borderStyle: 'thin'
                    }
                },
                text:{
                    wraptext : true,
                    bold: true
                }
            },{}));
            sheet1.setMergeCells(coord+':'+ (D3Api.Office.Spreadsheet.getColumn(body.length - 1) + maxRow));
        }
    }
    var lenSym = _data.length.toString().length;
    var clearColums = [];// список колонок где нет значений
    if(groups.length > 0 ){
        for(var i = 0; i < _data.length ; i++){
            /* TODO: объекты ключи автоматически сортируются перед значение устанавливается порядковый номер записи для сохранения последовательности */
            var spad = i.toString().padStart(lenSym,'0');
            var indexKey = '';
            for(var j = 0 , lvres = result; j < groups.length ; j++){
                if(_data[i][groups[j].field] === ''){
                    var code = _data[i][groups[j].field];
                    for(var l = i + 1; l < groups.length ; l++){
                        code+= _data[i][groups[l].field];
                    }
                    var UniqId = '!UniqId-'+D3Api.crc32(code)
                    clearColums.push(UniqId);
                    _data[i][groups[j].field] = UniqId;
                }
                indexKey += _data[i][groups[j].field];

                var isAdd = false;
                if(!(groups[j].field in _data[i]) || _data[i][groups[j].field] === ''){
                    continue;
                }
                if(!(indexKey in indexData)){
                    indexData[indexKey] = spad;
                    var key = spad+"|"+_data[i][groups[j].field];
                    if('!groupCaption' in _data[i]){
                        groupData[key] = _data[i]['!groupCaption'];
                    }
                    if(j < groups.length - 1){
                        lvres[key] = {};
                    }else{
                        lvres[key] = [];
                    }
                    isAdd = true;
                }
                if(j == groups.length - 1){
                    if(!('!notAddData' in _data[i] && _data[i]['!notAddData'] === true)){
                        /* вставляем данные в указанную иерархию */
                        var indx = indexData[indexKey];
                        lvres[indx+"|"+_data[i][groups[j].field]].push(_data[i]);
                    }
                }else{
                    /* переключаемся на дочерний элемент */
                    if(isAdd){
                        lvres = lvres[spad+"|"+_data[i][groups[j].field]];
                    }else{
                        var indx = indexData[indexKey];
                        lvres = lvres[indx+"|"+_data[i][groups[j].field]];
                    }
                }
            }
        }
    }else{
        result = _data;
    }
    var d = result;

    var filterCoordMin = '';
    var filterCoordMax = '';
    var maxRow = sheet1.getMaxRow();
    for(var i = 0; i < body.length ; i++){
        var caption = body[i].caption.trim();
        var styleHeader = {};

        if('styleHeader' in body[i]){
            styleHeader = body[i].styleHeader;
        }

        var column = D3Api.Office.Spreadsheet.getColumn(i);
        var row = D3Api.Office.Spreadsheet.getRow(maxRow + 1);
        var coord = column+row;
        if(filterCoordMin == ''){
            filterCoordMin = coord;
        }
        filterCoordMax = coord;
        sheet1.setCellValue(coord,caption).setStyleArray(D3Api.mixin({
            border:{
                'all': {
                    borderWidth: 1,
                    borderStyle: 'thin'
                }
            },
            text:{
                wraptext : true,
                bold: true
            }
        },styleHeader));
    }
    var maxRow = sheet1.getMaxRow() + 1;
    sheet1.setAutoFilter("A"+maxRow+":"+D3Api.Office.Spreadsheet.getColumn(body.length - 1)+maxRow);
    if(show_number === true){
        var maxRow = sheet1.getMaxRow();
        for(var i = 0; i < body.length ; i++){
            var column = D3Api.Office.Spreadsheet.getColumn(i);
            var row = D3Api.Office.Spreadsheet.getRow(maxRow + 1);
            var coord = column+row;
            sheet1.setCellValue(coord,i + 1).setStyleArray(D3Api.mixin({
                border:{
                    'all': {
                        borderWidth: 1,
                        borderStyle: 'thin'
                    }
                },
                text:{
                    wraptext : true,
                    bold: true
                }
            }, {}));
        }
    }

    var grouping = {}
    function setCellExcel(_dd, _num){
        if(!_num){
            _num = 1;
        }
        var maxRow = sheet1.getMaxRow();
        if(_dd instanceof Array){
            for(var i = 0, l = 0 ; i < _dd.length ; i++){
                if(Object.keys(_dd[i]).length <= 1 && body.length > 1){
                    continue
                }
                for(var j = 0 ; j < body.length ; j++){
                    var styleBody = {};
                    if('styleBody' in body[j]){
                        styleBody = body[j].styleBody;
                    }

                    var caption = '';
                    if((body[j].name in _dd[i]) && _dd[i][body[j].name]){
                        if(clearColums.indexOf(_dd[i][body[j].name]) > -1){
                            caption = '';
                        }else{
                            caption = _dd[i][body[j].name].trim();
                        }
                    }
                    if(caption.indexOf('!UniqId-') > -1){
                        caption = '';
                    }
                    var column = D3Api.Office.Spreadsheet.getColumn(j);
                    var row = D3Api.Office.Spreadsheet.getRow(maxRow + l + 1);
                    var coord = column+row;
                    sheet1.setCellValue(coord,caption).setStyleArray(D3Api.mixin({
                        border:{
                            'all': {
                                borderWidth: 1,
                                borderStyle: 'thin'
                            }
                        },
                        text:{
                            wraptext : true
                        }
                    },styleBody));
                    if('EXCEL_CELL_WIDTH' in D3Api){
                        sheet1.setMaxColumnWidth(D3Api.Office.Spreadsheet.getColumn(j),D3Api.EXCEL_CELL_WIDTH);
                    } else {
                        sheet1.setAutoWidth({
                            'column': D3Api.Office.Spreadsheet.getColumn(j)
                        })
                    }
                }
                l++;
            }
        }else{
            var styleGroupBody = {};
            if((_num in groups) && ('styleBody' in groups[_num])){
                styleGroupBody = groups[_num].styleBody;
            }
            for(var _name in _dd){
                if(_dd.hasOwnProperty(_name)){
                    var caption = _name;
                    var space = ''
                    if(_name in groupData){
                        caption = groupData[_name];
                    }else{
                        if(lenSym > 0){
                            caption = caption.substr(lenSym + 1);
                        }
                    }

                    if(clearColums.indexOf(caption) > -1){
                        caption = '';
                    }
                    for(var i = 1 ; i < _num ; i++){
                        space += '   ';
                    }
                    caption = space + caption;


                    var maxRow = sheet1.getMaxRow();
                    var column = 'A';
                    var row = D3Api.Office.Spreadsheet.getRow(maxRow + 1);
                    var coord = column+row;
                    var maxCol = D3Api.Office.Spreadsheet.getColumn(sheet1.getMaxColumn());
                    sheet1.setCellValue(coord, caption).setStyleArray(D3Api.mixin({
                        border:{
                            'all': {
                                borderWidth: 1,
                                borderStyle: 'thin'
                            }
                        },
                        text:{
                            wraptext : true,
                            color:{
                                hex:'#3282c3'
                            },
                            bold: true
                        }
                    },styleGroupBody));
                    sheet1.setMergeCells(coord+':'+maxCol+row);
                   // if(_dd[_name].length > 1){
                        var startGroup = D3Api.Office.Spreadsheet.getRow(sheet1.getMaxRow() + 1);
                        setCellExcel(_dd[_name],_num + 1);
                        var endGroup = D3Api.Office.Spreadsheet.getRow(sheet1.getMaxRow());
                        if(!(_num in grouping)){
                            grouping[_num] = '';
                        }
                        if(grouping[_num] != ''){
                            grouping[_num] += ';'
                        }
                        grouping[_num] += startGroup+":"+endGroup;
                   // }
                }
            }
        }

    }
    setTimeout(function(_param, sht1, _postMerges){
        var footer = _param.footer||[];
        setCellExcel(d);
        if(!D3Api.Equals([],footer)){
            for(var i = 0 ; i < footer.length ; i++){
                var maxRow = D3Api.Office.Spreadsheet.getRow(sht1.getMaxRow() + 1 + i);
                for(var j = 0 ; j < footer[i].length ; j++){
                    var column = D3Api.Office.Spreadsheet.getColumn(j);
                    var coord = column+maxRow;
                    var style = sht1.setCellValue(coord, footer[i][j].caption);
                    if('style' in footer[i][j]){
                        style.setStyleArray(footer[i][j].style);
                    }
                    if('MergeCells' in footer[i][j]){
                        switch (footer[i][j].MergeCells){
                            case D3Api.Office.Spreadsheet.Constants.MaxColumn:
                                var maxCol = D3Api.Office.Spreadsheet.getColumn(sht1.getMaxColumn());
                                sht1.setMergeCells(coord+':'+(maxCol + maxRow));
                                break;
                            default:
                                sht1.setMergeCells(coord+':'+footer[i][j].MergeCells);
                        }
                    }
                }
            }
        }
        if(!D3Api.Equals({},grouping)){
            sheet1.setOutlineLevelRow({
                summaryBelow: true,
                levels: grouping
            })
        }

        if(!D3Api.Equals([],_postMerges)){
            for(var i = 0; i < _postMerges.length ; i++){
                switch (_postMerges[i].MergeCells){
                    case D3Api.Office.Spreadsheet.Constants.MaxColumn:
                        var maxCol = D3Api.Office.Spreadsheet.getColumn(sht1.getMaxColumn());
                        var crd = D3Api.Office.Spreadsheet.intoCoord(_postMerges[i].coord);
                        sht1.setMergeCells(_postMerges[i].coord+':'+(maxCol + D3Api.Office.Spreadsheet.getRow(crd.row)));
                        break;
                    default:
                        sht1.setMergeCells(_postMerges[i].coord+':'+_postMerges[i].MergeCells);
                }
            }
        }
        setTimeout(function(){
            excel.save(filename);
        })
    },undefined,param, sheet1, postMerges)
};/**
 *
 * @class
 * @param form
 * @param name
 * @param dom
 * @constructor
 */
D3Api.D3DataSet = function(form,name,dom)
{
    D3Api.D3Base.call(this);
    this.name = name;
    this.data = new Array();
    //Хэш параметров запроса если данные пришли без запроса то заполняется и при последующем запросе сверяется, если совпадает то запрос на сервер не происходит
    this.dataHash = '';
    this.uidData = null;
    //Флаг того что нужно обрабатывать все ответы, а не только тот который запросили последним
    this.allResponse = false;
    //Флаг того что был сделан запрос на сервер
    this.sendRequest = 0;
    //Количество принятых данных / запросов
    this.acceptedData = 0;
    //Контролы могут быть без имени
    this.controls = new Array();
    this.form = form;
    this.filters = {};
    this.sorts = {};
    this.group = null; //[];//группировка поле=порядок
    this.groupsumm = null; //{};//Сумма при группировке поле=тип(summ,count,avg,min,max)
    this.filteronce = null; //{};//Фильтр одного запроса поле=значение
    this.sortonce = null; //{};//Сортировка одного запроса поле=значение
    this.filterpermanent = null; //{};//Фильтр постоянный для запроса поле=значение
    this.sortpermanent = null; //{};//Сортировка постоянная для запроса поле=значение
    this.wf = null; //{};//Оконные функции для запроса
    this.details = new Array();
    //Указывается на форме
    this.sysinfo = null;
    this.isUnique = true;
    this.requestParams = {};
    this.addSysInfoParam = function(paramObj)
    {
        if(paramObj['parent'])
        {
            var ds = this.form.getDataSet(paramObj['parent']);
            if(ds)
                ds.addDetail(this.name);
        }
        this.sysinfo.params.push(paramObj);
    }
    //Действительное количество всей выборки без учета лимита
    var rowCount = 0;
    var rangePage = 0;
    var dataPosition = 0;
    this.needRotateData = false;

    /**
     *
     * @param dom
     */
    this.init = function(dom)
    {
        this.rotateData = {
            primary_field: D3Api.getProperty(dom, 'primary_field', false),
            columns_field: D3Api.getProperty(dom, 'columns_field', false),
            values_field: D3Api.getProperty(dom, 'values_field', false)
        }
        this.needRotateData = this.rotateData.columns_field;
    }
    if(dom)
        this.init(dom);

    /**
     *
     * @returns {boolean}
     */
    this.hasDetails = function()
    {
        return this.details.length > 0;
    }

    /**
     *
     * @param name
     */
    this.addDetail = function(name)
    {
        if (this.details.indexOf(name) == -1)
            this.details.push(name);
    }

    /**
     *
     * @param name
     */
    this.removeDetail = function(name)
    {
        var ind = this.details.indexOf(name);
        if (ind != -1)
            this.details.splice(ind,1);
    }

    /**
     *
     */
    this.destructor = function()
    {
        this.data = null;
        this.controls = null;
        this.form = null;
        this.filters = null;
        this.details = null;
        this.sorts = null;
        this.sysinfo = null;
        this.requestParams = null;

        delete this.name;
        delete this.data;
        delete this.controls;
        delete this.form;
        delete this.allResponse;
        delete this.dataHash;
        delete this.sendRequest;
        delete this.filters;
        delete this.sorts;
        delete this.details;

        this.destructorBase();
    }

    /**
     *
     * @param state
     */
    this.setUnique = function(state)
    {
        this.isUnique = state;
    }

    /**
     *
     * @param onsuccess
     * @param onerror
     * @param sync
     * @param force
     * @param details
     * @param repeatersRefresh
     */
    this.refresh = function(onsuccess,onerror,sync,force,details, repeatersRefresh)
    {
        if (this.callEvent('onbefore_refresh') === false) {
            return;
        }
        var _ext_ = this.getRequestData();
        this.callEvent('onprepare_ext',_ext_);
        var newReqUid= (this.isUnique)?D3Api.getUniqId('DS'):'notuinique';
        var params = this.sysinfo.getParams(this.name);
        var hashValues = '';
        for(var p in params)
        {
            if(params.hasOwnProperty(p)){
                hashValues += p+'='+((params[p] === undefined)?'':params[p])+'|';
            }

        }
        params._ext_ = _ext_;
        params._uid_ = newReqUid;
        var reqData = D3Api.mixin({
            type: 'DataSet',
            params: params
        },this.requestParams);
        if (this.dataHash && this.dataHash == MD5.hex_md5(hashValues) && !force)
        {
            this.dataHash = null;
            if (this.dataSilent)
            {
                this.dataSilent = false;
                this.reSetData();
            } else {
                this.callEvent('onafter_refresh');
            }
            //this.sendRequest = 0;
            return;
        }else if(this.dataHash && this.dataHash != MD5.hex_md5(hashValues))
        {
            //Данные с сервера пришли неконсистентные перезапрашиваем

        }/*else
        if(this.sendRequest>0 && this.allResponse != true)
            return;*/
        this.requestUid = newReqUid;
        this.dataHash = null;
        this.dataSilent = false;
        this.sendRequest++;
        if (details == undefined) details = true;
        this.form.startWaitControls(this.controls);
        if (this.hasDetails() && details)
        {
            this.form.beginRequest();
            this.form.sendRequest(this.name,reqData,sync,onsuccess,onerror);
            this.refreshDetails();
            this.form.endRequest();
        }else
            this.form.sendRequest(this.name,reqData,sync,onsuccess,onerror, repeatersRefresh);
    }

    /**
     *
     * @param mode
     * @param data
     * @param onsuccess
     * @param onerror
     * @param sync
     */
    this.refreshByMode = function(mode,data,onsuccess,onerror,sync)
    {
        this.callEvent('onbefore_refresh','mode',mode,data);
        var _ext_ = this.getRequestData();
        this.callEvent('onprepare_ext',_ext_);
        var params = this.sysinfo.getParams(this.name);
        params._ext_ = _ext_;
        params._uid_ = D3Api.getUniqId('dsm');
        params._mode_ = mode;
        params._mode_data_ = data;
        var reqData = D3Api.mixin({
            type: 'DataSet',
            params: params
        },this.requestParams);

        var reqObj = {};
        reqObj[this.name] = reqData;
        var name = this.name;
        var self = this;
        D3Api.requestServer({
            url: 'request.php',
            async: !sync,
            method: 'POST',
            urlData: this.form.formData.request,
            data: {request: D3Api.JSONstringify(reqObj)},
            onSuccess: function(res){
                self.clearParams();
                try
                {
                    var resObj = JSON.parse(res);
                }catch(e)
                {
                    if (onerror instanceof Function)
                        onerror.call(this,res,e);
                    D3Api.debug_msg('В ответе сервера: '+e.message);
                    return;
                }
                if(!D3Api.empty(resObj[name].error)){
                    if(onerror instanceof Function){
                        onerror.call(this,resObj[name],resObj[name].error);
                    }else if(D3Api.getOption('debug', 0) > 0){
                        D3Api.alert_msg(resObj[name].error);
                    }
                }
                else if (onsuccess instanceof Function)
                    onsuccess.call(this,resObj[name],resObj[name].data);
            },
            onError: function(e){
                self.clearParams();
                D3Api.debug_msg('В ответе сервера: '+e);
                if (onerror instanceof Function)
                    onerror.call(this,e);
            },
            contextObj: this.form
        });
    }

    /**
     *
     */
    this.refreshDetails = function()
    {
        for(var i = 0, c = this.details.length; i < c; i++)
        {
            this.form.refreshDataSet(this.details[i]);
        }
    }

    /**
     * Атрибут data содержит пары "свойство контрола":"поле данных" через ";",  например data="value:col1;caption:col2"
     * @param dom
     */
    this.addControl = function(dom)
    {
        this.form.addInControls(this.controls,dom);
    }

    /**
     *
     * @param cmpName
     * @param property
     * @param field
     * @param upper
     * @param condition
     * @param like
     * @param fkind
     */
    this.addFilterItem = function(cmpName,property,field,upper,condition,like,fkind)
    {
        this.filters[cmpName] = {p: property, f: field, u: upper, c: condition, l: like, fk: fkind, val: ''};
    }

    /**
     *
     * @param cmpName
     * @param field,
     * @param type
     */
    this.addSortItem = function(cmpName,field,type)
    {
        this.sorts[cmpName] = {
            f: field,
            val: '',
            type : function () {
                if(typeof type == 'object'){
                    if(('type' in type) && ('format' in type)){
                        return type.type+"|"+type.format
                    }else{
                        return '';
                    }
                }else if(typeof type == 'string'){
                    return type;
                }else{
                    return '';
                }
            }()
        };
    }

    /**
     *
     * @param page
     * @param amount
     * @param refresh
     * @param keyfield
     * @param count
     */
    this.setRange = function(page, amount, refresh, keyfield, count)
    {
        if(page === undefined && amount === undefined)
        {
            this.range = null;
        }
        page = page || 0;
        amount = amount || 10;

        this.range = {page: (page<0)?0:page, amount: (amount<0)?0:amount, keyfield: (keyfield === undefined)?1:keyfield, count: (count === undefined)?true:count};
        if(refresh){
            this.refresh();
        }
    }

    /**
     *
     * @returns {number}
     */
    this.getRangePage = function()
    {
        return rangePage;
    }

    /**
     *
     * @param field
     * @param value
     * @param refresh
     */
    this.setLocate = function(field, value, refresh)
    {
        if(field === undefined)
        {
            this.locate = null;
            return;
        }
        this.locate = {field: field, value: value};

        if(refresh)
            this.refresh();
    }

    /**
     *
     * @param field
     * @param order
     */
    this.addGroup = function(field,order)
    {
        if(field === undefined)
        {
            this.group = null;
            return;
        }
        this.group = this.group || [];

        this.group.push(field);
    }

    /**
     *
     * @param field
     * @param type
     * @param fixed
     */
    this.addGroupSumm = function(field,type,fixed)
    {
        if(field === undefined)
        {
            this.groupsumm = null;
            return;
        }
        this.groupsumm = this.groupsumm || {};

        fixed = fixed || 0;
        type = type || 'sum';
        type += '|'+fixed;
        this.groupsumm[field]=(this.groupsumm[field])?this.groupsumm[field]+';'+type:type;
    }

    /**
     *
     * @param field
     * @param value
     */
    this.addFilter = function(field,value)
    {
        if(field === undefined)
        {
            this.filteronce = null;
            return;
        }
        this.filteronce = this.filteronce || {};
        this.filteronce[field] = value;
    }

    /**
     *
     * @param field
     * @param value
     */
    this.addFilterPermanent = function(field,value)
    {
        if(field === undefined)
        {
            this.filterpermanent = null;
            return;
        }

        this.filterpermanent = this.filterpermanent || {};
        if(value === undefined && !D3Api.isUndefined(this.filterpermanent[field]))
        {
            this.filterpermanent[field] = null;
            delete this.filterpermanent[field];
        }
        this.filterpermanent[field] = value;
    }

    /**
     *
     * @param field
     * @param value
     */
    this.addSort = function(field,value)
    {
        if(field === undefined)
        {
            this.sortonce = null;
            return;
        }
        this.sortonce = this.sortonce || {};
        this.sortonce[field] = value;
    }

    /**
     *
     * @param field
     * @param value
     */
    this.addSortPermanent = function(field,value)
    {
        if(field === undefined)
        {
            this.sortpermanent = null;
            return;
        }

        this.sortpermanent = this.sortpermanent || {};
        this.sortpermanent[field] = value;
    }

    /**
     *
     * @param field
     * @param name
     */
    this.addWindowFunction = function(field, name) {
        if (!field || typeof name !== 'string' || !name) {
            return;
        }
        if (!this.wf) {
            this.wf = {};
        }
        if (!this.wf[field]) {
            this.wf[field] = [];
        }
        if (this.wf[field].indexOf(name) == -1) {
            this.wf[field].push(name);
        }
    };

    /**
     *
     * @returns {{}}
     */
    this.getRequestData = function()
    {
        var res = {};

        if(this.range)
            res.range = this.range;
        if(this.locate)
            res.locate = this.locate;
        if(this.group)
            res.group = this.group;
        if(this.groupsumm)
            res.groupsumm = this.groupsumm;
        if (this.wf) {
            res.wf = this.wf;
        }
        if(this.filterpermanent || this.filteronce)
        {
            res.filters = {};
            D3Api.mixin(res.filters,this.filterpermanent,this.filteronce);
        }
        if(this.sortpermanent || this.sortonce)
        {
            res.sorts = {};
            D3Api.mixin(res.sorts,this.sortpermanent,this.sortonce);
        }
        if(this.afilter)
        {
            res.afilter = {};
            var afilterctrl = this.afilter['afilterctrl'];
            if(this.form.controlExist(afilterctrl))
            {
                var val = this.form.getControlProperty(afilterctrl,'value');
                this.afilter['afilterval'] = val;
            }else{
                this.afilter['afilterval'] = '';
            }
            if(this.form.controlExist(afilterctrl+'_afilter_reg_use'))
            {
                var afilterreguse = this.form.getControlProperty(afilterctrl+'_afilter_reg_use','value');
                this.afilter['afilterreguse'] = afilterreguse;
            }
            res.afilter = this.afilter;
        }
        for(var f in this.filters)
        {
            if(!this.filters.hasOwnProperty(f)){
                continue;
            }
            var fltr = this.filters[f];
            if(this.form.controlExist(f))
            {
                var val = this.form.getControlProperty(f,fltr.p);
                fltr.val = val;
            }else
                val = fltr.val;

            var extInf = '';
            if (val)
            {
                if (val == '()' || val == '!()') {
                    res.filters = res.filters || {};
                    res.filters[this.filters[f].f + extInf] = val;
                    continue;
                }
                switch (fltr.fk)
                {
                    case 'activedate':
                        var fields = fltr.f.split(';');

                        res.filters = res.filters || {};
                        res.filters[fields[0] + ';D'] = ']' + val;
                        res.filters[fields[1] + ';D'] = '/[' + val;
                        break;
                    case 'perioddate':
                    case 'periodnumb':
                        if(f.search(/_BEGIN$/)>0)
                            extInf +=';B';
                        else if(f.search(/_END$/)>0)
                            extInf +=';E';
                        res.filters = res.filters || {};
                        res.filters[this.filters[f].f+extInf] = val;
                        break;
                    case 'unitmulti':
                        extInf +=';M';
                        res.filters = res.filters || {};
                        res.filters[this.filters[f].f+extInf] = val;
                        break;
                    case 'multi_hier':
                        break;
                    case 'text_af': /*cmpAdditionalFilter*/
                        res.filters = res.filters || {};
                        res.filters[this.filters[f].f+extInf] = '##'+((fltr.u==true)?'^':'')+val.trim();
                        break;
                    case 'text_ext':/*filterkind="text_ext"*/
                        /**
                         * в компоненте AdditionalFilter, а также при указанном filterkind="text_ext" в фильтре колонки проверяется значение фильтра:
                         * если первый символ = "$", то фильтр работает по стандартому выражению LIKE %<значение>%
                         * если первый символ = "&", то используется т.н. сжатый фильтр (regexp_replace(upper(<field>), '[[:punct:]]|[[:space:]]|[[:cntrl:]]|[[:blank:]]|№', '', 'g')=regexp_replace(upper(<значение фильтра>), '[[:punct:]]|[[:space:]]|[[:cntrl:]]|[[:blank:]]|№', '', 'g'))
                         * если присутствуют символы "?" или "*", то они заменяются на "_" и "%" соответсвенно и работают по стандартому выражению LIKE
                         */
                        val=val.trim();
                        if(val.indexOf("$") == 0) {
                            val = val.slice(1);
                            val= '^'+val.replace(new RegExp('', 'g'), '%'+'');
                            res.filters = res.filters || {};
                            res.filters[this.filters[f].f+extInf] = val;
                            break;
                        }else if(val.indexOf("&") == 0) {
                            res.filters = res.filters || {};
                            res.filters[this.filters[f].f+extInf] = '#'+val.slice(1);
                            break;
                        }
                        else if(val.indexOf("=") == 0) {
                            res.filters = res.filters || {};
                            res.filters[this.filters[f].f+extInf] = '^'+val;
                            break;
                        }else if ((val.indexOf("*") != (-1)) || (val.indexOf("?") != (-1))) {
                            if (val.indexOf("?") != (-1)) {
                                val = val.replace(new RegExp("[?]", 'g'), "_");
                            }
                            if (val.indexOf("*") != (-1)) {
                                val = val.replace(new RegExp("[*]", 'g'), "%");
                            }
                            res.filters = res.filters || {};
                            res.filters[this.filters[f].f+extInf] = '^'+val;
                            break;
                        }else{
                            fltr.l = 'both';
                        }
                    default:
                        fltr.fk = fltr.fk || 'text';
                        var addVal = '%';
                        if (fltr.l != 'none' && (fltr.fk=='text' || fltr.fk=='text_ext')){
                            switch (fltr.l){
                                case 'left' :val= '%'+val;
                                    break;
                                case 'right' :val= val+'%';
                                    break;
                                case 'both' :val= '%'+val+'%';
                                    break;
                            }
                            addVal = '';
                        }
                        if (fltr.c != 'none'){
                            switch (fltr.c){
                                case 'like':
                                    if(fltr.fk=='text')
                                        val=val+addVal;
                                    else
                                        val='='+val;
                                    break;
                                case 'mlike':
                                    if(fltr.fk=='text')
                                        val='+'+val;
                                    else
                                        val='='+val;
                                    break;
                                case 'gt':val='>'+val;
                                    break;
                                case 'lt':val='<'+val;
                                    break;
                                case 'gteq':val='['+val;
                                    break;
                                case 'lteq':val=']'+val;
                                    break;
                                case 'eq':val='='+val;
                                    break;
                                case 'neq':val='!'+val;
                                    break;
                            }
                            addVal = '';
                        }else if(fltr.fk && fltr.fk!='text'&& fltr.fk!='text_ext')
                        {
                            val='='+val;
                        }
                        if (fltr.u=='true' && (fltr.fk=='text' || fltr.fk=='text_ext')){
                            val='^'+val+addVal;
                        }

                        res.filters = res.filters || {};
                        if (res.filters[this.filters[f].f + extInf]) {
                            res.filters["add_fltr_" + this.filters[f].f + extInf] = val;
                        } else {
                            res.filters[this.filters[f].f + extInf] = val;
                        }
                }
            }
        }
        for(var s in this.sorts)
        {
            if(!this.sorts.hasOwnProperty(s)){
                continue;
            }
            if(res.sorts && res.sorts[this.sorts[s]] !== undefined)
            {
                continue;
            }
            if(this.form.controlExist(s))
            {
                var val = this.form.getControlProperty(s,'value');
                this.sorts[s].val = val;
            }else
                val = this.sorts[s].val;
            if (val)
            {
                res.sorts = res.sorts || {};
                res.sorts[this.sorts[s].f] = val;
                if('type' in this.sorts[s] && !D3Api.empty(this.sorts[s]['type'])){
                    res.sortsType = res.sortsType || {};
                    res.sortsType[this.sorts[s].f] = this.sorts[s]['type'];
                }
            }
        }

        return res;
    }

    /**
     *
     * @param res
     * @param repeatersRefresh
     */
    this.setResponse = function(res, repeatersRefresh)
    {
        function setResInfo(res) {
            if (this.needRotateData)
                rotateData(res.data, this.rotateData.primary_field, this.rotateData.columns_field, this.rotateData.values_field);

            if(res.rowcount_error && D3Api.getOption('debug', 0) > 0){
                D3Api.alert_msg(res.rowcount_error+'rowcount_error');
            }
            if(res.page_error && D3Api.getOption('debug', 0) > 0){
                D3Api.alert_msg(res.page_error+'page_error');
            }
            if(res.locate_error && D3Api.getOption('debug', 0) > 0){
                D3Api.alert_msg(res.locate_error+'locate_error');
            }
            rowCount = res.rowcount || res.data.length;
            rangePage = res.page;
            dataPosition = (res.position === undefined) ? dataPosition : res.position;

            this.clearParams();
        }
        if (this.sendRequest > 0)
        {
            this.sendRequest--;
            this.dataSilent = false;
            //if(this.sendRequest === 0 || this.allResponse) {
                setResInfo.call(this,res);
                this.setData(res.data, undefined, repeatersRefresh);
            //}
        }else if(this.sendRequest === 0)//Данных не ждали и не запрашивали
        {
            this.dataSilent = true;
            setResInfo.call(this,res);
            this.setDataSilent(res.data);
        }
    }

    /**
     *
     */
    this.clearParams = function()
    {
        //Обнуляем переменные
        this.locate = null;
        this.filteronce = null;
        this.sortonce = null;
        this.group = null;
        this.groupsumm = null;
    }

    /**
     *
     * @param data
     */
    this.reSetData = function()
    {
        this.setData(this.data);
    }

    /**
     *
     * @param data
     * @param position
     */
    this.setDataSilent = function(data)
    {
        this.data = data;
    }

    
    /**
     * массив объектов, где имена параметров колонки, например [{col1: 1, col2: 2},{col1: 3, col2: 4}]
     * @param data
     * @param position
     * @param repeatersRefresh
     */
    this.setData = function(data,position, repeatersRefresh)
    {
        if (position == undefined) position = dataPosition;
        this.data = data;
        this.acceptedData++;
        this.callEvent('onrefresh',data);

        this.setDataPosition(position);
        this.uidData = D3Api.getUniqId();
        if(repeatersRefresh !== false){
            this.callEvent('ondata_ready',data);
            this.form.stopWaitControls(this.controls);
            this.callEvent('onafter_refresh');
        }

        //this.form.resize();
    }

    /**
     *
     * @param pos
     */
    this.setDataPosition = function(pos)
    {
        this.form.setControlsData(this.controls,this.data[pos]||{});
        this.callEvent('ondatapos_change',pos);
    }

    /**
     *
     * @returns {number}
     */
    this.getCount = function()
    {
        return this.data.length;
    }

    /**
     *
     * @returns {number}
     */
    this.getAllCount = function()
    {
        return rowCount;
    }

    /**
     *
     * @param position
     * @returns {*}
     */
    this.getPosition = function()
    {
        return dataPosition;
    }
    this.getData = function(position)
    {
        position = (position === undefined)?dataPosition:position;

        return this.data[position];
    }
    function rotateData(data,primaryField,columnsField,valuesField)
    {
        //Переворот данных
        if (columnsField && valuesField)
        {
            var index = 0;
            if (primaryField)
            {
                var ndata = {};
                for(var i = 0; i < data.length; i++)
                {
                    var key = data[i][primaryField];
                    var field = data[i][columnsField];
                    var value = data[i][valuesField];
                    if (!ndata[key])
                    {
                        ndata[key] = {data: data[index]};
                        ndata[key].data[primaryField] = key;
                        index++;
                    }
                    ndata[key].data[field] = value;
                }
                data.splice(index);
            }else
            {   //Одна строка
                for(var i = 0; i < data.length; i++)
                {
                    var tmp = data[i];
                    data[i] = {};
                    data[0][tmp[columnsField]] = tmp[valuesField]
                }
                data.splice(1);
            }
        }else if (columnsField) //Поворот всех данных строки -> столбцы
        {
            var dataNew = new Array();
            var ParName ="";
            var j;
            for (var i=0; i<data.length;i++)
            {
                j=0;
                for (var z in data[i])
                {
                    if(!data[i].hasOwnProperty(z) || z == columnsField){
                        continue;
                    }
                    ParName = data[i][columnsField];
                    if(dataNew[j] == null) dataNew[j] = {};
                    dataNew[j][ParName] = data[i][z];
                    j++;
                }
            }
            data.splice(0);
            for(var d in data){
                if(data.hasOwnProperty(d)){
                    dataNew[d] = data[d];
                }
            }
            data = dataNew;
        }
    }
}
/**
 * @class
 * @param form
 * @param name
 * @param dom
 * @constructor
 */
D3Api.D3Action = function(form,name,dom)
{
    D3Api.D3Base.call(this);
    this.name = name;
    this.form = form;
    this.data = {};
    this.dataHash = '';
    this.checkPointHash = null;
    //Флаг того что был сделан запрос на сервер
    this.sendRequest = false;
    this.datadest = new Array();
    
    this.sysinfo = null;
    this.requestParams = {};
    /**
     *
     * @param paramObj
     */
    this.addSysInfoParam = function(paramObj)
    {
        if(paramObj['put'])
        {
            switch (paramObj['srctype'])
            {
                case 'ctrl':
                        var pf = paramObj['src'].split(':');
                        if (pf.length > 1 || paramObj['property'])
                            this.addControl(pf[0],paramObj['property'] || pf[1],paramObj['put']);
                        else
                            this.addControl(pf[0],'value',paramObj['put']);
                    break;
                case 'var':
                        this.addVar(paramObj['src'],paramObj['put'],paramObj['property'],paramObj['global']);
                    break;
            }
        }else
            this.sysinfo.params.push(paramObj);
    }

    /**
     *
     * @param paramObj
     */
    this.removeSysInfoParam = function(paramObj)
    {
        var params =this.sysinfo.params;
        for(var i=0;i<params.length;i++)
        { 
            if ((params[i].get==paramObj['get'])&&(params[i].src==paramObj['src'])&&(params[i].srctype==paramObj['srctype'])) this.sysinfo.params.splice(i,1);
        }
    }

    /**
     *
     * @param dom
     */
    this.init = function(dom)
    {
    }
    if(dom)
        this.init(dom);
    
    /**
     *
     */
    this.destructor = function()
    {
        this.data = null;
        this.datadest = null;
        this.form = null;
        this.sysinfo = null;
        this.requestParams = null;
        
        delete this.name;
        delete this.data;
        delete this.datadest;
        delete this.form;
        delete this.dataHash;
        delete this.sendRequest;
        
        this.destructorBase();
    }

    /**
     *
     * @param onsuccess
     * @param onerror
     * @param sync
     * @param force
     */
    this.execute = function(onsuccess,onerror,sync,force)
    {
        this.callEvent('onprepare_params');
        var params = this.sysinfo.getParams();
        var reqData = D3Api.mixin({
            type: 'Action',
            params: params
        },this.requestParams);
        this.callEvent('onbefore_execute');
        for(var i = 0, c = this.datadest.length; i < c; i++)
        {
            var dest = this.datadest[i];            
            if (dest.type == 'ctrl')
            {
                D3Api.BaseCtrl.callMethod(this.form.getControl(dest.name),'startWait');
            }
        }
        this.form.sendRequest(this.name,reqData,sync,onsuccess,onerror);
    }

    /**
     *
     * @param save
     * @returns {*}
     */
    this.checkPoint = function(save)
    {
        save = (save === undefined)?true:save;
        var hash = D3Api.JSONstringify(this.sysinfo.getParams(this.name),true);
        if(save)
            this.checkPointHash = hash;
        return hash;
    }

    /**
     *
     * @returns {boolean}
     */
    this.check = function()
    {
        return this.checkPointHash != this.checkPoint(false);
    }

    /**
     *
     * @param name
     * @param property
     * @param field
     */
    this.addControl = function(name,property,field)
    {
        this.datadest.push({type: 'ctrl', name: name, prop: property, field:field});
    }

    /**
     *
     * @param name
     * @param field
     * @param property
     * @param global
     */
    this.addVar = function(name,field,property,global)
    {
        this.datadest.push({type: 'var', name: name, field:field, property: property, global: global});
    }

    /**
     *
     */
    this.reSetData = function()
    {
        this.setData(this.data);
    }

    /**
     *
     * @param data
     */
    this.setDataSilent = function(data)
    {
        this.data = data;
    }
    /**
     * @example Объект {field1: 1,field2: 2}
     * @param {object} data
     */
    this.setData = function(data)
    {
        this.data = data;
        this.callEvent('onexecute');
        for(var i = 0, c = this.datadest.length; i < c; i++)
        {
            var dest = this.datadest[i];
            var v = this.data[dest.field]; 
            if (v === undefined)
                continue;
            
            switch (dest.type)
            {
                case 'var':
                        var DESTOBJ = this.form;
                        if(dest.global === 'true')
                            DESTOBJ = D3Api;
                        if(dest.property)
                        {
                            var obj = DESTOBJ.getVar(dest.name) || {};
                            obj[dest.property] = v;
                            DESTOBJ.setVar(dest.name,obj);
                        }else
                            DESTOBJ.setVar(dest.name,v);
                    break;
               case 'ctrl':
                        D3Api.BaseCtrl.callMethod(this.form.getControl(dest.name),'stopWait');
                        if(Array.isArray(v)){
                            var ctrl = this.form.getControl(dest.name);
                            if(ctrl.D3Repeater){
                                ctrl.D3Repeater.setData(v);
                                continue;
                            }
                        }
                        this.form.setControlProperty(dest.name,dest.prop,v);
                    break;
            }
        }
        
        this.callEvent('onafter_execute');
        //this.form.resize();
    }

    /**
     *
     * @returns {{}|null}
     */
    this.getData = function()
    {
        return this.data;
    }
}
/**
 * @class
 * @param form
 * @param name
 * @param dom
 * @constructor
 */
D3Api.D3Module = function(form,name,dom){
    D3Api.D3Base.call(this);
    this.name = name;
    this.form = form;
    this.requestParams = {};
    this.sysinfo = null;
    this.data = {};
    this.datadest = [];
    
    /**
     *
     * @param dom
     */
    this.init = function(dom){

    }
    if(dom){
        this.init(dom);
    }

    /**
     *
     */
    this.destructor = function(){
        this.data = null;
        this.name = null;
        this.form = null;
        this.requestParams = null;
        this.sysinfo = null;
        this.datadest = null;

        delete this.name;
        delete this.form;
        delete this.requestParams;
        delete this.sysinfo;
        delete this.datadest;
        delete this.data;

        this.destructorBase();
    }

    /**
     *
     * @param onsuccess
     * @param onerror
     * @param sync
     * @param force
     */
    this.execute = function(onsuccess,onerror,sync,force){
        var params = this.sysinfo.getParams();
        var reqData = D3Api.mixin({
            type: 'Module',
            params: params
        },this.requestParams);
        this.form.sendRequest(this.name,reqData,sync,onsuccess,onerror);
    }

    /**
     *
     * @param paramObj
     */
    this.addSysInfoParam = function(paramObj){
        if(paramObj['put'])
        {
            switch (paramObj['srctype'])
            {
                case 'ctrl':
                    var pf = paramObj['src'].split(':');
                    if (pf.length > 1 || paramObj['property'])
                        this.addControl(pf[0],paramObj['property'] || pf[1],paramObj['put']);
                    else
                        this.addControl(pf[0],'value',paramObj['put']);
                    break;
                case 'var':
                    this.addVar(paramObj['src'],paramObj['put'],paramObj['property'],paramObj['global']);
                    break;
            }
        }else{
            this.sysinfo.params.push(paramObj);
        }

    }

    /**
     *
     * @param paramObj
     */
    this.removeSysInfoParam = function(paramObj)
    {
        var params =this.sysinfo.params;
        for(var i=0;i<params.length;i++)
        {
            if ((params[i].get==paramObj['get'])&&(params[i].src==paramObj['src'])&&(params[i].srctype==paramObj['srctype'])) this.sysinfo.params.splice(i,1);
        }
    }

    /**
     *
     * @param name
     * @param property
     * @param field
     */
    this.addControl = function(name,property,field)
    {
        this.datadest.push({type: 'ctrl', name: name, prop: property, field:field});
    }

    /**
     *
     * @param name
     * @param field
     * @param property
     * @param global
     */
    this.addVar = function(name,field,property,global)
    {
        this.datadest.push({type: 'var', name: name, field:field, property: property, global: global});
    }

    /**
     *
     * @param data
     */
    this.setData = function(data)
    {
        this.data = data;
        for(var i = 0, c = this.datadest.length; i < c; i++)
        {
            var dest = this.datadest[i];
            var v = this.data[dest.field];
            if (v === undefined)
                continue;

            switch (dest.type)
            {
                case 'var':
                    var DESTOBJ = this.form;
                    if(dest.global === 'true')
                        DESTOBJ = D3Api;
                    if(dest.property)
                    {
                        var obj = DESTOBJ.getVar(dest.name) || {};
                        obj[dest.property] = v;
                        DESTOBJ.setVar(dest.name,obj);
                    }else
                        DESTOBJ.setVar(dest.name,v);
                    break;
                case 'ctrl':
                    D3Api.BaseCtrl.callMethod(this.form.getControl(dest.name),'stopWait');
                    this.form.setControlProperty(dest.name,dest.prop,v);
                    break;
            }
        }
    }

    /**
     *
     * @returns {{}|null}
     */
    this.getData = function()
    {
        return this.data;
    }
};
D3Api.D3Repeater = function(form,dom,parent,dataset)
{
    var nofragment = false;//вставлять в дом сразу после создание клона
    if(!D3Api.empty(parent) || (D3Api.hasProperty(dom,'nofragment') && D3Api.getProperty(dom,'nofragment') == 'true')){
        nofragment = true;
    }
    var fragmentElements = [];
    D3Api.D3Base.call(this);
    //Ссылка на родителя
    this.name = D3Api.getProperty(dom,'repeatername');
    D3Api.addClass(dom,'repeatername_'+this.name);
    this.actionData = false;
    this.rootParent = null;
    this.parent = parent;
    this.childs = new Array();
    if (parent)
    {
        parent.addChild(this);
    }
    this.DOM = dom;
    this.DOM.D3Repeater = this;
    D3Api.setProperty(dom,'isD3Repeater',true);
    this.targetDOM = null;
    this.form = form;
    this.uniqId = D3Api.getUniqId('d3repeater');
    this.DOM.id = this.uniqId;
    this.controls = new Array();
    this.keyField = D3Api.getProperty(dom,'keyfield');
    this.noRepeat = D3Api.getBoolean(D3Api.getProperty(dom,'norepeat',false));
    this.standalone = D3Api.getBoolean(D3Api.getProperty(dom,'standalone',null));
    this.emptydata = D3Api.getProperty(dom,'emptydata',false);
    var simpleClones = [];
    this.emptydataparent = false;
    if(this.emptydata)
    {
        try
        {
            var json = this.emptydata.replace(/'/g,'"');
            this.emptydata = D3Api.JSONparse(json);
            for(var f in this.emptydata)
            {
                if(!this.emptydata.hasOwnProperty(f)){
                    continue;
                }
                var v = this.emptydata[f];
                if(typeof(v) == 'string' && v.indexOf('@parent.') > -1)
                {
                    this.emptydataparent = this.emptydataparent || {};
                    this.emptydataparent[f] = v.split('.')[1];
                }
            }
        }catch(e)
        {
            D3Api.debug_msg('Ошибка при парсе emptydata репитера '+this.name+': '+this.emptydata);
            this.emptydata = false;
        }
    }
    this.detail = D3Api.getProperty(dom,'detail',null);
    this.detail = this.detail !== null?D3Api.getBoolean(this.detail):null;
    this.async = +D3Api.getProperty(dom,'async',0);
    this.parentFields = new Array();
    this.conditions = null;
    this.parentKeyFields = {};
    this.changedData = {
        add : {},
        upd : {},
        del : {}
    }
    this.isSimple = (D3Api.hasProperty(dom,'simple') && !parent);
    this.simpleType = D3Api.getProperty(dom,'simple');
    this.repeatCount = D3Api.getProperty(dom,'repeat');
    var pf = D3Api.getProperty(dom,'parent');
    if (pf)
    {
        pf = pf.split(';');
        for(var i = 0, c = pf.length; i < c; i++)
        {
            var nf = pf[i].split(':');
            if (nf.length > 1)
            {
                var fields = [];
                var rep = form.getRepeater(nf[0]);
                for(var fi = 1, fc = nf.length; fi < fc; fi++)
                {
                    var pcf = nf[fi].split('=');
                    if(pcf.length > 1)
                    {
                        var isfunc = pcf[1][0] == '@';
                        fields.push({parent: pcf[0], parentKey: rep.keyField, child: (isfunc)?pcf[1].substr(1):pcf[1], isfunc: isfunc});
                        rep.setParentKeyField(pcf[0]);
                    }else
                        fields.push({parent: null, parentKey: rep.keyField, child: pcf[0]});
                }
                this.parentFields.push({rep:nf[0],fields: fields});
            }
        }
    }
    pf = null;
    var cnd = D3Api.getProperty(dom,'condition');
    if (cnd)
    {
        this.conditions = {};
        cnd = cnd.split(';');
        for(var i = 0, c = cnd.length; i < c; i++)
        {
            var cndf = cnd[i].split('=');
            this.conditions[cndf[0]] = {
                value: (cndf[1]===undefined)?null:(cndf[1][0]=='@'?cndf[1].substr(1):cndf[1]),
                isfunc: cndf[1] && cndf[1][0]=='@'
            }

        }
    }
    cnd = null;

    this.distinct = D3Api.getProperty(dom,'distinct',null);

    if(!D3Api.getBoolean(D3Api.getProperty(dom,'repeatershow','false')))
        D3Api.showDom(this.DOM,false);

    var prop = null;
    if (prop = D3Api.getProperty(dom, 'onbefore_repeat')){
        this.addEvent('onbefore_repeat', form.execDomEventFunc(dom, {func: prop, args: 'container'}));
    }
    if (prop = D3Api.getProperty(dom, 'onafter_repeat')){
        this.addEvent('onafter_repeat', form.execDomEventFunc(dom, {func: prop, args: 'container'}));
    }
    if (prop = D3Api.getProperty(dom, 'onbefore_clone')){
        this.addEvent('onbefore_clone', form.execDomEventFunc(dom, {func: prop, args: 'data'}));
    }
    if (prop = D3Api.getProperty(dom, 'onafter_clone')){
        this.addEvent('onafter_clone', form.execDomEventFunc(dom, {func: prop, args: 'data,clone'}));
    }
    if (prop = D3Api.getProperty(dom, 'onclone_remove')){
        this.addEvent('onclone_remove', form.execDomEventFunc(dom, {func: prop, args: 'clone'}));
    }


    this.destructor = function()
    {
        if(eventDataReadyUid)
        {
            this.dataSet.removeEvent('ondata_ready',eventDataReadyUid);
        }
        this.parent = null;
        this.childs = null;
        this.dataSet = null;
        this.dataSetUid = null;
        this.DOM = null;
        this.targetDOM = null;
        this.form = null;
        this.controls = null;
        this.parentFields = null;
        this.conditions = null;
        this.changedData = null;
        this.distinct = null;
        this.dataChild = null;
        this.childKeys = null;
        this.currentData = null;
        this.rootParent = null;
        this.emptydata = null;

        delete this.parent;
        delete this.childs;
        delete this.dataSet;
        delete this.dataSetUid;
        delete this.DOM;
        delete this.targetDOM;
        delete this.form;
        delete this.controls;
        delete this.parentFields;
        delete this.conditions;
        delete this.changedData;
        delete this.distinct;

        for(var i = 0,len = simpleClones.length ; i < len ; i++){
            clearTimeout(simpleClones[i]);
        }
        this.destructorBase();
    }
    this.setAsync = function (async) {
        this.async = +async || 0;
    };
    this.setParentKeyField = function(field,remove)
    {
        remove = remove || false;
        if(remove)
        {
            this.parentKeyFields[field] = undefined;
            delete this.parentKeyFields[field];
        }else
            this.parentKeyFields[field] = true;
    }
    this.addControl = function(dom)
    {
        this.form.addInControls(this.controls,dom);
    }
    this.addChild = function(repeater)
    {
        repeater.rootParent = this.rootParent || this;
        if(repeater.detail === null)
            repeater.detail = true;
        this.childs.push(repeater)
    }
    this.setTargetDom = function(dom)
    {
        if(!dom && this.form.currentContext)
        {
            var dom = D3Api.getDomBy(this.form.currentContext, '#'+this.uniqId+'[repeatername="'+this.name+'"]');

            //fix safari selector # -> []
            if (!dom) {
                dom = D3Api.getDomBy(this.form.currentContext, '[id="'+this.uniqId+'"][repeatername="'+this.name+'"]');
            }

            if(!dom)
                return;
        }
        this.targetDOM = dom || this.DOM;
    }
    this.setData = function(data)
    {
        if(!this.dataSet || !(this.dataSet instanceof D3Api.D3DataSet))
            this.dataSet = {data: data, uidData: D3Api.getUniqId()};

        if(this.isSimple || this.rootParent && this.rootParent.isSimple)
        {
            this.prepareData();

            var rP = this.rootParent || this;

            rP.checkPrepareData() &&  rP.simpleRepeat();
        }else
            this.repeat();
    }

    this.dataSet = null;
    this.dataSetUid = null;
    if(!D3Api.hasProperty(dom, 'nodataset'))
        this.dataSet = dataset;
    var eventDataReadyUid = null;
    if (!D3Api.hasProperty(dom, 'onlycreate') && this.dataSet)
    {
        if(this.standalone)
            this.dataSet.allResponse = true;
        eventDataReadyUid = this.dataSet.addEvent('ondata_ready',D3Api.bindThis(this.setData,this));
    }

    var distinctData = {};
    this.repeat = function(forceRepeat,containerDOM,innerStart,clCount)
    {
        fragmentElements = [];
        if(this.detail === false && containerDOM && !innerStart)
            return;

        if(this.standalone && !this.form.currentContext)
        {
            return;
        }

        var topLevel = (!this.detail && !containerDOM) || innerStart;

        if(!innerStart)
        {
            if(!forceRepeat && !containerDOM && this.dataSet)
            {
                if(this.dataSetUid == this.dataSet.uidData)
                    return;
            }
            if(this.noRepeat && !forceRepeat)
                return;
            //if (this.parent && (this.parent.clones().length == 1) && ((parent && this.parent != parent) || (!parent && this.parent)))
            //    return;

            //Удаляем всех своих клонов
            this.targetDOM = null;
            this.removeAllClones(containerDOM);
            //Если больше одного уровня вложенности можем потерять изменения при замкнутом контексте на клон
            var tmpCntxt = this.form.currentContext;
            this.form.currentContext = null;
            if(this.clonesCount() == 0)
            {
                this.changedData = {
                    add : {},
                    upd : {},
                    del : {}
                }
            }
            this.form.currentContext = tmpCntxt;
            var oldFilter;
            var clCount = clCount || 0;
            containerDOM = containerDOM || this.form.DOM;
            if(this.standalone)
            {
                containerDOM = this.form.currentContext;
            }
            distinctData = {};
            if(!this.dataSet)
                return;
            if (this.parent && this.parentFields.length <= 0 && containerDOM.querySelectorAll('#'+this.DOM.id+':not([isrepeat])').length <=0 )
            {
                return;
            }
            this.dataSetUid = this.dataSet.uidData;
            if (this.callEvent('onbefore_repeat',containerDOM) === false)
                return;
        }
        var self = this;
        for(var i = innerStart || 0, c = this.dataSet.data.length; i < c; i++)
        {
            if(this.distinct)
            {
                if(distinctData[this.dataSet.data[i][this.distinct]])
                    continue;
                distinctData[this.dataSet.data[i][this.distinct]] = true;
            }
            if (this.conditions)
            {
                var next = false;
                for(var cnd in this.conditions)
                {
                    if(!this.conditions.hasOwnProperty(cnd)){
                        continue;
                    }
                    if(this.conditions[cnd].isfunc)
                    {
                        if(!this.form.callFunction(this.conditions[cnd].value,cnd,this.dataSet.data[i]))
                        {
                            next = true;
                            break;
                        }
                        continue;
                    }
                    if (this.dataSet.data[i][cnd] != this.conditions[cnd].value)
                    {
                        next = true;
                        break;
                    }
                }
                if (next)
                {
                    if(this.distinct)
                    {
                        distinctData[this.dataSet.data[i][this.distinct]] = false;
                    }
                    continue;
                }
            }
            var filter = '';
            if (this.parentFields.length > 0)
            {
                filter = [];
                for(var pi = 0, pc = this.parentFields.length; pi < pc; pi++)
                {
                    var selector = '.repeatername_'+this.parentFields[pi].rep;
                    for(var fi = 0, fc = this.parentFields[pi].fields.length; fi < fc; fi++)
                    {
                        if(this.parentFields[pi].fields[fi].parent)
                        {
                            var value;
                            if(this.parentFields[pi].fields[fi].isfunc)
                            {
                                value = this.form.callFunction(this.parentFields[pi].fields[fi].child,this.parentFields[pi].fields[fi].parent,this.dataSet.data[i]);
                            }else
                                value = this.dataSet.data[i][this.parentFields[pi].fields[fi].child];
                            selector += '.'+(this.parentFields[pi].fields[fi].parent+'_keyvalue'+value).replace(/\./g,'_');
                        }else
                            selector += '.repkeyvalue'+(''+this.dataSet.data[i][this.parentFields[pi].fields[fi].child]).replace(/\./g,'_');
                    }
                    filter.push(selector);
                }
                filter = filter.join(' ')+' ';
            }

            if (oldFilter != filter){
                var rptrs = containerDOM.querySelectorAll(filter+'#'+this.DOM.id+':not([isrepeat])');// TODO переделать onafter_refresh, на onafter_repeat например комбик
            }

            if (rptrs.length > 0)
                clCount++;
            else
            {
                if(this.distinct)
                {
                    distinctData[this.dataSet.data[i][this.distinct]] = false;
                }
            }

            for(var ri = 0, rc = rptrs.length; ri < rc; ri++)
            {
                this.targetDOM = rptrs[ri];

                addClone.call(this,this.dataSet.data[i],undefined,false, !nofragment );
            }
            oldFilter = filter;
            if(this.repeatCount > 0 && clCount >= this.repeatCount)
                break;

            if(this.async && topLevel && i > 0 && (innerStart === undefined || +innerStart>=1)  && i % this.async == 0)
            {
                insertFragmentElements();
                setTimeout(function(){
                    self.repeat(forceRepeat,containerDOM,++i,clCount)
                },0);
                return;
            }

        }
        insertFragmentElements();
        //Empty Data

        if(this.emptydata && clCount == 0)
        {
            var filter = '';
            if (this.parentFields.length > 0)
            {
                filter = [];
                for(var pi = 0, pc = this.parentFields.length; pi < pc; pi++)
                {
                    var selector = '.repeatername_'+this.parentFields[pi].rep;
                    filter.push(selector);
                }
                filter = filter.join(' ')+' ';
            }
            var rptrs = containerDOM.querySelectorAll(filter+'#'+this.DOM.id+':not([isrepeat])');
            for(var ri = 0, rc = rptrs.length; ri < rc; ri++)
            {
                this.targetDOM = rptrs[ri];
                if(this.emptydataparent)
                {
                    for(var f in this.emptydataparent)
                    {
                        if(!this.emptydataparent.hasOwnProperty(f)){
                            continue;
                        }
                        var parentclonedom = this.form.getClone(this.targetDOM);
                        if(parentclonedom && parentclonedom.clone)
                            this.emptydata[f] = parentclonedom.clone.data[this.emptydataparent[f]];
                    }
                }
                addClone.call(this,this.emptydata,undefined,false);
            }
        }
        this.callEvent('onafter_repeat',containerDOM);
    }
    function insertFragmentElements(){
        for(var remFragment = fragmentElements.splice(0, 1);remFragment && remFragment.length > 0; remFragment = fragmentElements.splice(0, 1)){
            remFragment[0].TargetElement.parentNode.insertBefore(remFragment[0].TargetFragment,remFragment[0].TargetElement)
        }
    }
    this.addClone = function(data,selfDOM)
    {
        data = data || {};
        this.setTargetDom();
        return addClone.call(this,data,selfDOM,true);
    }
    function addClone(data,selfDOM,byUser,noInsertClone /** недобавлять клон в основной документ. **/)
    {
        var targetDOM = (selfDOM)?this.DOM:((this.targetDOM)?this.targetDOM:this.DOM);
        this.hasClones = true;
        if (this.callEvent('onbefore_clone',data) === false){
            return;
        }

        var cl_dom = this.DOM.cloneNode(true);
        D3Api.removeProperty(cl_dom,'isD3Repeater');
        D3Api.removeProperty(cl_dom, 'dataset');
        this.form.clearEvents('oninit');
        var cl_uid = D3Api.getUniqId('cl');
        cl_dom.clone = {data: data, uid: cl_uid};
        this.parseClone(cl_dom,undefined,cl_uid);
        if(!noInsertClone){
            targetDOM && targetDOM.parentNode.insertBefore(cl_dom,targetDOM);
        }else{

            /** Корневой репитер. все дочерние клоны будут во фрагменте. **/
            var isAddTempFragment = true;
            var currfragment = false;
            for(var indxFrm = 0 ; indxFrm < fragmentElements.length ; indxFrm++){
                if(fragmentElements[indxFrm].TargetElement === targetDOM){
                    currfragment = fragmentElements[indxFrm];
                    isAddTempFragment = false;
                    break;
                }
            }

            if(!currfragment){
                var len = fragmentElements.push({
                    TargetElement:this.targetDOM,
                    TargetFragment:document.createDocumentFragment()
                })
                currfragment = fragmentElements[len - 1];
            }
            if(currfragment){
                if(this.parent){
                    if(isAddTempFragment){
                        currfragment.TargetFragment.appendChild(cl_dom);
                    }else{
                        //добавляем перед шаблоном
                        var templ = currfragment.TargetFragment.childNodes.length - 1;
                        currfragment.TargetFragment.insertBefore(cl_dom,currfragment.TargetFragment.childNodes[templ]);
                    }
                }else{
                    currfragment.TargetFragment.appendChild(cl_dom);
                }
            }
        }
        this.form.closureContext(cl_dom);
        this.form.callEvent('oninit');
        this.form.unClosureContext();
        var _data_ = this.form.setControlsData(this.controls,data,cl_dom,this.actionData);

        if (this.actionData)
            cl_dom.clone._data_ = D3Api.JSONstringify(_data_);//MD5.hex_md5

        cl_dom.id += 'clone';
        if (this.keyField)
        {
            cl_dom.setAttribute('repkeyvalue',data[this.keyField]);
            D3Api.addClass(cl_dom, ('repkeyvalue'+data[this.keyField]).replace(/\./g,'_'));
        }
        if(this.parentKeyFields)
        {
            for(var key in this.parentKeyFields)
            {
                if(!this.parentKeyFields.hasOwnProperty(key)){
                    continue;
                }
                cl_dom.setAttribute(key+'_keyvalue',data[key]);
                D3Api.addClass(cl_dom, (key+'_keyvalue'+data[key]).replace(/\./g,'_'));
            }
        }

        for(var i = 0, ic = this.childs.length; i < ic; i++)
        {
            this.childs[i].repeat(this,cl_dom,false,undefined,byUser);
        }

        D3Api.showDom(cl_dom,true);
        this.form.closureContext(cl_dom);
        this.callEvent('onafter_clone',cl_dom.clone.data,cl_dom);
        this.form.unClosureContext();
        if (this.name && D3Api.empty(data[this.keyField]))
        {
            this.changedData['add'][cl_dom.clone.uid] = cl_dom;
        }
        return cl_dom;
    }
    this.parseClone = function(dom,domContext,cloneUid)
    {
        var cmps = D3Api.getAllDomBy(dom,'[cmptype][isrepeat="'+this.uniqId+'"],[cmpparse][isrepeat="'+this.uniqId+'"],[isd3repeater][isrepeat="'+this.uniqId+'"]');
        var i = 0, cmp = dom;
        var context = domContext||dom;
        do
        {

            D3Api.removeProperty(cmp, 'isrepeat');
            D3Api.setProperty(cmp, 'isclone', "1");
            D3Api.setProperty(cmp, 'clone_uid', cloneUid);
            this.form.default_parse(cmp,false,context);
            cmp = cmps[i++];
        }while(cmp);
        var cmps = D3Api.getAllDomBy(dom,'[dataset][onbefore_refresh][isrepeat="'+this.uniqId+'"],[dataset][onrefresh][isrepeat="'+this.uniqId+'"],[dataset][onafter_refresh][isrepeat="'+this.uniqId+'"]');
        var i = 0, cmp = dom;
        while(i < cmps.length)
        {
            var cmp = cmps[i++];
            var dataset = this.form.getDataSet(D3Api.getProperty(cmp,'dataset'));
            var prop = null;
            if(prop = D3Api.getProperty(cmp,'onbefore_refresh'))dataset.addEvent('onbefore_refresh',this.form.execDomEventFunc(cmp,prop));
            if(prop = D3Api.getProperty(cmp,'onrefresh'))dataset.addEvent('onrefresh',this.form.execDomEventFunc(cmp,prop));
            if(prop = D3Api.getProperty(cmp,'onafter_refresh'))dataset.addEvent('onafter_refresh',this.form.execDomEventFunc(cmp,prop));
        }
    }
    this.removeAllClones = function(containerDOM)
    {
        var clones = this.clones(containerDOM);
        for(var i = 0, c = clones.length; i < c; i++)
        {
            this.removeClone(clones[i]);
        }
    }
    this.removeClone = function(clone)
    {
        if(clone.clone)
        {
            if (this.changedData['add'][clone.clone.uid])
                delete this.changedData['add'][clone.clone.uid];
            else
            {
                if(this.parent)
                {
                    var parentClone = this.form.getClone(clone,this.parent.name);
                    if(parentClone)
                        clone.clone.parentUid = parentClone.clone.uid;
                }
                this.changedData['del'][clone.clone.uid] = clone;
            }
        }
        D3Api.removeDom(clone);
        this.callEvent('onclone_remove',clone);
    }
    this.clones = function(containerDOM)
    {
        if(!containerDOM)
        {
            if(this.form.currentContext && D3Api.getProperty(this.form.currentContext,'repeatername','') != this.name && D3Api.getDomBy(this.form.currentContext,'#'+this.uniqId+'[repeatername="'+this.name+'"]'))
            {
                containerDOM = this.form.currentContext;
            }else
            {
                containerDOM = this.targetDOM || this.form.DOM;
                if(fragmentElements.length > 0 && (!nofragment || !D3Api.empty(this.parent))){
                    for(var i = 0 ; i < fragmentElements.length ; i++){
                        if(fragmentElements[i].TargetElement === containerDOM){
                            containerDOM = fragmentElements[i].TargetFragment
                            break;
                        }
                    }
                }else{
                    if (containerDOM && containerDOM.parentNode){
                        containerDOM = containerDOM.parentNode;
                    }
                }

            }
        }
        if (containerDOM)
            return containerDOM.querySelectorAll('#'+this.uniqId+'clone');
    }
    this.clonesCount = function()
    {
        var cl = this.clones();
        if(cl && cl.length !== undefined)
            return cl.length;
        return;
    }
    this.getChangedData = function(type)
    {
        var cls = this.clones();
        var chData = {};
        var findChange = function fnFindChange(repeater,clone)
        {
            if(!repeater.name || !repeater.keyField)
                return false;
            var cls = repeater.clones(clone);
            for(var i = 0, ic = cls.length; i < ic; i++)
            {
                if (repeater.changedData['add'][cls[i].clone.uid])
                    return true;
                var _data_ = D3Api.JSONstringify(repeater.form.getControlsData(repeater.controls,cls[i]));
                if (_data_ != cls[i].clone._data_)
                    return true;
                else
                {
                    for(var c = 0, cc = repeater.childs.length; c < cc; c++)
                    {
                        if(fnFindChange(repeater.childs[c],cls[i]))
                            return true;
                    }
                }
            }
            for(var cl in repeater.changedData['del'])
            {
                if(!repeater.changedData['del'].hasOwnProperty(cl)){
                    continue;
                }
                if(repeater.changedData['del'][cl].clone.parentUid == clone.clone.uid)
                    return true;
            }
            return false;
        }
        if(type == 'each')
        {
            for(var i = 0, ic = cls.length; i < ic; i++)
            {
                chData[cls[i].clone.uid] = cls[i];
            }
        }else if (type == 'del')
        {
            for(var cl in this.changedData['del'])
            {
                if(!this.changedData['del'].hasOwnProperty(cl)){
                    continue;
                }
                if(this.parent && this.form.currentContext && this.form.currentContext.clone.uid == this.changedData['del'][cl].clone.parentUid)
                {
                    chData[cl] = this.changedData['del'][cl];
                }else if(!this.parent)
                    chData[cl] = this.changedData['del'][cl];
            }
        }else
        {
            for(var i = 0, ic = cls.length; i < ic; i++)
            {
                if (this.changedData['add'][cls[i].clone.uid] && type == 'add')
                {
                    chData[cls[i].clone.uid] = this.changedData['add'][cls[i].clone.uid];
                }
                if(this.changedData['add'][cls[i].clone.uid] || type == 'add')
                {
                    continue;
                }
                var _data_ = D3Api.JSONstringify(this.form.getControlsData(this.controls,cls[i]));
                if (_data_ != cls[i].clone._data_)
                {
                    this.changedData['upd'][cls[i].clone.uid] = cls[i];
                    chData[cls[i].clone.uid] = this.changedData['upd'][cls[i].clone.uid];
                }else
                {
                    for(var c = 0, cc = this.childs.length; c < cc; c++)
                    {
                        if(findChange(this.childs[c],cls[i]))
                        {
                            this.changedData['upd'][cls[i].clone.uid] = cls[i];
                            chData[cls[i].clone.uid] = this.changedData['upd'][cls[i].clone.uid];
                            break;
                        }
                    }
                }
            }
        }
        return chData;
    }

    /**************************************/
    //Идентификаторы дынных сгруппированных по связи с родителями
    this.dataChild = {};

    //Ключи для текущей строки для детей у которых текущий репитер указан в связях с родителем
    this.childKeys = {};
    this.currentData = [];
    this.isDataPrepared = false;
    this.prepareData = function()
    {
        if(this.isDataPrepared)
        {
            return;
        }
        this.isDataPrepared = true;
        if(this.parentFields.length <= 0)
        {
            this.dataChild = null;
            return;
        }
        this.dataChild = {};
        var firstRow = true;
        for(var i = 0, c = this.dataSet.data.length; i < c; i++)
        {
            var pKey = [];

            for(var ri = 0, rc = this.parentFields.length; ri < rc; ri++)
            {
                if(firstRow)
                {
                    var rep = form.getRepeater(this.parentFields[ri].rep);
                    rep.addChildKey(this.name,this.parentFields[ri].fields);
                }
                var pVal = [];
                for(var fi = 0, fc = this.parentFields[ri].fields.length; fi < fc; fi++)
                {
                    var pF = this.parentFields[ri].fields[fi].parent || this.parentFields[ri].fields[fi].parentKey;
                    pVal.push(pF+'='+this.dataSet.data[i][this.parentFields[ri].fields[fi].child]);
                }
                pKey.push(this.parentFields[ri].rep+':'+pVal.join(':'));
            }
            this.dataChild[pKey.join(';')] = this.dataChild[pKey.join(';')] || [];
            this.dataChild[pKey.join(';')].push(i);
            firstRow = false;
        }
    }
    this.checkPrepareData = function(reset)
    {
        if(!reset && !this.isDataPrepared)
            return false;

        reset && (this.isDataPrepared = false);

        for(var i = 0, c = this.childs.length; i < c; i++)
        {
            if(!this.childs[i].checkPrepareData(reset) && !reset)
                return false;
        }
        return true;
    }
    this.addChildKey = function(name,info)
    {
        this.childKeys[name] = info;
    }
    this.getKey = function(childName)
    {
        if(!this.childKeys[childName])
            return false;
        var pVal = [];
        for(var i = 0, c = this.childKeys[childName].length; i < c; i++)
        {
            var pF = this.childKeys[childName][i].parent || this.childKeys[childName][i].parentKey;
            pVal.push(pF+'='+this.currentData[pF]);
        }
        return this.name+':'+pVal.join(':');
    }
    this.isCurrentRepeat = null;
    this.clonesFragment = null;
    this.simpleRepeat = function(forceRepeat,containerDOM,dataIndex,startIndex,clCount)
    {
        containerDOM = containerDOM || this.DOM;
        var topLevel = !this.parent;
        if(!dataIndex)
        {
            if(topLevel && !forceRepeat && (this.noRepeat || this.dataSet && this.dataSetUid == this.dataSet.uidData))
            {
                return;
            }
            if(this.dataSet)
                this.dataSetUid = this.dataSet.uidData;
            if (this.callEvent('onbefore_repeat',containerDOM) === false)
                return;
            dataIndex = [];
            if(this.parent && this.parentFields.length > 0)
            {
                var key = [];
                var p = this.parent;
                while(p)
                {
                    var pk = p.getKey(this.name);
                    pk && key.push(pk);
                    p = p.parent;
                }
                key.reverse();
                key = key.join(';');
                dataIndex = this.dataChild[key] || [];
            }else
            {
                dataIndex = Object.keys(this.dataSet.data);
            }
            if(topLevel)
            {
                if(this.isCurrentRepeat)
                {
                    clearTimeout(this.isCurrentRepeat);
                    this.isCurrentRepeat = null;
                }
                this.removeAllClones();
                this.changedData = {
                    add : {},
                    upd : {},
                    del : {}
                };
                this.clonesFragment = null;
                this.clonesFragment = document.createDocumentFragment();
            }
            distinctData = {};
        }
        clCount = clCount || 0;
        for(var i = startIndex || 0, c = dataIndex.length; i < c; i++)
        {
            this.currentData = this.dataSet.data[dataIndex[i]];
            if(this.distinct)
            {
                if(distinctData[this.currentData[this.distinct]])
                    continue;
                distinctData[this.currentData[this.distinct]] = true;
            }
            if (this.conditions)
            {
                var next = false;
                for(var cnd in this.conditions)
                {
                    if(!this.conditions.hasOwnProperty(cnd)){
                        continue;
                    }
                    if(this.conditions[cnd].isfunc)
                    {
                        if(!this.form.callFunction(this.conditions[cnd].value,cnd,this.currentData))
                        {
                            next = true;
                            break;
                        }
                        continue;
                    }
                    if (this.currentData[cnd] != this.conditions[cnd].value)
                    {
                        next = true;
                        break;
                    }
                }
                if (next)
                {
                    if(this.distinct)
                    {
                        distinctData[this.currentData[this.distinct]] = false;
                    }
                    continue;
                }
            }
            this.simpleClone(containerDOM);
            clCount++;
            if(this.repeatCount > 0 && clCount >= this.repeatCount)
                break;
            if(this.async && topLevel && i > 0 && (startIndex === undefined || +startIndex>=1)  && (i % this.async) === 0)
            {
                this.isCurrentRepeat = setTimeout(D3Api.bindThis(function(){this.simpleRepeat(true,containerDOM,dataIndex,++i,clCount)},this),100);
                return;
            }
        }

        if(!this.parent)
        {
            this.checkPrepareData(true);
            containerDOM.parentNode.insertBefore(this.clonesFragment,containerDOM);
            this.clonesFragment = null;
            this.callEvent('onafter_repeat',containerDOM);
        }
    }
    this.simpleClone = function(containerDOM)
    {
        for(var i = 0, c = this.controls.length; i < c; i++)
        {
            for (var prop  in this.controls[i].datafields)
            {
                if(!this.controls[i].datafields.hasOwnProperty(prop)){
                    continue;
                }
                var v = this.currentData[this.controls[i].datafields[prop]];
                this.form.setControlProperty(this.controls[i].control, prop, v);
            }
        }
        var clone = this.DOM.cloneNode(true);
        D3Api.removeProperty(clone,'isD3Repeater');
        clone.clone = {data: this.currentData, uid: D3Api.getUniqId('cl'),timeout:null};
        for(var ci = 0, cc = this.childs.length; ci < cc; ci++)
        {
            this.childs[ci].simpleRepeat(true,clone.querySelector('#'+this.childs[ci].uniqId));
        }
        if(this.parent)
            containerDOM.parentNode.insertBefore(clone,containerDOM);
        else
            this.clonesFragment.appendChild(clone);
        D3Api.showDom(clone,true);
        clone.id += 'clone';
        this.simpleParseClone(clone,undefined,clone.clone.uid);
        this.form.closureContext(clone);
        var smpl = this.simpleType||(this.rootParent && this.rootParent.simpleType);
        if(smpl === 'base')
        {
            var self = this;
            var timerId = setTimeout(function(){
                /**выполняется из очереди вызова за это время форма успела уже закрыться**/
                if(self.form){
                    self.callEvent('onafter_clone',clone.clone.data,clone);
                    if(clone.clone.timeout){
                        var indx = simpleClones.indexOf(clone.clone.timeout);
                        if(indx > -1){
                            simpleClones.splice(indx,1);
                        }
                        indx = null;
                        clone.clone.timeout = null;
                        delete indx;
                    }
                }
            },0);
            clone.clone.timeout = timerId;
            simpleClones.push(clone.clone.timeout);
        }else
            this.callEvent('onafter_clone',clone.clone.data,clone);
        this.form.unClosureContext();
        return clone;
    }
    this.simpleParseClone = function(dom,domContext,cloneUid)
    {
        var smpl = this.simpleType||(this.rootParent && this.rootParent.simpleType);
        var cmps = (smpl !== 'base')?D3Api.getAllDomBy(dom,'[isrepeat="'+this.uniqId+'"]'):[];
        var i = 0, cmp = dom;
        var context = domContext||dom;
        do
        {
            if(smpl === 'closure')
            {
                var onclk = cmp.getAttribute('onclick');
                if(onclk !== '')
                {
                    cmp.D3Store = {_setEvents_:{onclick: true}};
                    cmp.onclick = this.form.execDomEventFunc(cmp, 'if(callControlEvent(D3Api.getControlByDom(this),\'onclick\',event)===false)return;' + onclk, 'onclick', context);
                    if (D3Api.BROWSER.msie) {
                        D3Api.setProperty(dom, '_onclick_', onclk);
                    }
                }
            }else
                cmp.D3Store = {};
            cmp = cmps[i++];
        }while(cmp);
    }
    /**************************************/
    
    this.addControl(this.DOM);
}
//Глобальные вспомогательные функции
if(window.history && !window.history.pushState)
{
    window.history.constructor.prototype.pushState = function(){};
}
D3Api.globalClientData = new function()
{
    var prefix = 'D3:' + location.pathname + ':';
    this.storage = {};
    var checkStorage = function(_storageName){
        try {
            if (window[_storageName]){
                window[_storageName].getItem(prefix+':Exception');
                return true;
            }
        }catch (e){}
        return false;
    };
    if(checkStorage('localStorage')){
        this.storage = window.localStorage;
    }else if(checkStorage('globalStorage')){
        this.storage = window.globalStorage[document.domain];
    }

    this.get = function(name,defaultValue){
        if(this.storage[prefix+name] === undefined)
            return defaultValue;
        return String(this.storage[prefix+name]);
    };
    this.set = function(name,value){
        if(value === undefined)
        {
            this.storage[prefix+name] = undefined;
            delete this.storage[prefix+name];
            return;
        }
        this.storage[prefix+name] = value;
    }
};

if (!("console" in window) || !("log" in console))
{
    var names = ["log", "debug", "info", "warn", "error", "assert", "dir", "dirxml",
    "group", "groupEnd", "time", "timeEnd", "count", "trace", "profile", "profileEnd"];

    window.console = {};
    for (var i = 0; i < names.length; ++i)
        window.console[names[i]] = function() {};
}else
{
    var names = ["log", "debug", "info", "warn", "error", "assert", "dir", "dirxml",
    "group", "groupEnd", "time", "timeEnd", "count", "trace", "profile", "profileEnd"];

    for (var i = 0; i < names.length; ++i)
        if (!(names[i] in console))
            window.console[names[i]] = function() {};
}
if(!Array.prototype.indexOf){
    Array.prototype.indexOf=function(value,offset){
        for(var i=(offset||0),j=this.length;i<j;i++){
            if(this[i]==value){return i;}
        }
        return -1;
    }
}

D3Api.getPageWindowSize = function(parent)
{
	parent = parent || document.body;
    var windowWidth, windowHeight;
    var pageHeight, pageWidth;
    if (parent != document.body) {
      windowWidth = parent.getWidth();
      windowHeight = parent.getHeight();
      pageWidth = parent.scrollWidth;
      pageHeight = parent.scrollHeight;
    }
    else {
      var xScroll, yScroll;

      if (window.innerHeight && window.scrollMaxY) {
        xScroll = document.body.scrollWidth;
        yScroll = window.innerHeight + window.scrollMaxY;
      } else if (document.body.scrollHeight > document.body.offsetHeight){ // all but Explorer Mac
        xScroll = document.body.scrollWidth;
        yScroll = document.body.scrollHeight;
      } else { // Explorer Mac...would also work in Explorer 6 Strict, Mozilla and Safari
        xScroll = document.body.offsetWidth;
        yScroll = document.body.offsetHeight;
      }


      if (self.innerHeight) {  // all except Explorer
        windowWidth = self.innerWidth;
        windowHeight = self.innerHeight;
      } else if (document.documentElement && document.documentElement.clientHeight) { // Explorer 6 Strict Mode
        windowWidth = document.documentElement.clientWidth;
        windowHeight = document.documentElement.clientHeight;
      } else if (document.body) { // other Explorers
        windowWidth = document.body.clientWidth;
        windowHeight = document.body.clientHeight;
      }

      // for small pages with total height less then height of the viewport
      if(yScroll < windowHeight){
        pageHeight = windowHeight;
      } else {
        pageHeight = yScroll;
      }

      // for small pages with total width less then width of the viewport
      if(xScroll < windowWidth){
        pageWidth = windowWidth;
      } else {
        pageWidth = xScroll;
      }
    }
    return {pageWidth: pageWidth ,pageHeight: pageHeight , windowWidth: windowWidth, windowHeight: windowHeight};
}

D3Api.getAbsoluteSize = function(element){
    if(!element) return;
    var display = element.style.display;
    if (display != 'none' && display != null) // Safari bug
    return {width: element.offsetWidth, height: element.offsetHeight};

    // All *Width and *Height properties give 0 on elements with display none,
    // so enable the element temporarily
    var els = element.style;
    var originalVisibility = els.visibility;
    var originalPosition = els.position;
    var originalDisplay = els.display;
    els.visibility = 'hidden';
    els.position = 'absolute';
    els.display = 'block';
    var originalWidth = element.clientWidth;
    var originalHeight = element.clientHeight;
    els.display = originalDisplay;
    els.position = originalPosition;
    els.visibility = originalVisibility;
    return {width: originalWidth, height: originalHeight};
}
D3Api.getAbsoluteRect = function(element,scrollNeed){
        if(!element) return;
        var pos=D3Api.getAbsolutePos(element);
        var size=D3Api.getAbsoluteSize(element);
        if (scrollNeed)
        {
        	pos.x -= D3Api.getBodyScrollLeft();
        	pos.y -= D3Api.getBodyScrollTop();
        }
        return {x:pos.x, y:pos.y, width:size.width, height:size.height};
}
D3Api.getAbsoluteClientRect = function(elem,xScroll,yScroll) {
    var rect = elem.getBoundingClientRect();

    var scrollTop = D3Api.getBodyScrollTop();
    var scrollLeft = D3Api.getBodyScrollLeft()

    var coordy  = rect.top + ((yScroll === false)?0:scrollTop);
    var coordx = rect.left + ((xScroll === false)?0:scrollLeft);

    return {y: Math.round(coordy), x: Math.round(coordx), width: rect.width || (rect.right-rect.left),height: rect.height || (rect.bottom-rect.top)};
}
D3Api.getBodyScrollTop = function()
{
  return self.pageYOffset || (document.documentElement && document.documentElement.scrollTop) || (document.body && document.body.scrollTop);
}

D3Api.getBodyScrollLeft = function()
{
  return self.pageXOffset || (document.documentElement && document.documentElement.scrollLeft) || (document.body && document.body.scrollLeft);
}
D3Api.getPageEventCoords = function(evt)
{
	var coords = {left:0, top:0};
	if(evt.pageX)
	{
		coords.left = evt.pageX;
		coords.top = evt.pageY;
	}
	else if(evt.clientX)
	{
		coords.left = evt.clientX + document.body.scrollLeft - document.body.clientLeft;
		coords.top  = evt.clientY + document.body.scrollTop - document.body.clientTop;

		if (document.body.parentElement && document.body.parentElement.clientLeft)
		{
		var bodParent = document.body.parentElement;
			coords.left += bodParent.scrollLeft - bodParent.clientLeft;
			coords.top  += bodParent.scrollTop - bodParent.clientTop;
		}
	}
	return coords;
}
D3Api.returnGET = function(notlower)
{
    var keyVal = (window.location.search.substr(1)).split('&');
    var resGet = {};
    var p= -1;
    var key= '';
    for(var i=0; i < keyVal.length; i++)
    {
      p = keyVal[i].search('=');
      key = keyVal[i].substr(0,p);
      resGet[notlower?key:key.toLowerCase()] = decodeURIComponent(keyVal[i].substr(p+1));
    }
    return resGet;
}
D3Api.getControlPropertyByDom = function(controlDom,nameProperty,noGetEvent)
{
    var ct = D3Api.getProperty(controlDom,'cmptype');
    if (!ct)
    {
        //D3Api.debug_msg('У объекта нет API');
        return;
    }
    var objProp = false;
    if(nameProperty.indexOf('.') != -1)
    {
        nameProperty = nameProperty.split('.');
        objProp = nameProperty[1];
        nameProperty = nameProperty[0];
    }
    if (!D3Api.controlsApi[ct] || !D3Api.controlsApi[ct][nameProperty] || !D3Api.controlsApi[ct][nameProperty].get)
    {
        D3Api.debug_msg('Нет метода получения свойства "'+nameProperty+'" для компонента с типом: '+ct);
        return;
    }

    var ref = {value: D3Api.controlsApi[ct][nameProperty].get.call(this, controlDom)};
    if(objProp && ref.value)
        ref.value = ref.value[objProp];
    if(noGetEvent !== true && controlDom.D3Base)
    {
        controlDom.D3Base.callEvent('onget_property',nameProperty,ref);
    }
    return ref.value;
}
D3Api.setControlPropertyByDom = function(controlDom,nameProperty,value,noChangeEvent,isUserEvent)
{
    var ct = D3Api.getProperty(controlDom,'cmptype');
    if (!ct)
    {
        D3Api.debug_msg('У объекта нет API');
        return;
    }
    if (!D3Api.controlsApi[ct] || !D3Api.controlsApi[ct][nameProperty] || !D3Api.controlsApi[ct][nameProperty].set)
    {
        D3Api.debug_msg('Нет метода установки свойства "'+nameProperty+'" для компонента с типом: '+ct);
        return;
    }

    var usEv = D3Api.__isUserEvent__;
    D3Api.__isUserEvent__ = isUserEvent;
    var resValue = {value: value, forceOnChange: false};
    var res = D3Api.controlsApi[ct][nameProperty].set.call(this, controlDom, value, resValue);

    controlDom.D3Store._properties_ = controlDom.D3Store._properties_ || {};
    if(resValue.forceOnChange || (noChangeEvent !== true && controlDom.D3Base && (res === undefined || res === true) && ((controlDom.D3Store._properties_[nameProperty] === undefined && resValue.value !== undefined) || (controlDom.D3Store._properties_[nameProperty] !== undefined && controlDom.D3Store._properties_[nameProperty] !== resValue.value))))
    //if(noChangeEvent !== true && controlDom.D3Base && (res === undefined || res === true) && controlDom.D3Store._properties_[nameProperty] !== value)
    {
        var oldVal = controlDom.D3Store._properties_[nameProperty];
        controlDom.D3Store._properties_[nameProperty] = resValue.value;
        controlDom.D3Base.callEvent('onchange_property',nameProperty,resValue.value,oldVal);
    }
    D3Api.__isUserEvent__ = usEv;
    return res;
}
D3Api.getControlAPIByDom = function(controlDom)
{
    var ct = D3Api.getProperty(controlDom,'cmptype');
    if (!ct)
    {
        D3Api.debug_msg('У объекта нет API');
        return;
    }
    return D3Api.controlsApi[ct]._API_;
}
D3Api.addControlEventByDom = function(controlDom, eventName, listener)
{
    if(!controlDom.D3Base)
        return;

    if(controlDom.D3Form && controlDom.D3Form.execDomEvents[eventName] && !controlDom.D3Store._setEvents_[eventName])
    {
        //Найти точку монтирования события
        var uid = controlDom.D3Store._uid_;
        var doms = D3Api.getAllDomBy(controlDom, '[events'+uid+'*="'+eventName+'"]');
        doms.length==0 && (doms = [controlDom]);
        var attrEventName = eventName;
        if(D3Api.BROWSER.msie)
        {
            attrEventName = '_'+eventName+'_';
        }
        for(var i = 0, c = doms.length; i < c; i++)
        {
            if(doms[i].D3Store._setEvents_[eventName])
                continue;
            doms[i].D3Store._setEvents_[eventName] = true;
            doms[i][eventName]=doms[i].D3Form.execDomEventFunc(doms[i],'if(callControlEvent(D3Api.getControlByDom(this),\''+eventName+'\',event)===false)return;'+D3Api.getProperty(doms[i],attrEventName,''),eventName);
        }

    }
    return controlDom.D3Base.addEvent(eventName, listener);
}
D3Api.callControlEventByDom = function(controlDom, eventName)
{
    if(!controlDom.D3Base)
        return;
    var args = Array.prototype.slice.call(arguments,1);
    return controlDom.D3Base.callEvent.apply(controlDom.D3Base,args);
}
D3Api.removeControlEventByDom = function(controlDom, eventName, uniqid)
{
    if(!controlDom.D3Base)
        return;

    return controlDom.D3Base.removeEvent(eventName, uniqid);
}
D3Api.getControlByDom = function(dom,cmptype,deep)
{
    deep = deep || 100;
    while(dom && dom.getAttribute && dom.nodeName.toUpperCase() != 'HTML' && (deep == undefined || deep-- > 0))
    {
        if(dom.getAttribute('cmptype') && (!cmptype || dom.getAttribute('cmptype') == cmptype))
            return dom;
        dom = dom._parentDOM_ || dom.parentNode;
    }
    return null;
}
D3Api.getDomByDomAttr = function(dom,attr,value,deep)
{
    while(dom && dom.getAttribute && dom.nodeName.toUpperCase() != 'HTML' && (deep == undefined || deep-- > 0))
    {
        if(dom.getAttribute(attr) && (!value || dom.getAttribute(attr) == value))
            return dom;
        dom = dom._parentDOM_ || dom.parentNode;
    }
    return null;
}
D3Api.scrollTo = function(dom)
{
    if(dom.scrollIntoView)
        dom.scrollIntoView();
}
D3Api.setStyle = function(dom,property,value)
{
    dom.style[property] = value;
}
D3Api.showDom = function(dom,state)
{
    dom.style.display = (state)?'':'none';
}
D3Api.showDomBlock = function(dom)
{
    dom.style.display = 'block';
}
D3Api.setDomDisplayDefault = function(dom)
{
    dom.style.display = '';
}
D3Api.hideDom = function(dom)
{
    dom.style.display = 'none';
}
D3Api.showedDom = function(dom)
{
    return dom.style.display != 'none';
}
D3Api.isChildOf = function(child,container)
{
    var c = child.parentNode;
    while (c != undefined && c != document.body && c != container)
    {
        c = c.parentNode;
    }
    return (c == container);
}
D3Api.debug_msg = function()
{
    if(D3Api.getOption('debug', 0) > 0)
        console.log.apply(console, arguments);
}
D3Api.alert_msg = function(msg,force)
{
    var res = msg.match(/(?:MESSAGE_TEXT:)([\s\S]+?)(?:PG_EXCEPTION_DETAIL:|$)/);
    if(!res)
        res = msg.match(/(?:ERROR:|ОШИБКА:|ORA\-20103:)([\s\S]+?)(?:CONTEXT:|КОНТЕКСТ:|\[!\]|$)/);
    if(res)
    {
        res = res[1].replace(/\n/g, '<br/>');
        D3Api.notify('Сообщение сервера',res,{modal: true});
        //alert(res[1]);
    }else if(force)
        alert(msg);
    //console.trace();
}
D3Api.clearDom = function(dom)
{
    while(dom.childNodes.length > 0)
        dom.removeChild(dom.childNodes[0]);
}
D3Api.createDom = function(text)
{
    var dom = document.createElement('div');
    try
    {
        dom.innerHTML = text;
        var res = dom.removeChild(dom.firstChild);
        dom = null;
        return res;
    }catch(e)
    {
        return null;
    }
}
D3Api.addDom = function(dom,newDom)
{
    return dom.appendChild(newDom);
}
D3Api.insertBeforeDom = function(dom,newDom)
{
    return dom.parentNode.insertBefore(newDom,dom);
}
D3Api.insertAfterDom = function(dom, newDom)
{
    return dom.parentNode.insertBefore(newDom, dom.nextSibling);
}
D3Api.removeDom = function(dom)
{
    if (dom && dom.parentNode)
        dom.parentNode.removeChild(dom);
}
D3Api.mixin = function (dst)
{
    for(var i = 1, c = arguments.length; i < c; i++)
    {
        if(!arguments[i]) continue;
        var obj = arguments[i];
        for(var key in obj)
        {
            if(obj.hasOwnProperty(key)){
                if(obj[key] instanceof Array){
                    dst[key] = D3Api.mixin([],obj[key]);
                } else if(obj[key] instanceof Function){
                    dst[key] = obj[key];
                } else if(obj[key] instanceof Object){
                    var isInstanceOf = false;
                    for(var func in D3Api){
                        if(D3Api[func] instanceof Function){
                            if(obj[key] instanceof D3Api[func]){
                                isInstanceOf = true;
                                break;
                            }
                        }
                    }
                    if(isInstanceOf){
                        dst[key] = obj[key];
                    }else{
                        dst[key] = D3Api.mixin({},obj[key]);
                    }

                }else{
                    dst[key] = obj[key];
                }

            }
        }
    }
    return dst;
}
D3Api.clone = function(o,deep,cdr)
{
    if (!cdr)
        cdr = 0;
    cdr++;
 	if(typeof o !== 'object')
 	{
   		return o;
 	}
    var c = {};
    if (o instanceof Array)
        c = [];
 	var v;
    if (cdr > deep)
        return c;
 	for(var p in o)
 	{
        if(o.hasOwnProperty(p))
        {
            v = o[p];
            if(v && typeof v === 'object' && !v.appendChild)
            {
                c[p] = D3Api.clone(v,deep,cdr);
            }else
            {
                c[p] = v;
            }
        }
	}
 	return c;
}
D3Api.getProperty = function getProperty(dom,name,def)
{
    var p = dom.getAttribute(name);
    if(p || dom.attributes[name])
        return (p)?p:dom.attributes[name].value;
    else
        return def;
}
D3Api.setProperty = function setProperty(dom,name,value)
{
    if (value == null)
        value = '';
    return dom.setAttribute(name,value);
}
D3Api.hasProperty = function(dom,name)
{
    return (dom.attributes && dom.attributes[name] && dom.getAttribute(name)!=undefined);
}
D3Api.removeProperty = function(dom,name)
{
    return dom.removeAttribute(name);
}
D3Api.getTextContent = function(dom)
{
    function textContent(dom)
    {
        var _result = "";
        if (dom == null) {
            return _result;
        }
        var childrens = dom.childNodes;
        var i = 0;
        while (i < childrens.length) {
            var child = childrens.item(i);
            switch (child.nodeType) {
                case 1: // ELEMENT_NODE
                case 5: // ENTITY_REFERENCE_NODE
                    _result += textContent(child);
                    break;
                case 3: // TEXT_NODE
                case 2: // ATTRIBUTE_NODE
                case 4: // CDATA_SECTION_NODE
                    _result += child.nodeValue;
                    break;
                case 6: // ENTITY_NODE
                case 7: // PROCESSING_INSTRUCTION_NODE
                case 8: // COMMENT_NODE
                case 9: // DOCUMENT_NODE
                case 10: // DOCUMENT_TYPE_NODE
                case 11: // DOCUMENT_FRAGMENT_NODE
                case 12: // NOTATION_NODE
                // skip
                break;
            }
            i++;
        }
        return _result;
    }
    return dom.text || dom.textContent || textContent(dom);
}
D3Api.getChildTag = function(dom,tagName,index)
{
    if(dom.nodeName.toUpperCase() == tagName.toUpperCase())
        return dom;
    return dom.getElementsByTagName(tagName)[index];
}
D3Api.getDomBy = function(dom,selector)
{
    return dom.querySelector(selector);
}
D3Api.getAllDomBy = function(dom,selector)
{
    return dom.querySelectorAll(selector);
}
D3Api.getDomByAttr = function(dom,attr,value)
{
    if (dom.getAttribute(attr) == value)
        return dom;
    return D3Api.getDomBy(dom,'['+attr+'="'+value+'"]');
}
D3Api.getDomByName = function(dom,name)
{
    if (dom.getAttribute('name') == name)
        return dom;
    return D3Api.getDomBy(dom,'[name="'+name+'"]');
}
D3Api.bindThis = function (func, thisObj)
{
    return function(){return func.apply(thisObj,arguments)};
}
D3Api.onContextMenuBody = function(event)
{
    var target = D3Api.getEventTarget(event);

    return (target.value != undefined);
}
D3Api.addEvent = function(dom,eventName,func,capture)
{
    if(dom.addEventListener)
    {
        dom.addEventListener(eventName,func,(capture == undefined)?false:capture);
    }else
    {
        dom.attachEvent('on'+eventName,func);
    }
    return func;
}
D3Api.removeEvent = function(dom,eventName,func,capture)
{
    if(dom.removeEventListener)
    {
        dom.removeEventListener(eventName,func,(capture == undefined)?false:capture);
    }else
    {
        dom.detachEvent('on'+eventName,func);
    }
}
D3Api.__isUserEvent__ = false;
D3Api.execDomEvent = function(dom,eventName)
{
    if (dom[eventName] instanceof Function)
    {
        var args = Array.prototype.slice.call(arguments,2);
        return dom[eventName].apply(null,args);
    }
}
D3Api.isUserEvent = function()
{
    return D3Api.__isUserEvent__;
}
D3Api.isEvent = function(e)
{
    return (e instanceof Object) && (e instanceof Event || e.target || e.currentTarget || e.srcElement);
}
D3Api.getEvent = function(e)
{
    return D3Api.isEvent(e) ? e : window.event || D3Api._event_;
}
D3Api.setEvent = function(event)
{
    D3Api._event_ = event || window.event;
    if (!D3Api.isEvent(D3Api._event_))
        D3Api._event_ = null;
}
D3Api.getEventTarget = function(e)
{
    var ev = D3Api.getEvent(e);
    if (!ev)
        return null;
    return ev.target || ev.srcElement;
}
D3Api.getEventCurrentTarget = function(e)
{
    var ev = D3Api.getEvent(e);
    if (!ev)
        return null;
    return ev.currentTarget || ev.srcElement;
}
D3Api.stopEvent = function(e,preventDefault)
{
    var ev = D3Api.getEvent(e);
    if(!ev)
        return;
    if (ev.stopPropagation) {
        ev.stopPropagation();
    } else {
        ev.cancelBubble = true;
        ev.returnValue = false;
    }
    if(ev.preventDefault && preventDefault !== false)
    {
        ev.preventDefault();
    }
    return false;
}
D3Api.charCodeEvent = function(e)
{
    if (e.charCode)
    {
            return e.charCode;
    }
    else if (e.keyCode)
    {
            return e.keyCode;
    }
    else if (e.which)
    {
            return e.which;
    }
    else
    {
            return 0;
    }
}
D3Api.getBoolean = function(v)
{
    if(typeof v === 'string') {
        v = v.trim();
    }
    return v !== 'false' && v !== '0' && !!v;
}
D3Api.empty = function(v,object)
{
    if(object && v instanceof Object)
    {
        var res = true;
        for(var p in v)
        {
            if(v.hasOwnProperty(p)){
                res = res && D3Api.empty(v[p],object);
            }
        }
        return res;
    }
    return v == undefined || v == null || v == '';
}
D3Api.isUndefined = function(v)
{
    return v === undefined || v === null;
}
D3Api.stringTrim = function(str,charlist)
{
    charlist = !charlist ? ' \\s\xA0' : charlist.replace(/([\[\]\(\)\.\?\/\*\{\}\+\$\^\:])/g, '\$1');
    var re = new RegExp('^[' + charlist + ']+|[' + charlist + ']+$', 'g');
    return str.replace(re, '');
}
//dom Class attribute
D3Api.addClass = function(c,className)
{
    if(!D3Api.empty(className)){
        className = className.replaceAll(/[()]+/g,'');
    }
    var re = new RegExp("(^|\\s)" + className + "(\\s|$)", "g");
    if (c.className == undefined)
    {
        c.className = className;
        return;
    }
    if (re.test(c.className)) return;
    c.className = (c.className + " " + className).replace(/\s+/g, " ").replace(/(^ | $)/g, "");
}
D3Api.removeClass = function(c,className)
{
    if(!D3Api.empty(className)){
        className = className.replaceAll(/[()]+/g,'');
    }
    var re = new RegExp("(^|\\s)" + className + "(\\s|$)", "g");
    if (c.className == undefined)
        return;
    c.className = c.className.replace(re, "$1").replace(/\s+/g, " ").replace(/(^ | $)/g, "");
}
D3Api.toggleClass = function(c,className1,className2,firstOnly)
{
    if(D3Api.hasClass(c,className1))
    {
        D3Api.removeClass(c,className1);
        D3Api.addClass(c,className2);
    }else if (!firstOnly)
    {
        D3Api.removeClass(c,className2);
        D3Api.addClass(c,className1);
    }
}
D3Api.hasClass = function(c,className)
{
    if(!D3Api.empty(className)){
        className = className.replaceAll(/[()]+/g,'');
    }
    if (!className)
        return c.className != '' && c.className != undefined;
    return (c.className && c.className.search('\\b' + className + '\\b') != -1);
}
D3Api.addTextNode = function(dom,string,clear)
{
    if(clear)
        dom.innerHTML = '';
    dom.appendChild(document.createTextNode(string));
}
D3Api.htmlSpecialChars = function(string)
{
    var t = document.createElement('span');
    t.appendChild(document.createTextNode(string));

    string = t.innerHTML;
    t = null;
    return string;
}
D3Api.htmlSpecialCharsDecode = function(string, quote_style)
{
    string = string.toString();

    // Always encode
    string = string.replace('/&/g', '&');
    string = string.replace('/</g', '<');
    string = string.replace(/>/g, '>');

    if (quote_style == 'ENT_QUOTES') {
        string = string.replace('/"/g', '"');
        string = string.replace('/\'/g', '\'');
    } else if (quote_style != 'ENT_NOQUOTES') {
        string = string.replace('/"/g', '"');
    }

    return string;
}
D3Api.getStyle = function(oElm,strCssRule)
{
    var strValue = "";
    if(document.defaultView && document.defaultView.getComputedStyle){
        strValue = document.defaultView.getComputedStyle(oElm, "").getPropertyValue(strCssRule);
    }
    else if(oElm.currentStyle){
        strCssRule = strCssRule.replace(/\-(\w)/g, function (strMatch, p1){
            return p1.toUpperCase();
        });
        strValue = oElm.currentStyle[strCssRule];
    }
    return strValue;
}
D3Api.runCalcSize = function(calc_dom,size_dom)
{
    calc_dom = calc_dom || document;
    size_dom = size_dom || document;

    if (!calc_dom.querySelector || !calc_dom.querySelectorAll)
        return;

    var cH = D3Api.getAllDomBy(calc_dom,'[calc_height]');
    var cW = D3Api.getAllDomBy(calc_dom,'[calc_width]');

    var scR = D3Api.getAllDomBy(calc_dom,'[scrollable]'),
        scrollsArr = [];
    for (var scRi = 0, scR_len = scR.length; scRi < scR_len; scRi++) {
        if (scR[scRi].scrollTop > 0 || scR[scRi].scrollLeft > 0)
        {
            scrollsArr.push({
                dom: scR[scRi],
                top: scR[scRi].scrollTop,
                left: scR[scRi].scrollLeft
            });
        }
    }

    if (!cH.length && !cW.length)
        return;

    var cacheSelect = {};
    function stateBlocks(cacheBlocks,block,selfCheck)
    {
        if (!block)
        {
            for(var i = 0, c = cacheBlocks.length; i < c; i++)
                cacheBlocks[i].style.display = 'none';
            cacheBlocks = [];
            return;
        }
        if (!selfCheck)
            block = block.parentNode;
        while (block)
        {
            if (block.style && block.style.display == 'none')
            {
                block.style.display = 'block';
                cacheBlocks.push(block);
            }
            block = block.parentNode;
        }
    }
    function getS(cssSel,wh)
    {
        var blks = new Array();
        cacheSelect[cssSel] = (cacheSelect[cssSel])?cacheSelect[cssSel]:D3Api.getDomBy(size_dom,cssSel);
        stateBlocks(blks,cacheSelect[cssSel],true);
        var r = (!cacheSelect[cssSel])?0:((wh=='w')?cacheSelect[cssSel].offsetWidth:cacheSelect[cssSel].offsetHeight);
        stateBlocks(blks);
        return r;
    }

    for(var i = 0; i < cH.length; i++)
    {
        cH[i]._style_display_h_ = cH[i].style.display;
        cH[i].style.display = 'none';
    }
    var div = document.createElement('div');
    var blocks = new Array();
    for(var i = 0; i < cH.length; i++)
    {
        stateBlocks(blocks,cH[i]);
        var h = cH[i].getAttribute('calc_height');
        var parent = cH[i].parentNode.offsetHeight;
        parent = parent - (parseInt(D3Api.getStyle(cH[i].parentNode,'padding-top')) || 0)
                        - (parseInt(D3Api.getStyle(cH[i].parentNode,'padding-bottom')) || 0)
                        - (parseInt(D3Api.getStyle(cH[i].parentNode,'border-top')) || 0)
                        - (parseInt(D3Api.getStyle(cH[i].parentNode,'border-bottom')) || 0);
        if (h!='')
            cH[i].style.height = Math.abs(eval(h.replace(/#(.+?)#/gi,'getS("$1","h")')))+'px';
        stateBlocks(blocks);
    }

    for(var i = 0; i < cW.length; i++)
    {
        cW[i]._style_display_w_ = cW[i].style.display;
        cW[i].style.display = 'none';
        stateBlocks(blocks,cW[i]);
        var w = cW[i].getAttribute('calc_width');
        cW[i].parentNode.insertBefore(div,cW[i].parentNode.firstChild);
        var parent = div.offsetWidth;
        if (w!='')
            cW[i].style.width = Math.abs(eval(w.replace(/#(.+?)#/gi,'getS("$1","w")')))+'px';
        stateBlocks(blocks);
    }

    for(var i = 0; i < cW.length; i++)
        cW[i].style.display = cW[i]._style_display_w_?cW[i]._style_display_w_:'';
    for(var i = 0; i < cH.length; i++)
        cH[i].style.display = cH[i]._style_display_h_?cH[i]._style_display_h_:'';

    for (var scRi = 0, scR_len = scrollsArr.length; scRi < scR_len; scRi++)
    {
        if (scrollsArr[scRi].top > 0) {
            scrollsArr[scRi].dom.scrollTop = scrollsArr[scRi].top;
        }
        if (scrollsArr[scRi].left > 0) {
            scrollsArr[scRi].dom.scrollLeft = scrollsArr[scRi].left;
        }
    }
    scrollsArr = null;
    if (div.parentNode)
        div.parentNode.removeChild(div);

}

/**
 * Дополняем строку до нужной длины слева
 * @param nr - исходная строка
 * @param n - итоговая длина
 * @param str - чем дополнять (по умолчанию '0')
 * @returns {string}
 */
D3Api.padLeft = function (nr, n, str){
    if ((nr = nr + "").length < n )
        return new Array(++n - nr.length).join(str||'0') + nr;
    else
        return nr;
}

/**
 * Преобразует количество часов в строку со временем в формате ЧЧ:ММ
 * @param interval float - количество часов, например 1.5 = 1ч. 30 мин
 * @param withSeconds boolean - нужно ли отображать секунды
 * @returns {string}
 */
D3Api.hours2time = function (interval, withSeconds) {
    var hours = Math.floor(interval);
    var minuts =  withSeconds ? Math.floor((interval % 1)* 60+0.0001) : Math.round((interval % 1)*60);
    var seconds = withSeconds ? Math.round(((interval % 1) - minuts/60) * 3600) : null;
    var time = (hours ? (D3Api.padLeft(hours,2)) : '00') + (minuts ? (':' +D3Api.padLeft(minuts,2) ) : ':00');

    if (withSeconds){
        time += (seconds ? (':' +D3Api.padLeft(seconds,2) ) : ':00');
    }
    return time;
}

D3Api.parseDate = function ( format, timestamp )
{
	var a, jsdate = (timestamp === undefined)?(new Date()):(new Date(timestamp * 1000));
	var txt_weekdays = ["Sunday","Monday","Tuesday","Wednesday",
		"Thursday","Friday","Saturday"];
	var txt_ordin = {1:"st",2:"nd",3:"rd",21:"st",22:"nd",23:"rd",31:"st"};
	var txt_months =  ["", "January", "February", "March", "April",
		"May", "June", "July", "August", "September", "October", "November",
		"December"];

	var f = {
		// Day
			d: function(){
				return D3Api.padLeft(f.j(), 2);
			},
			D: function(){
				var t = f.l(); return t.substr(0,3);
			},
			j: function(){
				return jsdate.getDate();
			},
			l: function(){
				return txt_weekdays[f.w()];
			},
			N: function(){
				return f.w() + 1;
			},
			S: function(){
				return txt_ordin[f.j()] ? txt_ordin[f.j()] : 'th';
			},
			w: function(){
				return jsdate.getDay();
			},
			z: function(){
				return (jsdate - new Date(jsdate.getFullYear() + "/1/1")) / 864e5 >> 0;
			},

		// Week
			W: function(){
				var a = f.z(), b = 364 + f.L() - a;
				var nd2, nd = (new Date(jsdate.getFullYear() + "/1/1").getDay() || 7) - 1;

				if(b <= 2 && ((jsdate.getDay() || 7) - 1) <= 2 - b){
					return 1;
				} else{

					if(a <= 2 && nd >= 4 && a >= (6 - nd)){
						nd2 = new Date(jsdate.getFullYear() - 1 + "/12/31");
						return date("W", Math.round(nd2.getTime()/1000));
					} else{
						return (1 + (nd <= 3 ? ((a + nd) / 7) : (a - (7 - nd)) / 7) >> 0);
					}
				}
			},

		// Month
			F: function(){
				return txt_months[f.n()];
			},
			m: function(){
				return D3Api.padLeft(f.n(), 2);
			},
			M: function(){
				var t = f.F(); return t.substr(0,3);
			},
			n: function(){
				return jsdate.getMonth() + 1;
			},
			t: function(){
				var n;
				if( (n = jsdate.getMonth() + 1) == 2 ){
					return 28 + f.L();
				} else{
					if( n & 1 && n < 8 || !(n & 1) && n > 7 ){
						return 31;
					} else{
						return 30;
					}
				}
			},

		// Year
			L: function(){
				var y = f.Y();
				return (!(y & 3) && (y % 1e2 || !(y % 4e2))) ? 1 : 0;
			},
			//o not supported yet
			Y: function(){
				return jsdate.getFullYear();
			},
			y: function(){
				return (jsdate.getFullYear() + "").slice(2);
			},

		// Time
			a: function(){
				return jsdate.getHours() > 11 ? "pm" : "am";
			},
			A: function(){
				return f.a().toUpperCase();
			},
			B: function(){
				// peter paul koch:
				var off = (jsdate.getTimezoneOffset() + 60)*60;
				var theSeconds = (jsdate.getHours() * 3600) +
								 (jsdate.getMinutes() * 60) +
								  jsdate.getSeconds() + off;
				var beat = Math.floor(theSeconds/86.4);
				if (beat > 1000) beat -= 1000;
				if (beat < 0) beat += 1000;
				if ((String(beat)).length == 1) beat = "00"+beat;
				if ((String(beat)).length == 2) beat = "0"+beat;
				return beat;
			},
			g: function(){
				return jsdate.getHours() % 12 || 12;
			},
			G: function(){
				return jsdate.getHours();
			},
			h: function(){
				return D3Api.padLeft(f.g(), 2);
			},
			H: function(){
				return D3Api.padLeft(jsdate.getHours(), 2);
			},
			i: function(){
				return D3Api.padLeft(jsdate.getMinutes(), 2);
			},
			s: function(){
				return D3Api.padLeft(jsdate.getSeconds(), 2);
			},
			//u not supported yet

		// Timezone
			//e not supported yet
			//I not supported yet
			O: function(){
			   var t = D3Api.padLeft(Math.abs(jsdate.getTimezoneOffset()/60*100), 4);
			   if (jsdate.getTimezoneOffset() > 0) t = "-" + t; else t = "+" + t;
			   return t;
			},
			P: function(){
				var O = f.O();
				return (O.substr(0, 3) + ":" + O.substr(3, 2));
			},
			//T not supported yet
			//Z not supported yet

		// Full Date/Time
			c: function(){
				return f.Y() + "-" + f.m() + "-" + f.d() + "T" + f.h() + ":" + f.i() + ":" + f.s() + f.P();
			},
			//r not supported yet
			U: function(){
				return Math.round(jsdate.getTime()/1000);
			}
	};

	return format.replace(/[\\]?([a-zA-Z])/g, function(t, s){
                var ret;
		if( t!=s ){
			// escaped
			ret = s;
		} else if( f[s] ){
			// a date function exists
			ret = f[s]();
		} else{
			// nothing special
			ret = s;
		}

		return ret;
	});
}
D3Api.dateToNum = function(_timestamp/*дата dd.mm.yyyy hh24:mi:ss можно без времени или только без секунд */, _format/*количество дней: d - с точностью до дня, h - до часа, m - до минуты, s - до секунды, ms - до миллисекунды*/){
    if(_timestamp === 'systemdate'){
         var _d = new Date();
        switch (_format){
            case 'd': _d.setHours(0,0,0,0);
                break;
            case 'h': _d.setMinutes(0,0,0);
                break;
            case 'm': _d.setSeconds(0,0);
                break;
            case 's': _d.setMilliseconds(0);
                break;
        }
    }else if(_timestamp){
       var _a = _timestamp.match(/^(\d{2})\.(\d{2})\.(\d{4})(?:\s(\d{2})(?::(\d{2})(?::(\d{2})(?::(\d{3}))?)?)?)?/);
        var _h = ['h','m','s','ms'],
            _m = ['m','s','ms'],
            _s = ['s','ms'];
        var _d = new Date(_a[3], _a[2] - 1, _a[1], (_h.indexOf(_format)+1)?_a[4]:0, (_m.indexOf(_format) + 1)?_a[5]:0, (_s.indexOf(_format) + 1)?_a[6]:0, (_format == 'ms')?_a[7]:0);
    } else{
        return 0;
    }

    return _d.getTime()/(1000*24*60*60);
}
D3Api.downloadFile = function(id,filename,deleteFile,fileType,fileView,returnPath)
{
    var file = D3Api.getOption('path','')+'request.php?type=file&file='+id+'&filename='+filename+((deleteFile)?'&delete=1':'')+((fileType)?'&filetype='+fileType:'')+((fileView)?'&fileview=1':'');
    if(returnPath)
        return file;
    window.open(file);
}

D3Api.setCookie = function(name, value, expires, path, domain, secure) {
	if (!name) return false;
	var str = name + '=' + encodeURIComponent(value);

	if (expires) str += '; expires=' + expires.toGMTString();
	if (path)    str += '; path=' + path;
	if (domain)  str += '; domain=' + domain;
	if (secure)  str += '; secure';

	document.cookie = str;
	return true;
}

D3Api.getCookie = function getCookie(name) {
	var pattern = "(?:; )?" + name + "=([^;]*);?";
	var regexp  = new RegExp(pattern);

	if (regexp.test(document.cookie))
	return decodeURIComponent(RegExp["$1"]);

	return false;
}

D3Api.deleteCookie = function deleteCookie(name, path, domain) {
	D3Api.setCookie(name, null, new Date(0), path, domain);
	return true;
}
D3Api.reloadLocation = function()
{
    document.location.reload();
}
D3Api.xPathEvaluate = function(xpathExpression, contextNode, ResultType, isReturnArray)
{
    contextNode = contextNode || document.body;
    ResultType = ResultType || 'node';
    isReturnArray = (isReturnArray === undefined)?true:isReturnArray;
    switch(ResultType)
    {
        case 'attribute':
        case 'node':
                ResultType = XPathResult.ORDERED_NODE_SNAPSHOT_TYPE;
            break;
        case 'number':
                isReturnArray = false;
                ResultType = XPathResult.NUMBER_TYPE;
            break;
        case 'string':
                isReturnArray = false;
                ResultType = XPathResult.STRING_TYPE;
            break;
        case 'boolean':
                isReturnArray = false;
                ResultType = XPathResult.BOOLEAN_TYPE;
            break;
    }

    var iterator = document.evaluate(xpathExpression, contextNode, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    if(!isReturnArray)
        return iterator;
    var res = [];
    for (var i = 0, c = iterator.snapshotLength; i < c; i++)
    {
        var item = iterator.snapshotItem(i);
        res.push(item);
    }
    return res;
}
D3Api.includeStaticJs = function(path,callback,cache)
{
    var theme = this.current_theme;
    cache = !this.isUndefined(cache)?cache:this.getOption('cache',false);
    path += '?ctype=text/javascript';
    if(!cache)
    {
        path += '&nocache='+(new Date()).getTime();
    }
    this.include_js('~Static/'+path,callback);
    this.current_theme = theme;
}
D3Api.includeStaticCss = function(path,cache)
{
    var theme = this.current_theme;
    cache = !this.isUndefined(cache)?cache:this.getOption('cache',false);
    path += '?ctype=text/css';
    if(!cache)
    {
        path += '&nocache='+(new Date()).getTime();
    }
    this.include_css('~Static/'+path);
    this.current_theme = theme;
}
D3Api.confirm = function(text,okCallback,cancelCallback,thisObject)
{
    if(confirm(text))
    {
        okCallback && okCallback.call(thisObject);
    }else
        cancelCallback && cancelCallback.call(thisObject);
}
D3Api.extends = function(obj,funcName,funcPrefix,funcPostfix)
{

    if(!(obj[funcName] instanceof Function))
        return;
    var funcBase = obj[funcName];
    obj[funcName] = function()
    {
        var args = Array.prototype.slice.call(arguments);
        args.push(arguments);
        funcPrefix && funcPrefix.apply(this,args);
        funcBase.apply(this,arguments);
        funcPostfix && funcPostfix.apply(this,arguments);
    }
}

/**
 * Разыменование записи раздела функцией core.f_unitlist8show_info
 * @param dom
 * @param unit - раздел системы
 * @param primary - ID либо 'ID;ID;ID'
 * @param onSuccess
 */
D3Api.unitShowInfo = function(dom, unit, primary, onSuccess)
{
    D3Api.requestServer({
        url: 'request.php',
        method: 'POST',
        urlData:{ type: 'module', code: 'UnitData/showinfo', unitcode:unit, id: primary },
        contextObj:dom,
        onSuccess: function(resp) {
            r = JSON.parse(resp);
            if (typeof onSuccess === 'function') onSuccess.call(dom, r);
        }
    });
}

/**
 * Изменение DOM-дерева через определенное время
 * @param elapsedMilliseconds миллисекунды
 */
D3Api.requestAnimation = function(elapsedMilliseconds) {
    return new Promise(function(resolve, reject) {
        try {
            var start;
            requestAnimationFrame(function animation(timestamp) {
                if (start === undefined) {
                    start = timestamp;
                }
                const elapsed = timestamp - start;
                if (elapsed < elapsedMilliseconds) {
                    requestAnimationFrame(animation);
                } else {
                    resolve();
                }
            });
        } catch (err) {
            reject(err);
        }
    });
}
MD5 = new function(){
    /*
    * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
    * Digest Algorithm, as defined in RFC 1321.
    * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
    * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
    * Distributed under the BSD License
    * See http://pajhome.org.uk/crypt/md5 for more info.
    */

    /*
    * Configurable variables. You may need to tweak these to be compatible with
    * the server-side, but the defaults work in most cases.
    */
    var hexcase = 0;   /* hex output format. 0 - lowercase; 1 - uppercase        */
    var b64pad  = "";  /* base-64 pad character. "=" for strict RFC compliance   */

    /*
    * These are the functions you'll usually want to call
    * They take string arguments and return either hex or base-64 encoded strings
    */
    this.hex_md5 = function(s)    { return rstr2hex(rstr_md5(str2rstr_utf8(s))); }
    this.b64_md5 = function(s)    { return rstr2b64(rstr_md5(str2rstr_utf8(s))); }
    this.any_md5 = function(s, e) { return rstr2any(rstr_md5(str2rstr_utf8(s)), e); }
    this.hex_hmac_md5 = function(k, d)
    { return rstr2hex(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); }
    this.b64_hmac_md5 = function(k, d)
    { return rstr2b64(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); }
    this.any_hmac_md5 = function(k, d, e)
    { return rstr2any(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)), e); }

    /*
    * Perform a simple self-test to see if the VM is working
    */
    this.md5_vm_test = function()
    {
    return this.hex_md5("abc").toLowerCase() == "900150983cd24fb0d6963f7d28e17f72";
    }

    /*
    * Calculate the MD5 of a raw string
    */
    function rstr_md5(s)
    {
    return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));
    }

    /*
    * Calculate the HMAC-MD5, of a key and some data (raw strings)
    */
    function rstr_hmac_md5(key, data)
    {
    var bkey = rstr2binl(key);
    if(bkey.length > 16) bkey = binl_md5(bkey, key.length * 8);

    var ipad = Array(16), opad = Array(16);
    for(var i = 0; i < 16; i++)
    {
        ipad[i] = bkey[i] ^ 0x36363636;
        opad[i] = bkey[i] ^ 0x5C5C5C5C;
    }

    var hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
    return binl2rstr(binl_md5(opad.concat(hash), 512 + 128));
    }

    /*
    * Convert a raw string to a hex string
    */
    function rstr2hex(input)
    {
    try { hexcase } catch(e) { hexcase=0; }
    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
    var output = "";
    var x;
    for(var i = 0; i < input.length; i++)
    {
        x = input.charCodeAt(i);
        output += hex_tab.charAt((x >>> 4) & 0x0F)
            +  hex_tab.charAt( x        & 0x0F);
    }
    return output;
    }

    /*
    * Convert a raw string to a base-64 string
    */
    function rstr2b64(input)
    {
    try { b64pad } catch(e) { b64pad=''; }
    var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var output = "";
    var len = input.length;
    for(var i = 0; i < len; i += 3)
    {
        var triplet = (input.charCodeAt(i) << 16)
                    | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)
                    | (i + 2 < len ? input.charCodeAt(i+2)      : 0);
        for(var j = 0; j < 4; j++)
        {
        if(i * 8 + j * 6 > input.length * 8) output += b64pad;
        else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);
        }
    }
    return output;
    }

    /*
    * Convert a raw string to an arbitrary string encoding
    */
    function rstr2any(input, encoding)
    {
    var divisor = encoding.length;
    var i, j, q, x, quotient;

    /* Convert to an array of 16-bit big-endian values, forming the dividend */
    var dividend = Array(Math.ceil(input.length / 2));
    for(i = 0; i < dividend.length; i++)
    {
        dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
    }

    /*
    * Repeatedly perform a long division. The binary array forms the dividend,
    * the length of the encoding is the divisor. Once computed, the quotient
    * forms the dividend for the next step. All remainders are stored for later
    * use.
    */
    var full_length = Math.ceil(input.length * 8 /
                                        (Math.log(encoding.length) / Math.log(2)));
    var remainders = Array(full_length);
    for(j = 0; j < full_length; j++)
    {
        quotient = Array();
        x = 0;
        for(i = 0; i < dividend.length; i++)
        {
        x = (x << 16) + dividend[i];
        q = Math.floor(x / divisor);
        x -= q * divisor;
        if(quotient.length > 0 || q > 0)
            quotient[quotient.length] = q;
        }
        remainders[j] = x;
        dividend = quotient;
    }

    /* Convert the remainders to the output string */
    var output = "";
    for(i = remainders.length - 1; i >= 0; i--)
        output += encoding.charAt(remainders[i]);

    return output;
    }

    /*
    * Encode a string as utf-8.
    * For efficiency, this assumes the input is valid utf-16.
    */
    function str2rstr_utf8(input)
    {
    var output = "";
    var i = -1;
    var x, y;

    while(++i < input.length)
    {
        /* Decode utf-16 surrogate pairs */
        x = input.charCodeAt(i);
        y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
        if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)
        {
        x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
        i++;
        }

        /* Encode output as utf-8 */
        if(x <= 0x7F)
        output += String.fromCharCode(x);
        else if(x <= 0x7FF)
        output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),
                                        0x80 | ( x         & 0x3F));
        else if(x <= 0xFFFF)
        output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
                                        0x80 | ((x >>> 6 ) & 0x3F),
                                        0x80 | ( x         & 0x3F));
        else if(x <= 0x1FFFFF)
        output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
                                        0x80 | ((x >>> 12) & 0x3F),
                                        0x80 | ((x >>> 6 ) & 0x3F),
                                        0x80 | ( x         & 0x3F));
    }
    return output;
    }

    /*
    * Encode a string as utf-16
    */
    function str2rstr_utf16le(input)
    {
    var output = "";
    for(var i = 0; i < input.length; i++)
        output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,
                                    (input.charCodeAt(i) >>> 8) & 0xFF);
    return output;
    }

    function str2rstr_utf16be(input)
    {
    var output = "";
    for(var i = 0; i < input.length; i++)
        output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,
                                    input.charCodeAt(i)        & 0xFF);
    return output;
    }

    /*
    * Convert a raw string to an array of little-endian words
    * Characters >255 have their high-byte silently ignored.
    */
    function rstr2binl(input)
    {
    var output = Array(input.length >> 2);
    for(var i = 0; i < output.length; i++)
        output[i] = 0;
    for(var i = 0; i < input.length * 8; i += 8)
        output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (i%32);
    return output;
    }

    /*
    * Convert an array of little-endian words to a string
    */
    function binl2rstr(input)
    {
    var output = "";
    for(var i = 0; i < input.length * 32; i += 8)
        output += String.fromCharCode((input[i>>5] >>> (i % 32)) & 0xFF);
    return output;
    }

    /*
    * Calculate the MD5 of an array of little-endian words, and a bit length.
    */
    function binl_md5(x, len)
    {
    /* append padding */
    x[len >> 5] |= 0x80 << ((len) % 32);
    x[(((len + 64) >>> 9) << 4) + 14] = len;

    var a =  1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d =  271733878;

    for(var i = 0; i < x.length; i += 16)
    {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;

        a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
        d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
        c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
        b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
        a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
        d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
        c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
        b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
        a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
        d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
        c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
        b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
        a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
        d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
        c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
        b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

        a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
        d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
        c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
        b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
        a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
        d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
        c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
        b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
        a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
        d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
        c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
        b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
        a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
        d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
        c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
        b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

        a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
        d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
        c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
        b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
        a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
        d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
        c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
        b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
        a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
        d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
        c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
        b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
        a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
        d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
        c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
        b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

        a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
        d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
        c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
        b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
        a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
        d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
        c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
        b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
        a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
        d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
        c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
        b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
        a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
        d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
        c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
        b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);
    }

    /*
    * These functions implement the four basic operations the algorithm uses.
    */
    function md5_cmn(q, a, b, x, s, t)
    {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
    }
    function md5_ff(a, b, c, d, x, s, t)
    {
    return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    }
    function md5_gg(a, b, c, d, x, s, t)
    {
    return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    }
    function md5_hh(a, b, c, d, x, s, t)
    {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5_ii(a, b, c, d, x, s, t)
    {
    return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    }

    /*
    * Add integers, wrapping at 2^32. This uses 16-bit operations internally
    * to work around bugs in some JS interpreters.
    */
    function safe_add(x, y)
    {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xFFFF);
    }

    /*
    * Bitwise rotate a 32-bit number to the left.
    */
    function bit_rol(num, cnt)
    {
    return (num << cnt) | (num >>> (32 - cnt));
    }
}();
D3Api.notify = function D3Api_showNotify(title,text,options)
{
    if(!D3Api._notifyDom_)
    {
        var c = document.createElement('DIV');
        c.id = 'notify_modal_container';
        c.style.display='none';
        c.style.position = 'fixed';
        c.style.width = '100%';
        c.style.height = '100%';
        c.style.top = '0';
        c.style.left = '0';
        try
        {
            c.style.backgroundColor = 'rgba(0,0,0,0.1)';
        }catch(e)
        {
            c.style.backgroundColor = 'transparent';
        }
        c.onclick = function(){
            var n = this.notify.pop();
            if(!n)
                return;
            if(!n.options.template || n.options.template != 'modal')
                n.close();
        };
        document.body.appendChild(c);
        D3Api._notifyDom_ = c;
        
        c = document.createElement('DIV');
        c.id = 'notify_container';
        c.style.display='none';
        $(c).append('<div id="default"><h1>#{title}</h1><p>#{text}</p></div>');
        $(c).append('<div id="sticky"><a class="ui-notify-close ui-notify-cross" href="#">X</a><a class="ui-notify-code ui-notify-cross" href="#" onclick="D3Api.notify.prototype.notifyObj._func_showCode(this)">#</a><h1>#{title}</h1><textarea class="ui-notify-codearea" readonly="readonly" style="display: none;">#{text}</textarea><p oncontextmenu="D3Api.stopEvent(event,false); return true;">#{brtext}</p>#{footer}</div>');
        $(c).append('<div id="modal"><h1>#{title}</h1><p oncontextmenu="D3Api.stopEvent(event,false); return true;">#{brtext}</p>#{footer}</div>');
        document.body.appendChild(c);
        D3Api.notify.prototype.notifyObj = $('#notify_container').notify();
        D3Api.notify.prototype.notifyObj._func_showCode = function(btn)
        {
            var notify = btn.parentNode;
            var ta = $('textarea',notify).get(0);
            var p = $('p',notify).get(0);
            if(!notify._width_)
            {
                notify._width_ = D3Api.getStyle(notify,'width');
                notify.style.width = 'auto';
                var rect = D3Api.getAbsoluteClientRect(p);
                var w = D3Api.getPageWindowSize();
                ta.style.width = rect.width+'px';
                if(rect.y+rect.height+30 > w.windowHeight)
                {
                    ta.style.height = (w.windowHeight - 30 - rect.y)+'px';
                }else
                {
                    ta.style.height = (rect.height+30)+'px';
                }
                if(rect.width > w.windowWidth)
                {
                    ta.style.width = (w.windowWidth - 40)+'px';
                }
                $(p).hide();
                $(ta).show();
            }else
            {
                notify.style.width = notify._width_;
                notify._width_ = undefined;
                $(ta).hide();
                $(p).show();
            }
        }
        D3Api.notify.prototype.notifyObj._close_all_notify_ = function(){
            $("#notify_container").empty();//удаляем все что внутри
            $('#notify_modal_container').hide(); //скрываем контейнер
            D3Api.notify.prototype.openedSticky = 0;
        }
    }

    options = options || {};
    var template = 'default';
    if(options.modal == true)
    {
        options.expires = false;
        template = (options.template && options.template == 'modal')?'modal':'sticky';
        options.beforeopen = function(ev,notify)
        {
            D3Api.notify.prototype.openedSticky++;
            $('#notify_modal_container').show();
        }
        options.close = function()
        {
            if($("a").is("#notify_btn_msg_all") && $('.ui-notify-message:visible').length<3 ){
                $("#notify_btn_msg_all").closest("div").remove();
            }
            D3Api.notify.prototype.openedSticky--;
            if(D3Api.notify.prototype.openedSticky <= 0)
            {
                D3Api.notify.prototype.openedSticky = 0;
                $('#notify_modal_container').hide();
            }
        }
        options.click = function(e,notify)
        {
            if(options.onclick instanceof Function)
                options.onclick();
            //else
                //notify.close();
        }
    }else if(options.expires === false)
    {
        options.click = function(e,notify)
        {
            notify.close();
        }
    }else if(D3Api.isUndefined(options.expires))
    {
        options.expires = 2000;
    }
    var brtext = text.replace(/\n/g, '<br/>');
    text = text.replace(/<br\/>/g, '\n');
    var res = D3Api.notify.prototype.notifyObj.notify('create',template,{title: title, text: text, brtext: brtext, footer: options.footer||''},options);
    this.notify_modal_container = this.notify_modal_container || $('#notify_modal_container').get(0);
    this.notify_modal_container.notify = this.notify_modal_container.notify || [];
    this.notify_modal_container.notify.push(res);
    if($('.ui-notify-click').length > 1 && !$("a").is("#notify_btn_msg_all")){
        var d = document.createElement('DIV');
        d.className = 'ui-notify-message ui-notify-message-style ui-notify-click';
        $(d).append('   <h1>' +
                    '       <a href="#" cont="btn_msg_mark_all" id="notify_btn_msg_all" class="notify_btn_msg_all" onclick="D3Api.notify.prototype.notifyObj._close_all_notify_()">Закрыть все уведомления</a>' +
                    '   </h1>' +
                    '   <p oncontextmenu="D3Api.stopEvent(event,false); return true;"/>');
        $('.ui-notify-message:first-child').before(d);
    }
    return res;
}
D3Api.notify.prototype.notifyObj = {};
D3Api.notify.prototype.notify_modal_container = null;
D3Api.notify.prototype.openedSticky = 0;
/**
 * @description Функция для вычислении контрольной суммы crc32.
 * @param _data
 * @returns {number}
 */
D3Api.crc32 = function(_data){
    var data = _data;
    var n = [
        0,          1996959894, 3993919788, 2567524794, 124634137,  1886057615, 3915621685, 2657392035,
        249268274,  2044508324, 3772115230, 2547177864, 162941995,  2125561021, 3887607047, 2428444049,
        498536548,  1789927666, 4089016648, 2227061214, 450548861,  1843258603, 4107580753, 2211677639,
        325883990,  1684777152, 4251122042, 2321926636, 335633487,  1661365465, 4195302755, 2366115317,
        997073096,  1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443,
        901097722,  1119000684, 3686517206, 2898065728, 853044451,  1172266101, 3705015759, 2882616665,
        651767980,  1373503546, 3369554304, 3218104598, 565507253,  1454621731, 3485111705, 3099436303,
        671266974,  1594198024, 3322730930, 2970347812, 795835527,  1483230225, 3244367275, 3060149565,
        1994146192, 31158534,   2563907772, 4023717930, 1907459465, 112637215,  2680153253, 3904427059,
        2013776290, 251722036,  2517215374, 3775830040, 2137656763, 141376813,  2439277719, 3865271297,
        1802195444, 476864866,  2238001368, 4066508878, 1812370925, 453092731,  2181625025, 4111451223,
        1706088902, 314042704,  2344532202, 4240017532, 1658658271, 366619977,  2362670323, 4224994405,
        1303535960, 984961486,  2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995,
        1131014506, 879679996,  2909243462, 3663771856, 1141124467, 855842277,  2852801631, 3708648649,
        1342533948, 654459306,  3188396048, 3373015174, 1466479909, 544179635,  3110523913, 3462522015,
        1591671054, 702138776,  2966460450, 3352799412, 1504918807, 783551873,  3082640443, 3233442989,
        3988292384, 2596254646, 62317068,   1957810842, 3939845945, 2647816111, 81470997,   1943803523,
        3814918930, 2489596804, 225274430,  2053790376, 3826175755, 2466906013, 167816743,  2097651377,
        4027552580, 2265490386, 503444072,  1762050814, 4150417245, 2154129355, 426522225,  1852507879,
        4275313526, 2312317920, 282753626,  1742555852, 4189708143, 2394877945, 397917763,  1622183637,
        3604390888, 2714866558, 953729732,  1340076626, 3518719985, 2797360999, 1068828381, 1219638859,
        3624741850, 2936675148, 906185462,  1090812512, 3747672003, 2825379669, 829329135,  1181335161,
        3412177804, 3160834842, 628085408,  1382605366, 3423369109, 3138078467, 570562233,  1426400815,
        3317316542, 2998733608, 733239954,  1555261956, 3268935591, 3050360625, 752459403,  1541320221,
        2607071920, 3965973030, 1969922972, 40735498,   2617837225, 3943577151, 1913087877, 83908371,
        2512341634, 3803740692, 2075208622, 213261112,  2463272603, 3855990285, 2094854071, 198958881,
        2262029012, 4057260610, 1759359992, 534414190,  2176718541, 4139329115, 1873836001, 414664567,
        2282248934, 4279200368, 1711684554, 285281116,  2405801727, 4167216745, 1634467795, 376229701,
        2685067896, 3608007406, 1308918612, 956543938,  2808555105, 3495958263, 1231636301, 1047427035,
        2932959818, 3654703836, 1088359270, 936918e3,   2847714899, 3736837829, 1202900863, 817233897,
        3183342108, 3401237130, 1404277552, 615818150,  3134207493, 3453421203, 1423857449, 601450431,
        3009837614, 3294710456, 1567103746, 711928724,  3020668471, 3272380065, 1510334235, 755167117
    ];
    var r = -1;
    for (var o = 0, l = data.length; o < l; o++) {
        var f = false ? data[o] : data.charCodeAt(o);
        var s = (r ^ f) & 255;
        var i = n[s];
        var r = r >>> 8 ^ i
    }
    return r ^ -1
};
/**
 *
 * @component
 */
D3Api.BaseCtrl = new function()
{
    var baseMethods = {};
    var self = this;
     //Переопределить в каждом контроле, вызывается при парсе компонента
    /**
     *
     * @param _dom
     * @returns {boolean}
     */
    this.init = function(_dom)
    {
        this.init_focus(_dom);
        return true;
    }

    /**
     *
     * @param _dom
     */
    this.init_focus = function(_dom)
    {
        D3Api.addEvent(_dom,'focus',this.ctrl_focus, true);
        D3Api.addEvent(_dom,'blur',this.ctrl_blur, true);
    }

    /**
     *
     * @param e
     */
    this.ctrl_focus = function(e)
    {
        var inp=D3Api.getEventTarget(e);
        var focus_control = D3Api.getControlByDom(inp);

        if(focus_control )
        {
            if(D3Api.getProperty(focus_control,'name') == "lastControl" && !D3Api.getVar('KeyDown_shiftKey')) {
                D3Api.stopEvent(e);
                D3Api.BaseCtrl.focusNextElement(focus_control, 2);
                D3Api.setVar('KeyDown_shiftKey', null);
                return;
            }
            else if(D3Api.getProperty(focus_control,'name') == "firstControl")
            {
                D3Api.stopEvent(e);
                if(D3Api.getVar('KeyDown_shiftKey') === true)
                    D3Api.BaseCtrl.focusNextElement(focus_control, -2);
                else
                    D3Api.BaseCtrl.focusNextElement(focus_control, 1);
                D3Api.setVar('KeyDown_shiftKey', null);
                return;
            }

            D3Api.setVar('focus_control', focus_control);
            D3Api.addClass(focus_control, 'focus');
        }
    }

    /**
     *
     * @param e
     */
    this.ctrl_blur = function(e)
    {
        var focus_control = D3Api.getVar('focus_control');
        if(!focus_control)
            return;

        D3Api.removeClass(focus_control, 'focus');
        D3Api.setVar('focus_control', null);
    }

    /**
     *
     * @param dom
     * @param delta
     */
    this.focusNextElement = function(dom, delta){
        var focussableElements = 'input:not([disabled]), [tabindex]:not([disabled]):not([tabindex="-1"])';
        if (!dom)
            return;

        var focussable = Array.prototype.filter.call(dom.D3Form.DOM.querySelectorAll(focussableElements),
            function(element){
                return element.offsetWidth > 0 || element.offsetHeight > 0
            });

        var index = focussable.indexOf(dom);

        if((index+delta) < 0)
            var inp = focussable[focussable.length + delta];
        else if((index+delta)> (focussable.length -1))
            var inp = focussable[index + delta - focussable.length];
        else
            var inp = focussable[index + delta];

        var focus_control = D3Api.getControlByDom(inp);

        if(inp == focus_control)
            focus_control.focus();
        else
            D3Api.setControlPropertyByDom(focus_control, 'focus', true);
    }
    //Переопределить в каждом контроле, вызывается при запросе данных и получении ответа

    /**
     *
     * @param _dom
     * @returns {boolean}
     */
    this.startWait = function(_dom)
    {
        return true;
    }

    /**
     *
     * @param _dom
     * @returns {boolean}
     */
    this.stopWait = function(_dom)
    {
        return true;
    }

    /**
     *
     * @param _dom
     * @param method
     * @returns {*}
     */
    this.callMethod = function(_dom,method)
    {
        var ct = D3Api.getProperty(_dom,'cmptype');
        if (!ct)
        {
            //D3Api.debug_msg('У объекта нет API');
            return;
        }
        var baseMethod = false;
        if (!D3Api.controlsApi[ct] || !D3Api.controlsApi[ct]._API_ || !D3Api.controlsApi[ct]._API_[method])
        {
            if(!baseMethods[method] || !D3Api.BaseCtrl[method])
            {    
                //D3Api.debug_msg('Нет метода "'+method+'" для компонента с типом: '+ct);
                return;
            }
            baseMethod = true;
        }
        var args = Array.prototype.slice.call(arguments);
        args.splice(1,1);
        return (baseMethod)?D3Api.BaseCtrl[method].apply(this,args):D3Api.controlsApi[ct]._API_[method].apply(this, args);
    }

    /**
     *
     * @param domSrc
     * @param eventName
     * @param argsName
     * @param defaultEventFunc
     * @param domDest
     */
    this.initEvent = function Base_InitEvent(domSrc,eventName,argsName,defaultEventFunc,domDest)
    {
        domDest = domDest || domSrc;
        var ev = D3Api.getProperty(domSrc, eventName, defaultEventFunc);
        if(ev)
            domDest.D3Base.addEvent(eventName,domDest.D3Form.execDomEventFunc(domDest, (argsName)?{func: ev, args: argsName}:ev,undefined,domDest.D3Form.currentContext));
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getName = function Base_getName(_dom)
    {
        return D3Api.getProperty(_dom,'name',null);
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setName = function Base_setName(_dom,_value)
    {
        D3Api.setProperty(_dom,'name',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getWidth = function Base_getWidth(_dom)
    {
        return _dom.style.width;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setWidth = function Base_setWidth(_dom,_value)
    {
        var v = +_value;
        if (isNaN(v))
            _dom.style.width = _value;
        else
            _dom.style.width = _value+'px';
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getHeight = function Base_getHeight(_dom)
    {
        return _dom.style.height;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setHeight = function Base_setHeight(_dom,_value)
    {
        var v = +_value;
        if (isNaN(v))
            _dom.style.height = _value;
        else
            _dom.style.height = _value+'px';
    }

    /**
     *
     * @param _dom
     * @returns {number}
     */
    this.getRealWidth = function Base_getRealWidth(_dom)
    {
        return _dom.offsetWidth;
    }

    /**
     *
     * @param _dom
     * @returns {number}
     */
    this.getRealHeight = function Base_getRealHeight(_dom)
    {
        return _dom.offsetHeight;
    }

    /**
     *
     * @param _dom
     * @returns {boolean}
     */
    this.getEnabled = function Base_getEnabled(_dom)
    {
        return !D3Api.hasClass(_dom,'ctrl_disable');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setEnabled = function Base_setEnabled(_dom,_value)
    {
        if (D3Api.getBoolean(_value))
            D3Api.removeClass(_dom,'ctrl_disable');
        else
            D3Api.addClass(_dom,'ctrl_disable');
    }

    /**
     *
     * @param _dom
     * @returns {boolean}
     */
    this.getVisible = function Base_getVisible(_dom)
    {
        return !D3Api.hasClass(_dom,'ctrl_hidden');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setVisible = function Base_setVisible(_dom,_value)
    {
        if (D3Api.getBoolean(_value))
            D3Api.removeClass(_dom,'ctrl_hidden');
        else
            D3Api.addClass(_dom,'ctrl_hidden');
        
        var form = _dom.D3Form;
        if(!_dom.D3Form)
        {
            form = D3Api.getControlByDom(_dom).D3Form;
        }
        form.resize();
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getHint = function Base_getHint(_dom)
    {
        return _dom.title;
    }

    /**
     *
     * @param _dom
     * @param _value
     * @returns {*}
     */
    this.setHint = function Base_setHint(_dom,_value)
    {
        return _dom.title = _value;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setFocus = function Base_setFocus(_dom,_value)
    {
        var inpEl = D3Api.getChildTag(_dom, 'input', 0);
        if (!inpEl)
            inpEl = D3Api.getChildTag(_dom, 'textarea', 0);
        if (!inpEl)
        {
            _dom.focus();
            return;
        }
        
        if (D3Api.getBoolean(_value))
            setTimeout(function(){inpEl.focus();},10);
        else
            setTimeout(function(){inpEl.blur();},10);
    }

    /**
     *
     * @param _dom
     * @param _value
     * @returns {*|boolean}
     */
    this.getWarning = function(_dom,_value)
    {
        return D3Api.hasClass(_dom,'ctrl_warning');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setWarning = function(_dom,_value)
    {
        if (D3Api.getBoolean(_value))
            D3Api.addClass(_dom,'ctrl_warning');
        else
            D3Api.removeClass(_dom,'ctrl_warning');
    }    
    
    /**
     *
     * @param _dom
     * @param _value
     * @returns {*|boolean}
     */
    this.getError = function(_dom,_value)
    {
        return D3Api.hasClass(_dom,'ctrl_error');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setError = function(_dom,_value)
    {
        if (D3Api.getBoolean(_value))
            D3Api.addClass(_dom,'ctrl_error');
        else
            D3Api.removeClass(_dom,'ctrl_error');
    }   

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getValue = function(dom)
    {
        if(D3Api.getProperty(dom,'cmptype') != 'Base') return;
        var inp = D3Api.getChildTag(dom,'input',0)||D3Api.getChildTag(dom,'textarea',0);
        if(inp)
            return (inp.value == null)?'':inp.value;
        else
            return D3Api.getProperty(dom,'keyvalue','');
    }

    /***
     *
     * @param dom
     * @param value
     */
    this.setValue = function(dom,value)
    {
        if(D3Api.getProperty(dom,'cmptype') != 'Base') return;
        var inp = D3Api.getChildTag(dom,'input',0)||D3Api.getChildTag(dom,'textarea',0);
        if(inp)
            inp.value = value;
        else
            D3Api.setProperty(dom,'keyvalue',value);
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getInput = function(dom)
    {
        if(D3Api.getProperty(dom,'cmptype') != 'Base') return;
        var inp = D3Api.getChildTag(dom,'input',0)||D3Api.getChildTag(dom,'textarea',0);
        return inp;
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getCaption = function(dom)
    {
        if(D3Api.getProperty(dom,'cmptype') != 'Base') return;
        var inp = D3Api.getChildTag(dom,'input',0)||D3Api.getChildTag(dom,'textarea',0);
        if(inp)
            return (inp.value == null)?'':inp.value;
        else
            return D3Api.getTextContent(dom);
    }

    /**
     *
     * @param dom
     * @param value
     */
    this.setCaption = function(dom,value)
    {
        if(D3Api.getProperty(dom,'cmptype') != 'Base') return;
        var inp = D3Api.getChildTag(dom,'input',0)||D3Api.getChildTag(dom,'textarea',0);
        if(inp)
            inp.value = value;
        else
            dom.innerHTML = D3Api.htmlSpecialChars(value);
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getHtml = function(dom)
    {
        return dom.innerHTML;
    }

    /**
     *
     * @param dom
     * @param value
     */
    this.setHtml = function(dom,value)
    {
        dom.innerHTML = value;
    }
}

/**
 * Свойство
 * get - функция получения значения свойства, если null то берется атрибут
 * set - функция установки значения свойства, если null то устанавливается атрибут
 * type - тип свойства: property, event
 * value_type - тип значения свойства: string(поумолчанию),number,boolean,list
 * value_list - массив значений, если value_type: list
 * value_default - значение по умолчанию
 */
D3Api.ControlBaseProperties = function(controlAPI)
{
    this._API_ = controlAPI || D3Api.BaseCtrl;
    this.name = {get: D3Api.BaseCtrl.getName, set: D3Api.BaseCtrl.setName, type: 'string'};
    this.value = {get: D3Api.BaseCtrl.getValue, set: D3Api.BaseCtrl.setValue, type: 'string'};
    this.caption = {get: D3Api.BaseCtrl.getCaption, set: D3Api.BaseCtrl.setCaption, type: 'string'};
    this.width = {get: D3Api.BaseCtrl.getWidth, set: D3Api.BaseCtrl.setWidth, type: 'string'};
    this.height = {get: D3Api.BaseCtrl.getHeight, set: D3Api.BaseCtrl.setHeight, type: 'string'};
    this.real_width = {get: D3Api.BaseCtrl.getRealWidth, type: 'number'};
    this.real_height = {get: D3Api.BaseCtrl.getRealHeight, type: 'number'};
    this.enabled = {get: D3Api.BaseCtrl.getEnabled, set: D3Api.BaseCtrl.setEnabled, type: 'boolean'};
    this.visible = {get: D3Api.BaseCtrl.getVisible, set: D3Api.BaseCtrl.setVisible, type: 'boolean'};
    this.hint = {get: D3Api.BaseCtrl.getHint, set: D3Api.BaseCtrl.setHint, type: 'string'};
    this.focus = {set: D3Api.BaseCtrl.setFocus, type: 'boolean'};
    this.warning = {set: D3Api.BaseCtrl.setWarning, get: D3Api.BaseCtrl.getWarning, type: 'boolean'};
    this.error = {set: D3Api.BaseCtrl.setError, get: D3Api.BaseCtrl.getError, type: 'boolean'};
    this.html = {get: D3Api.BaseCtrl.getHtml, set: D3Api.BaseCtrl.setHtml, type: 'string'};
    this.input = {get: D3Api.BaseCtrl.getInput, type: 'dom'};
}


D3Api.controlsApi['Base'] = new D3Api.ControlBaseProperties();
//Глобальные вспомогательные функции
 /**
       loadScript("/engine/classes/js/jquery.pickmeup.min.js").then(function(){
           console.log("js ready");
       },function(error){
           console.log(error);
       })

       loadCSS("/engine/classes/css/pickmeup.min.css").then(function(){
           console.log("css ready");
       },function(error){
           console.log(error);
       })
 */

    window.loadScript = function(src,_timeout) {
           return new Promise(function(resolve, reject){
               if(!src){
                   reject(new TypeError("filename is missing"));
                   return;
               }

               var script=document.createElement("script"),
                   timer,
                   head=document.getElementsByTagName("head")[0];


               head.appendChild(script);

               function leanup(){
                   clearTimeout(timer);
                   timer=null;
                   script.onerror=script.onreadystatechange=script.onload=null;
               }

               function onload(){
                   leanup();
                   if(!script.onreadystatechange||(script.readyState&&script.readyState=="complete")){
                       resolve(script);
                   }
               }

               script.onerror=function(error){
                   leanup();
                   head.removeChild(script);
                   script=null;
                   reject(new Error("network"));
               };

               if (script.onreadystatechange === undefined) {
                   script.onload = onload;
               } else {
                   script.onreadystatechange = onload;
               }

               timer=setTimeout(script.onerror,_timeout||30000);
               script.setAttribute("type", "text/javascript");
               script.setAttribute("src", src);
           });
       }
      function loadCSS (src, _timeout) {
           var css = document.createElement('link'), c = 1000;
           document.getElementsByTagName('head')[0].appendChild(css);
           css.setAttribute("rel", "stylesheet");
           css.setAttribute("type", "text/css");


           return new Promise(function(resolve, reject){
               var c=(_timeout||10)*100;
               if(src) {
                   css.onerror = function (error) {
                       if(timer)clearInterval(timer);
                       timer = null;

                       reject(new Error("network"));
                   };

                   var sheet, cssRules, timer;
                   if ('sheet' in css) {
                       sheet = 'sheet';
                       cssRules = 'cssRules';
                   }
                   else {
                       sheet = 'styleSheet';
                       cssRules = 'rules';
                   }
                   timer = setInterval(function(){
                       try {
                           if (css[sheet] && css[sheet][cssRules].length) {
                               clearInterval(timer);
                               timer = null;
                               resolve(css);
                               return;
                           }
                       }catch(e){}

                       if(c--<0){
                           clearInterval(timer);
                           timer = null;
                           reject(new Error("timeout"));
                       }
                   }, 10);

                   css.setAttribute("href", src);
               }else{
                   reject(new TypeError("filename is missing"));
               }
           });
       }

function ClassGlobalClientData(){
    this.storage = {};
    if (window['localStorage'])
    {
        this.storage = window.localStorage;
    }else if (window['globalStorage'])
    {
        this.storage = window.globalStorage[document.domain];
    }

    this.get = function(name){
        return String(this.storage[name]);
    };
    this.set = function(name,value){
        this.storage[name] = value;
    }
}
var globalClientData = new ClassGlobalClientData();

if (!("console" in window) || !("log" in console))
{
    var names = ["log", "debug", "info", "warn", "error", "assert", "dir", "dirxml",
    "group", "groupEnd", "time", "timeEnd", "count", "trace", "profile", "profileEnd"];

    window.console = {};
    for (var i = 0; i < names.length; ++i)
        window.console[names[i]] = function() {}
}
if(!Array.indexOf){
    Array.indexOf=function(inArray,value,offset){
        for(var i=(offset||0),j=inArray.length;i<j;i++){
            if(inArray[i]==value){return i;}
        }
        return -1;
    }
}
function getStyle(oElm, strCssRule){
    var strValue = "";
    if(document.defaultView && document.defaultView.getComputedStyle){
        strValue = document.defaultView.getComputedStyle(oElm, "").getPropertyValue(strCssRule);
    }
    else if(oElm.currentStyle){
        strCssRule = strCssRule.replace(/\-(\w)/g, function (strMatch, p1){
            return p1.toUpperCase();
        });
        strValue = oElm.currentStyle[strCssRule];
    }
    return strValue;
}

function indexOf(_name){
    for(var index=0;index<this.length;index++){
        if(this[index]==_name)return index;
    }
    return -1;
}
function onEnter(_callBackMethod,_callBackObject,_value){
    var evt=arguments.callee.caller.arguments[0]||window.event;
    if(evt.keyCode==13)(new DEvent(_callBackMethod,_callBackObject)).call(evt,_value);
}
function onEscape(_callBackMethod,_callBackObject,_value){
    var evt=arguments.callee.caller.arguments[0]||window.event;
    if(evt.keyCode==27)(new DEvent(_callBackMethod,_callBackObject)).call(evt,_value);
}
function GetConteiner(_domObject, _cmptype)
{
    if (hasProperty(_domObject, 'cmptype'))
    if (_domObject.attributes['cmptype'].value == _cmptype)
        return _domObject;

        return  GetConteiner(_domObject.parentNode, _cmptype);
}
function GetArrayToStringWithSlashes(_array,_slash)
{
    showError('РџРѕРїСЂР°РІРёР» Р±Р°Рі[edit by snifer] - С„СѓРЅРєС†РёСЏ GetArrayToStringWithSlashes РЅРµ РЅСѓР¶РЅР°!!! - РѕРЅР° Р±СѓРґРµС‚ СѓРґР°Р»РµРЅР° !!! РІРјРµСЃС‚Рѕ РЅРµРµ РЅСѓР¶РЅРѕ РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊ СЃРёС€РЅС‹Р№ РѕР±СЂР°Р±РѕС‚С‡РёРє Р° РёРјРµРЅРЅРѕ[String=array.join(<separator>);]!');
    return _array.join(_slash);
}
function strParsToArr(_str, _separator)/*РёР· СЃС‚СЂРѕРєРё СЃ СЂР°Р·РґРµР»РёС‚РµР»СЏРјРё _separator С„РѕСЂРјРёСЂСѓРµС‚ РјР°СЃСЃРёРІ РќР°РїСЂРёРјРµСЂ СЃС‚СЂРѕРєР°= "РѕРґРёРЅ;РґРІР°;С‚СЂРё;" СЃС„РѕСЂРјРёСЂСѓРµС‚ РјР°СЃСЃСЃРёРІ array(1=>'РѕРґРёРЅ', 2=>'РґРІР°', 3=>'С‚СЂРё')*/
{
    //showError('(Edit by snifer)this is not correct use documentation for javascript(function is strParsToArr) this action run by this primer[String.split(separator)] this function must be deleted!!!');
    return _str.split(_separator);
}

function GetEnabled(_dom)
{
    var _check = getProperty(_dom, 'enabled', 'true');
    if (_check=='true') return true;
    return false;
}

function GetLinesCount(_Text)
{
    var l_Arr = _Text.split(String.fromCharCode(10));
    return l_Arr.length + 1;
}

//С„СѓРЅРєС†РёСЏ СѓСЃС‚Р°РЅРѕРІРєРё РІС‹СЃРѕС‚С‹ С‚РµРєСЃС‚РѕРІРѕР№ РѕР±Р»Р°СЃС‚Рё РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ РІС‹СЃРѕС‚С‹ СЃРѕРґРµСЂР¶РёРјРѕРіРѕ.
function GetLinesTextArea(textarea)
{
    if (textarea.nodeName == "TABLE")
    {
        var ta = getChildTag(textarea,'textarea',0);
        var dif = ta.scrollHeight - ta.clientHeight;
        if (isNaN(parseInt(textarea.style.height))){
            textarea.style.height = ta.scrollHeight + 6 + "px";
        }else{
            textarea.style.height = parseInt(ta.style.height) + dif + 6 + "px";
        }
    }else
    {
        var dif = textarea.scrollHeight - textarea.clientHeight;
        if (isNaN(parseInt(textarea.style.height))){
            textarea.style.height = textarea.scrollHeight + 6 + "px";
        }else{
            textarea.style.height = parseInt(textarea.style.height) + dif + 6 + "px";
        }
    }
}


//---------Absolute Size and MouseCoord------------------------------------

function GetPageWindowSize(parent)
{
    parent = parent || document.body;
    var windowWidth, windowHeight;
    var pageHeight, pageWidth;
    if (parent != document.body) {
      windowWidth = parent.getWidth();
      windowHeight = parent.getHeight();
      pageWidth = parent.scrollWidth;
      pageHeight = parent.scrollHeight;
    }
    else {
      var xScroll, yScroll;

      if (window.innerHeight && window.scrollMaxY) {
        xScroll = document.body.scrollWidth;
        yScroll = window.innerHeight + window.scrollMaxY;
      } else if (document.body.scrollHeight > document.body.offsetHeight){ // all but Explorer Mac
        xScroll = document.body.scrollWidth;
        yScroll = document.body.scrollHeight;
      } else { // Explorer Mac...would also work in Explorer 6 Strict, Mozilla and Safari
        xScroll = document.body.offsetWidth;
        yScroll = document.body.offsetHeight;
      }


      if (self.innerHeight) {  // all except Explorer
        windowWidth = self.innerWidth;
        windowHeight = self.innerHeight;
      } else if (document.documentElement && document.documentElement.clientHeight) { // Explorer 6 Strict Mode
        windowWidth = document.documentElement.clientWidth;
        windowHeight = document.documentElement.clientHeight;
      } else if (document.body) { // other Explorers
        windowWidth = document.body.clientWidth;
        windowHeight = document.body.clientHeight;
      }

      // for small pages with total height less then height of the viewport
      if(yScroll < windowHeight){
        pageHeight = windowHeight;
      } else {
        pageHeight = yScroll;
      }

      // for small pages with total width less then width of the viewport
      if(xScroll < windowWidth){
        pageWidth = windowWidth;
      } else {
        pageWidth = xScroll;
      }
    }
    return {pageWidth: pageWidth ,pageHeight: pageHeight , windowWidth: windowWidth, windowHeight: windowHeight};
}

function getAbsoluteSize(element){
    if(!element) return;
    var display = element.style.display;
    if (display != 'none' && display != null) // Safari bug
    return {width: element.offsetWidth, height: element.offsetHeight};

    // All *Width and *Height properties give 0 on elements with display none,
    // so enable the element temporarily
    var els = element.style;
    var originalVisibility = els.visibility;
    var originalPosition = els.position;
    var originalDisplay = els.display;
    els.visibility = 'hidden';
    els.position = 'absolute';
    els.display = 'block';
    var originalWidth = element.clientWidth;
    var originalHeight = element.clientHeight;
    els.display = originalDisplay;
    els.position = originalPosition;
    els.visibility = originalVisibility;
    return {width: originalWidth, height: originalHeight};
}
function getAbsoluteRect(element,scrollNeed){
        if(!element) return;
        var pos=getAbsolutePos(element);
        var size=getAbsoluteSize(element);
        if (scrollNeed)
        {
            pos.x -= getBodyScrollLeft();
            pos.y -= getBodyScrollTop();
        }
        return {x:pos.x, y:pos.y, width:size.width, height:size.height};
}
function getAbsoluteClientRect(elem,xScroll,yScroll) {
    var rect = elem.getBoundingClientRect();

    var scrollTop = getBodyScrollTop();
    var scrollLeft = getBodyScrollLeft()

    var coordy  = rect.top + ((yScroll === false)?0:scrollTop);
    var coordx = rect.left + ((xScroll === false)?0:scrollLeft);

    return {y: Math.round(coordy), x: Math.round(coordx), width: rect.width,height: rect.height};
}
function getBodyScrollTop()
{
  return self.pageYOffset || (document.documentElement && document.documentElement.scrollTop) || (document.body && document.body.scrollTop);
}

function getBodyScrollLeft()
{
  return self.pageXOffset || (document.documentElement && document.documentElement.scrollLeft) || (document.body && document.body.scrollLeft);
}
function getPageEventCoords(evt,fixed)
{
    var coords = {left:0, top:0};
        if(fixed && evt.clientX)
        {
            coords.left = evt.clientX;
            coords.top  = evt.clientY;
        }else if(evt.pageX)
    {
        coords.left = evt.pageX;
        coords.top = evt.pageY;
                if(fixed)
                {
                    coords.left -= getBodyScrollLeft();
                    coords.left -= getBodyScrollTop();
                }
    }
    else if(evt.clientX)
    {
        coords.left = evt.clientX + document.body.scrollLeft - document.body.clientLeft;
        coords.top  = evt.clientY + document.body.scrollTop - document.body.clientTop;

        if (document.body.parentElement && document.body.parentElement.clientLeft)
        {
        var bodParent = document.body.parentElement;
            coords.left += bodParent.scrollLeft - bodParent.clientLeft;
            coords.top  += bodParent.scrollTop - bodParent.clientTop;
        }
    }
    return coords;
}

function hasstr_dataset(_value)
{
    return /\w_dataset$/.test(_value);
}

//----РЅРµ РїСѓСЃС‚РѕРµ Р·РЅР°С‡РµРЅРёРµ--------------

 function blank(_value)
 {
     return /^\s*$/.test(_value);
 }

 function empty(_value)
 {
     if(_value==null || _value=='null' || blank(_value) || _value=="" || _value=='undefined' || _value==undefined || _value=='NaN')return true;
     return false;
 }

 function toUpperFirstCase(_str)
 {
    if(empty(_str)) return '';
    var first = _str.substr(0,1);
    var last = _str.substring(1,_str.length);
    return first.toUpperCase() + last.toLowerCase();
 }
  function toUpperCase(_Name)
 {
    var _dom = getControlByName(_Name);
    var val = getControlValue(_dom);
    setControlValue(_dom,val.toUpperCase());
 }
 //----СЃСЂР°РІРЅРµРЅРёРµ 2С… РґР°С‚, РµСЃР»Рё РїРµСЂРІР°СЏ РјРµРЅСЊС€Рµ РїСЂРµРІРµРґСѓС‰РµР№ Рё РѕРЅРё РЅРµ СЂР°РІРЅС‹ РІРѕР·РІСЂР°С‰Р°РµС‚ true (!СЂР°Р±РѕС‚Р°РµС‚ РµСЃР»Рё РЅР° С„РѕСЂРјРµ РµСЃС‚СЊ РєРѕРјРїР°РЅРµРЅС‚ РєР°Р»РµРЅРґР°СЂСЊ)
 // Р·Р°РјРµС‡Р°РЅРёРµ: РѕР±Р° РєРѕРЅС‚СЂРѕР»Р° Рґ.Р±. РґРѕСЃС‚СѓРїРЅС‹ РґР»СЏ РёР·РјРµРЅРµРЅРёСЏ
 function getDateCompare(_str_date1,_str_date2)
 {
    var _str_date1 = new Date(Date.parseDate(_str_date1,'%d.%m.%Y')).getTime();
    var _str_date2 = new Date(Date.parseDate(_str_date2,'%d.%m.%Y')).getTime();
    if(_str_date1 > _str_date2) return false;
    else return true;
 }

 function CheckDatesBeginEnd(_DateB_ctrlname,_DateE_ctrlname)
 {
        base().ChangeBeginDate = function(_DomElement,_ControlName,_PropName,_PropValue)
        {
            if(_PropName != 'value') return;
            var endDate = getValue(_DateE_ctrlname);
            if(!empty(_PropValue) && !empty(endDate))
            {
                if(getDateCompare(_PropValue,endDate)==false)
                {
                    setControlProperty(_DateB_ctrlname,'value','');
                    alert('Р”Р°С‚Р° РЅР°С‡Р°Р»Р° РїРµСЂРёРѕРґР° РґРѕР»Р¶РЅР° Р±С‹С‚СЊ РјРµРЅСЊС€Рµ, С‡РµРј РґР°С‚Р° РєРѕРЅС†Р° РїРµСЂРёРѕРґР°');
                }
            }
        }

        getPage(0).addListener('onchangeproperty'+_DateB_ctrlname,base().ChangeBeginDate,false,false);

        base().ChangeBeginDate_1 = function ()
        {
            if (getControlProperty(_DateE_ctrlname, 'enabled') == false && getControlProperty(_DateB_ctrlname, 'enabled') == false) return;
            var beginDate = getValue(_DateB_ctrlname);
            var endDate = getValue(_DateE_ctrlname);
            if(!empty(beginDate) && !empty(endDate))
            {
                if(getDateCompare(beginDate,endDate)==false)
                {
                    setControlProperty(_DateB_ctrlname,'value','');
                    alert('Р”Р°С‚Р° РЅР°С‡Р°Р»Р° РїРµСЂРёРѕРґР° РґРѕР»Р¶РЅР° Р±С‹С‚СЊ РјРµРЅСЊС€Рµ, С‡РµРј РґР°С‚Р° РєРѕРЅС†Р° РїРµСЂРёРѕРґР°');
                }
            }
        }
        addEvent(getControlByName(_DateB_ctrlname).firstChild,'blur',base().ChangeBeginDate_1);


        base().ChangeEndDate = function(_DomElement,_ControlName,_PropName,_PropValue)
        {
            if(_PropName != 'value') return;
            var beginDate = getControlProperty(_DateB_ctrlname,'value');
            if(!empty(_PropValue) && !empty(beginDate))
            {
                if(getDateCompare(beginDate,_PropValue)==false)
                {
                    setControlProperty(_DateE_ctrlname,'value','');
                    alert('Р”Р°С‚Р° РєРѕРЅС†Р° РїРµСЂРёРѕРґР° РґРѕР»Р¶РЅР° Р±С‹С‚СЊ Р±РѕР»СЊС€Рµ, С‡РµРј РґР°С‚Р° РЅР°С‡Р°Р»Р° РїРµСЂРёРѕРґР°');
                }
            }
        }
        getPage(0).addListener('onchangeproperty'+_DateE_ctrlname,base().ChangeEndDate,false,false);

        base().ChangeEndDate_1 = function ()
        {
            if (getControlProperty(_DateE_ctrlname, 'enabled') == false && getControlProperty(_DateB_ctrlname, 'enabled') == false) return;
            var beginDate = getValue(_DateB_ctrlname);
            var endDate = getValue(_DateE_ctrlname);
            if(!empty(beginDate) && !empty(endDate))
            {
                if(getDateCompare(beginDate,endDate)==false)
                {
                    setControlProperty(_DateE_ctrlname,'value','');
                    alert('Р”Р°С‚Р° РєРѕРЅС†Р° РїРµСЂРёРѕРґР° РґРѕР»Р¶РЅР° Р±С‹С‚СЊ Р±РѕР»СЊС€Рµ, С‡РµРј РґР°С‚Р° РЅР°С‡Р°Р»Р° РїРµСЂРёРѕРґР°');
                }
            }
        }
        addEvent(getControlByName(_DateE_ctrlname).firstChild,'blur',base().ChangeEndDate_1);
 }

/*Р”Р»СЏ РїСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРµ С‚РёРїРѕРІ С‡РёСЃРµР» РїРѕР»СѓС‡Р°РµРјС‹С… РёР· Р±Р°Р·С‹
РќР°РїСЂРёРјРµСЂ: РёР· Р±Р°Р·С‹ РїСЂРёС€Р»Рѕ С‡РёСЃР»Рѕ 9,89 РґР»СЏ JS - СЌС‚Рѕ С‚РµРєСЃС‚ РёР»Рё С‡РёСЃР»Рѕ 9
Р§С‚РѕР±С‹ РєРѕСЂСЂРµРєС‚РЅРѕ РµРіРѕ СЂР°Р·РѕР±СЂР°С‚СЊ Рё РїСЂРёРІРµСЃС‚Рё Рє Float
        parseToJSFloat('9,89'); РІРµСЂРЅРµС‚ 9.89
Рё РѕР±СЂР°С‚РЅРѕ     parseToOracleFloat(9.89); РІРµСЂРЅРµС‚ '9,89'
*/
function parseToJSFloat(Num){
    Num = String(Num);
    if(Num.indexOf(',')!=-1) Num=Num.replace(',','.');
    return Number(Num);
}
function parseToOracleFloat(Num){
    Num = String(Num);
    if(Num.indexOf('.')!=-1) Num=Num.replace('.',',');
    return Num;
}

function getFirstAndLastDaysOfMonth(_dateStr, _dateFormat)
{
    var currDate = null;

    if (typeof(_dateStr) == 'undefined')
    {
        currDate = new Date();
    }
    else
    {
        if (typeof(_dateFormat) == 'undefined') _dateFormat = '%d.%m.%Y';
        currDate = Date.parseDate(_dateStr, _dateFormat);
    }

    var month = currDate.getMonth() + 1;
    var year  = currDate.getYear() + 1900;

    var nextMonth = new Date(year, month, 1);
    var lastDayOfMonth = new Date(nextMonth - 1);

    if (month < 10) month = '0' + month;

    return { 'first': '01.' + month + '.' + year, 'last': lastDayOfMonth.getDate() + '.' + month + '.' + year};
}

function getPrevMonth(_dateStr, _dateFormat)
{
    var currDate = null;

    if (typeof(_dateStr) == 'undefined')
    {
        currDate = new Date();
    }
    else
    {
        if (typeof(_dateFormat) == 'undefined') _dateFormat = '%d.%m.%Y';
        currDate = Date.parseDate(_dateStr, _dateFormat);
    }

    var day = currDate.getDate();
    var result = new Date(currDate - day * 24 * 60 * 60 * 1000);

    var datesFirstLast = getFirstAndLastDaysOfMonth(result.getDate() + '.' + (result.getMonth() + 1) + '.' + (1900 + result.getYear()), '%d.%m.%Y');
    var lastDay = Number(datesFirstLast.last.split('.')[0]);
    if (day > lastDay ) day = lastDay ;

    var month = result.getMonth() + 1;
    if (month < 10) month = '0' + month;
    if (day < 10) day = '0' + day;

    return day + '.' + month + '.' + (1900 + result.getYear());
}

function getNexMonth(_dateStr, _dateFormat)
{
    var currDate = null;

    if (typeof(_dateStr) == 'undefined')
    {
        currDate = new Date();
    }
    else
    {
        if (typeof(_dateFormat) == 'undefined') _dateFormat = '%d.%m.%Y';
        currDate = Date.parseDate(_dateStr, _dateFormat);
    }

    var day = currDate.getDate();
    var result = new Date(currDate.getYear() + 1900, currDate.getMonth() + 1, 1);

    var datesFirstLast = getFirstAndLastDaysOfMonth(result.getDate() + '.' + (result.getMonth() + 1) + '.' + (1900 + result.getYear()), '%d.%m.%Y');
    var lastDay = Number(datesFirstLast.last.split('.')[0]);
    if (day > lastDay ) day = lastDay ;

    var month = result.getMonth() + 1;
    if (month < 10) month = '0' + month;
    if (day < 10) day = '0' + day;

    return day + '.' + month + '.' + (1900 + result.getYear());
}
function getFullDays(_firstDate, _secondDate, _dateFormat)
{
    if (typeof(_dateFormat) == 'undefined') _dateFormat = '%d.%m.%Y';
    _firstDate = Date.parseDate(_firstDate, _dateFormat);
    _secondDate = Date.parseDate(_secondDate, _dateFormat);

    if(_firstDate < _secondDate)
        return Math.round(Math.abs((_firstDate.getTime() - _secondDate.getTime())/(24*60*60*1000)));

    return 0;
}
//parseToRussianFormat РІРѕР·РІСЂР°С‰Р°РµС‚ СЃС‚СЂРѕРєСѓ
function parseToRussianFormat(Number,fractNum) {
    var triadSeparator=' '; //СЂР°Р·РґРµР»РёС‚РµР»СЊ С‚С‹СЃСЏС‡РЅС‹С…
    var decSeparator=','; //СЂР°Р·РґРµР»РёС‚РµР»СЊ Р·Р°РїСЏС‚С‹С…
     if (typeof(fractNum)=='undefined') fractNum = 2;
    Number = Number.toFixed(fractNum);
    var num = parseInt(Number).toString();
    var numd = Number.toString();
    numd = numd.toString().substr(numd.indexOf('.')+1, fractNum);
    while (numd.length<fractNum)
    numd += '0';
    var regEx = /(-?\d+)(\d{3})/;
    while (regEx.test(num)) {num = num.replace(regEx,"$1"+triadSeparator+"$2");}
    if (numd)
    {num += decSeparator+numd;}
    return num;
}
function checkNumbToOracle(_CompName){
    if(!empty(getValue(_CompName)))
    {
        setValue(_CompName,parseToOracleFloat(getValue(_CompName)));
    }
}
//-------------------------------------
/**
* РћР±СЊРµРєС‚ С‡РµСЂРµР· РєРѕС‚РѕСЂС‹Р№ РјС‹ Рё Р±СѓРґРµРј СЂР°Р±РѕС‚Р°С‚СЊ СЃ С‚РµРєСЃС‚РѕРІС‹РјРё РїРѕР»СЏРјРё.
* РЎРѕРґРµСЂР¶РёС‚ РІСЃРµ РЅРµРѕР±С…РѕРґРёРјС‹Рµ РїРѕР»СЏ, Р»РµРіРєРѕ СЂР°СЃС€РёСЂСЏРµРј РїРѕ РІРєСѓСЃСѓ =)
* @argument  obj  HTMLElment  - С‚РµРєСЃС‚РѕРІРѕРµ РїРѕР»Рµ, СЃ РєС‚РѕСЂС‹Рј РїСЂРµРґСЃС‚РѕРёС‚ СЂР°Р±РѕС‚Р°С‚СЊ
*
* Author: Sardar <Sardar@vingrad.ru>
*/
function TextAreaSelectionHelper(obj) {
  var self = this;
  this.target=obj;
  this.target.carretHandler=this; //СЃСЃС‹Р»РєР° СЃР°РјРѕРіРѕ РЅР° СЃРµР±СЏ РґР»СЏ С‚РµРєСЃС‚РѕРІРѕРіРѕ РїРѕР»СЏ
  /**
  * РџРѕРјРЅРёРј, С‡С‚Рѕ СЃРѕР±С‹С‚РёСЏ РјРѕРіСѓС‚ Р±С‹С‚СЊ СѓР¶Рµ РѕРїСЂРµРґР»РµРµРЅРЅС‹, С‚РѕРіРґР° РЅСѓР¶РЅРѕ РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊ
  * РѕС‡РµСЂРµРґРё. РљРѕРЅРµС‡РЅРѕ, СЂРµР°Р»РёР·Р°С†РёСЏ РґР»СЏ РР• Рё РњРѕР·РёР»Р»С‹ РІ РєРѕСЂРЅРµ СЂР°Р·Р»РёС‡Р°СЋС‚СЃСЏ, РїРѕС‡РёС‚Р°С‚СЊ
  * Рё РґРѕСЃС‚Р°С‚СЊ РіРѕС‚РѕРІС‹Р№ РєРѕРґ РјРѕР¶РЅРѕ Р·РґРµСЃСЊ: http://forum.vingrad.ru/index.php?showtopic=32350
  */
  /*this.target.onchange=_textareaSaver;
  this.target.onclick=_textareaSaver;
  this.target.onkeyup=_textareaSaver;
  this.target.onfocus=_textareaSaver;
  if(!document.selection) this.target.onSelect=_textareaSaver; //РґР»СЏ РњРѕР·РёР»Р»С‹*/
  addEvent(this.target, 'change', _textareaSaver);
  addEvent(this.target, 'click', _textareaSaver);
  addEvent(this.target, 'keyup', _textareaSaver);
  addEvent(this.target, 'focus', _textareaSaver);
  if(!document.selection) addEvent(this.target, 'select', _textareaSaver); //РґР»СЏ РњРѕР·РёР»Р»С‹

  this.start=-1;
  this.end=-1;
  this.scroll=-1;
  this.iesel=null; //РґР»СЏ РР•

  if(obj.getAttribute('max_length'))
    setInputLimit(obj, obj.getAttribute('max_length'));
}
/**
* Р”РѕСЃС‚Р°С‚СЊ РѕС‚СЃРµР»РµРєС‚РёСЂРѕРІР°РЅРЅС‹Р№ С‚РµРєСЃС‚
*/
TextAreaSelectionHelper.prototype.getSelectedText=function() {
   return this.iesel? this.iesel.text: (this.start>=0&&this.end>this.start)? this.target.value.substring(this.start,this.end): "";
}
/**
* Р’СЃС‚Р°РІРёС‚СЊ РєРѕРґ РїРѕРґ РєСѓСЂСЃРѕСЂРѕРј. Р•СЃР»Рё С‚РµРєСЃС‚ РЅРµ РѕС‚СЃРµР»РµРєС‚РёСЂРѕРІР°РЅ(РЅРµ С„РѕРєСѓСЃР°) Рё
* РїРѕР·РёС†РёСЏ РЅРµ РІР·СЏС‚Р°, С‚Рѕ РІСЃС‚Р°РІРёС‚СЊ РІ РєРѕРЅРµС† С‚РµРєСЃС‚РѕРІРѕРіРѕ РїРѕР»СЏ.
*
* @argument text String - Р·Р°РјРµРЅРёС‚СЊ СЃРµР»РµРєС†РёСЋ РЅР° СЌС‚РѕС‚ С‚РµРєСЃС‚
* @argument secondtag String - РµСЃР»Рё Р·Р°РґР°РЅ, С‚Рѕ СЃРµР»РµРєС†РёСЏ РЅРµ Р·Р°РјРµРЅСЏРµС‚СЃСЏ, Р° РѕР±СЂР°РјР»СЏРµС‚СЃСЏ СЌС‚РёРјРё С‚РµРіР°РјРё
*/
TextAreaSelectionHelper.prototype.setSelectedText=function(text, secondtag) {
  if(this.iesel) {
    if(typeof(secondtag)=="string") {
   var l=this.iesel.text.length;
      this.iesel.text=text+this.iesel.text+secondtag;
   this.iesel.moveEnd("character", -secondtag.length);
    this.iesel.moveStart("character", -l);
    } else {
   this.iesel.text=text;
    }
    this.iesel.select();
  } else if(this.start>=0&&this.end>=this.start) {
     var left=this.target.value.substring(0,this.start);
     var right=this.target.value.substr(this.end);
  var scont=this.target.value.substring(this.start, this.end);
  if(typeof(secondtag)=="string") {
    this.target.value=left+text+scont+secondtag+right;
    this.end=this.target.selectionEnd=this.start+text.length+scont.length;
    this.start=this.target.selectionStart=this.start+text.length;
  } else {
       this.target.value=left+text+right;
    this.end=this.target.selectionEnd=this.start+text.length;
    this.start=this.target.selectionStart=this.start+text.length;
  }
  this.target.scrollTop=this.scroll;
  this.target.focus();
  } else {
    this.target.value+=text + ((typeof(secondtag)=="string")? secondtag: "");
    if(this.scroll>=0) this.target.scrollTop=this.scroll;
  }
}
/**
* РџСЂРёРІР°С‚РЅР°СЏ С„СѓРєРЅРєС†РёСЏ, Р·Р°РїРёСЃС‹РІР°СЋС‰Р°СЏ РїРѕР·РёС†РёСЋ РєСѓСЂСЃРѕСЂР°
*/
function _textareaSaver() {
  if(document.selection) {
    this.carretHandler.iesel = document.selection.createRange().duplicate();
  } else if(typeof(this.selectionStart)!="undefined") {
    this.carretHandler.start=this.selectionStart;
    this.carretHandler.end=this.selectionEnd;
    this.carretHandler.scroll=this.scrollTop;
  } else {this.carretHandler.start=this.carretHandler.end=-1;}
}
function _setHint(_domObject,_hint){
    _domObject.setAttribute('title',_hint,false);
}
function _getHint(_domObject){
    return getProperty(_domObject,'title','');
}
function _setFocus(_domObject){
    _domObject.querySelector('input,textarea').focus();
}
//Р¤СѓРЅРєС†РёСЏ РІС‹Р·РѕРІР° СЃС‚Р°РЅРґР°СЂС‚РЅРѕРіРѕ РґРµР№СЃС‚РІРёСЏ РЈРґР°Р»РµРЅРёСЏ Р·Р°РїРёСЃРё
/*
_componentName - РёРјСЏ РєРѕРјРїРѕРЅРµРЅС‚Р°
_actionName - РёРјСЏ РґРµР№СЃС‚РІРёСЏ
_datasetName - РёРјСЏ Р”Р°С‚Р°РЎРµС‚Р°
_varName - РёРјСЏ РїРµСЂРµРјРµРЅРЅРѕР№ РІ РєРѕС‚РѕСЂСѓСЋ СЃРѕС…СЂР°РЅСЏРµС‚СЃСЏ ID СѓРґР°Р»СЏРµРјРѕР№ Р·Р°РїРёСЃРё
*/
function standartDeleteAction(_componentName,_actionName,_datasetName,_varName){
    if(empty(_varName)) _varName = 'DEL_ID';
    var str='СЊ';
    setVar(_varName,getValue(_componentName));
    if (isExistsControlByName(_componentName+'_SelectList'))
    {
     if(!empty(getValue(_componentName+'_SelectList'))){
        setVar(_varName,getValue(_componentName+'_SelectList'));
        str = 'Рё';
     }
    }
    if (confirm('Р’С‹ РґРµР№СЃС‚РІРёС‚РµР»СЊРЅРѕ С…РѕС‚РёС‚Рµ СѓРґР°Р»РёС‚СЊ Р·Р°РїРёСЃ'+str+'?'))
    {
            executeAction(_actionName,
                    function(){
                        refreshDataSet(_datasetName);
                        if(isExistsControlByName(_componentName+'_SelectList'))
                        {
                            if(!empty(getValue(_componentName+'_SelectList')))
                                SelectList_uncheckItems(_componentName+'_SelectList');
                        }
                        setVar(_varName,null);
                    }
            );
    }
}

//РћС‡РёСЃС‚РёС‚СЊ Р·РЅР°С‡РµРЅРёРµ РєРѕРЅС‚СЂРѕР»Р°
function clearCTRL (_Name)
{
    setValue(_Name,null);
    setCaption(_Name,'');
}
function onShowTextAreaInVisit(_Dom,_ctrlName,_repeaterName){
        if(!hasProperty(getControlByName(_repeaterName),'clone')) return false;
    var repeater=getCloneObjectsByRepeaterName(_repeaterName, _ctrlName);
    for (var i = 0; i < repeater.length; i++)
    {
            var d=document.createElement('DIV');
            d.innerHTML=getControlValue(repeater[i]).replace(/\r\n|\r|\n/g,'<br/>');
            d.style.fontFamily = 'Tahoma';
            d.style.fontSize = repeater[i].style.fontSize;
            d.style.fontSizeAdjust= repeater[i].style.fontSizeAdjust;
            d.style.fontVariant= repeater[i].style.fontVariant;
            d.style.fontWeight= repeater[i].style.fontWeight;
            repeater[i].parentNode.insertBefore(d, repeater[i]);
            repeater[i].style.display='none';
    }
}
function replaceTextAreaToDiv(_Dom)
{
            var d=document.createElement('DIV');
            d.innerHTML=getControlValue(_Dom).replace(/\r\n|\r|\n/g,'<br/>');
            d.style.fontFamily = 'Tahoma';
            d.style.fontSize = _Dom.style.fontSize;
            d.style.fontSizeAdjust= _Dom.style.fontSizeAdjust;
            d.style.fontVariant= _Dom.style.fontVariant;
            d.style.fontWeight= _Dom.style.fontWeight;
            _Dom.parentNode.insertBefore(d, _Dom);
            _Dom.style.display='none';
}
function onShowBlockInVisit(_blockName,_labelName){
   if (getControlProperty(_labelName, 'caption') == 1 && !hasProperty(getControlByName(_blockName),'sample'))
   {
      getControlByName(_blockName).style.display='';
   }
}
function makeGridStripeForm(_domObject) //РёРјРёС‚Р°С†РёСЏ makeGridStripe РєРѕРјРїРѕРЅРµРЅС‚Р° Grid
{
  var tbodies = _domObject.getElementsByTagName("tbody");
  for (var h = 0; h < tbodies.length; h++) {
    var _tr = tbodies[h].getElementsByTagName("tr");
      if (!_tr) return;
      var _flag=1;
      for(var i=0; i<_tr.length; i++)
      {
         if(getProperty(_tr[i],'cmptype')=='GridRow' && _tr[i].style.display != 'none')
          {
               if(_tr[i].className!='activdata')_tr[i].className = ((_flag%2)==0 ? "data" : "even");
            _flag++;
          }
      }
  }
}
function removerChilds(obj)
{
    try {
        if(obj.childNodes) {
            while(obj.firstChild)
                obj.removeChild(obj.firstChild);
        }
    }catch(e){}
}

function returnGET() {
    var keyVal = (window.location.search.substr(1)).split('&');
    var resGet = {};
    var p= -1;
    for(var i=0; i < keyVal.length; i++)
    {
      p = keyVal[i].search('=');
      resGet[keyVal[i].substr(0,p).toLowerCase()] = keyVal[i].substr(p+1);
    }
    return resGet;
}

//Р”Р»СЏ СЂСѓС‡РЅРѕРіРѕ РІС‹Р·РѕРІР° СЃРѕР±С‹С‚РёСЏ РґРѕРј РѕР±СЉРµРєС‚Р°
function execDomEvent(dom,eventName)
{
    if (dom[eventName] && dom[eventName] instanceof Function)
    {
            dom[eventName].call(dom);
    }else if(dom.attributes[eventName] && dom.attributes[eventName].value)
        eval('(function(){'+dom.attributes[eventName].value+'}).call(dom)');
}
function getPageByDom(dom)
{
    var i=0;
    while(dom && dom.nodeName.toUpperCase() != 'HTML' && i < 100)
    {
        if('DForm' in dom && dom.DForm.page){
            return dom.DForm.page;
        }
        if(dom.jsParent && dom.jsParent.page){
            return dom.jsParent.page;
        }
        if(dom.clone && dom.clone.form && dom.clone.form.page){
            return dom.clone.form.page;
        }
        dom = dom.parentNode;
        i++;
    }
    var p = getPage();
    if (p)
        return p;
    showError('РћС€РёР±РєР°. РќРµ СѓРґР°Р»РѕСЃСЊ РѕРїСЂРµРґРµР»РёС‚СЊ С„РѕСЂРјСѓ.');
}
function getControlByCmptype(dom,cmptype,onlycmptype)
{
    var i=0;
    while(dom.nodeName.toUpperCase() != 'HTML' && i < 100)
    {
        if((dom.jsParent && quickGetProperty(dom,'cmptype') == cmptype)||(onlycmptype && getProperty(dom,'cmptype') == cmptype))
            return dom;
        dom = dom.parentNode;
        i++;
    }
    return false;
}
function getControlContainer(dom)
{
    var i=0;
    while(dom.nodeName.toUpperCase() != 'HTML' && i < 100)
    {
        if(hasProperty(dom,'cmptype'))
            return dom;
        dom = dom.parentNode;
        i++;
    }
    return false;
}
/**
 * РЎРІРѕР№СЃС‚РІРѕ
 * get - С„СѓРЅРєС†РёСЏ РїРѕР»СѓС‡РµРЅРёСЏ Р·РЅР°С‡РµРЅРёСЏ СЃРІРѕР№СЃС‚РІР°, РµСЃР»Рё null С‚Рѕ Р±РµСЂРµС‚СЃСЏ Р°С‚СЂРёР±СѓС‚
 * set - С„СѓРЅРєС†РёСЏ СѓСЃС‚Р°РЅРѕРІРєРё Р·РЅР°С‡РµРЅРёСЏ СЃРІРѕР№СЃС‚РІР°, РµСЃР»Рё null С‚Рѕ СѓСЃС‚Р°РЅР°РІР»РёРІР°РµС‚СЃСЏ Р°С‚СЂРёР±СѓС‚
 * type - С‚РёРї СЃРІРѕР№СЃС‚РІР°: property, event
 * value_type - С‚РёРї Р·РЅР°С‡РµРЅРёСЏ СЃРІРѕР№СЃС‚РІР°: string(РїРѕСѓРјРѕР»С‡Р°РЅРёСЋ),number,boolean,list
 * value_list - РјР°СЃСЃРёРІ Р·РЅР°С‡РµРЅРёР№, РµСЃР»Рё value_type: list
 * value_default - Р·РЅР°С‡РµРЅРёРµ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ
 */
ControlBaseProperties = {
    width:{get: null, set: null},
    height:{get: null, set: null},
    value:{}
};

function getBaseProperties()
{
    function cloneObj(obj)
    {
     if(typeof obj !== 'object')
     {
           return obj;
     }
        var ncl = {};
        if (obj instanceof Array)ncl = new Array();
     var nv;
     for(var prName in obj)
     {
            if(obj.hasOwnProperty(prName))
            {
                nv = obj[prName];
                if(nv && typeof v === 'object') ncl[prName] = cloneObj(nv); else ncl[prName] = nv;
            }
    }
     return ncl;
    }

    return cloneObj(ControlBaseProperties);
}

function russianLetterToQWERTY(charCode) {
    var map = {
            "Р№": "q", "Р™": "Q",
            "С†": "w", "Р¦": "W",
            "Сѓ": "e", "РЈ": "E",
            "Рє": "r", "Рљ": "R",
            "Рµ": "t", "Р•": "T",
            "РЅ": "y", "Рќ": "Y",
            "Рі": "u", "Р“": "U",
            "С€": "i", "РЁ": "I",
            "С‰": "o", "Р©": "O",
            "Р·": "p", "Р—": "P",
            "С„": "a", "Р¤": "A",
            "С‹": "s", "Р«": "S",
            "РІ": "d", "Р’": "D",
            "Р°": "f", "Рђ": "F",
            "Рї": "g", "Рџ": "G",
            "СЂ": "h", "Р ": "H",
            "Рѕ": "j", "Рћ": "J",
            "Р»": "k", "Р›": "K",
            "Рґ": "l", "Р”": "L",
            "СЏ": "z", "РЇ": "Z",
            "С‡": "x", "Р§": "X",
            "СЃ": "c", "РЎ": "C",
            "Рј": "v", "Рњ": "V",
            "Рё": "b", "Р": "B",
            "С‚": "n", "Рў": "N",
            "СЊ": "m", "Р¬": "M"
        },
        letter = String.fromCharCode(charCode);
    return (letter in map) ? map[letter] : false;
}

function MKB10Input(input)
{
    if (input && input.value == undefined) {
        input = getChildTag(input, 'input', 0);
    }
    if (!input) {
        return;
    }
    function onkeyPress(e) {
        if (e.keyCode == 13) {
            return false;
        }
        var value = input.value,
            isDigit = e.charCode > 47 && e.charCode < 58,/*РІРІРµРґРµРЅРѕ С‡РёСЃР»Рѕ*/
            isEnglish = e.charCode > 96 && e.charCode < 123 || e.charCode > 64 && e.charCode < 91,/*РІРІРµРґРµРЅ Р°РЅРіР»РёР№СЃРєР°СЏ Р±СѓРєРІР°*/
            letter = String.fromCharCode(e.charCode).toUpperCase();

        if (e.keyCode != 0 && e.keyCode != e.charCode) {
            return true;
        }
        if (value.length > 6 || isDigit && !value || value.length && !isDigit) {
            if('D3Form' in e.target){
                D3Api.stopEvent(e,true);
            }else{
                stopEvent(e);
            }
            return false;
        }
        if (!isEnglish && !isDigit) {
            var convertedLetter = russianLetterToQWERTY(e.charCode);
            if (convertedLetter) {
                letter = convertedLetter.toUpperCase();
            }
        }
        if (letter) {
            if (value.length === 3) {
                input.value += '.';
            }
            if('D3Form' in e.target){
                if(!isDigit){
                    input.value += letter;
                    D3Api.stopEvent(e,true);
                }
            }else{
                input.value += letter;
                stopEvent(e);
            }
            return false;
        }
    }

    input.addEventListener('keypress', onkeyPress, true);
    setAttribute(input, 'mkb10_check', 'true');
}
function importTableGroupByCode(_code)
{
    openWindow({name:'ImpTables/do_import_tables',vars:{IMP_CODE:_code}},true);
}

function getTextContent(dom)
{
    function textContent(dom)
    {
        var _result = "";
        if (dom == null) {
            return _result;
        }
        var childrens = dom.childNodes;
        var i = 0;
        while (i < childrens.length) {
            var child = childrens.item(i);
            switch (child.nodeType) {
                case 1: // ELEMENT_NODE
                case 5: // ENTITY_REFERENCE_NODE
                    _result += textContent(child);
                    break;
                case 3: // TEXT_NODE
                case 2: // ATTRIBUTE_NODE
                case 4: // CDATA_SECTION_NODE
                    _result += child.nodeValue;
                    break;
                case 6: // ENTITY_NODE
                case 7: // PROCESSING_INSTRUCTION_NODE
                case 8: // COMMENT_NODE
                case 9: // DOCUMENT_NODE
                case 10: // DOCUMENT_TYPE_NODE
                case 11: // DOCUMENT_FRAGMENT_NODE
                case 12: // NOTATION_NODE
                // skip
                break;
            }
            i++;
        }
        return _result;
    }
    return dom.text || dom.textContent || textContent(dom);
}
function mixinObjects(dst)
{
    for(var i = 1, c = arguments.length; i < c; i++)
    {
        if(!arguments[i]) continue;
        var obj = arguments[i];
        for(var key in obj)
        {
            dst[key] = obj[key];
        }
    }
    return dst;
}
function getDomBy(dom,selector)
{
    return dom.querySelector(selector);
}

var dateFormat = function () {
    var    token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        timezoneClip = /[^-+\dA-Z]/g,
        pad = function (val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len) val = "0" + val;
            return val;
        };

    return function (date, mask, utc) {
        var dF = dateFormat;

        if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
            mask = date;
            date = undefined;
        }

        date = date ? new Date(date) : new Date;
        if (isNaN(date)) throw SyntaxError("invalid date");

        mask = String(dF.masks[mask] || mask || dF.masks["default"]);

        if (mask.slice(0, 4) == "UTC:") {
            mask = mask.slice(4);
            utc = true;
        }

        var    _ = utc ? "getUTC" : "get",
            d = date[_ + "Date"](),
            D = date[_ + "Day"](),
            m = date[_ + "Month"](),
            y = date[_ + "FullYear"](),
            H = date[_ + "Hours"](),
            M = date[_ + "Minutes"](),
            s = date[_ + "Seconds"](),
            L = date[_ + "Milliseconds"](),
            o = utc ? 0 : date.getTimezoneOffset(),
            flags = {
                d:    d,
                dd:   pad(d),
                ddd:  dF.i18n.dayNames[D],
                dddd: dF.i18n.dayNames[D + 7],
                m:    m + 1,
                mm:   pad(m + 1),
                mmm:  dF.i18n.monthNames[m],
                mmmm: dF.i18n.monthNames[m + 12],
                yy:   String(y).slice(2),
                yyyy: y,
                h:    H % 12 || 12,
                hh:   pad(H % 12 || 12),
                H:    H,
                HH:   pad(H),
                M:    M,
                MM:   pad(M),
                s:    s,
                ss:   pad(s),
                l:    pad(L, 3),
                L:    pad(L > 99 ? Math.round(L / 10) : L),
                t:    H < 12 ? "a"  : "p",
                tt:   H < 12 ? "am" : "pm",
                T:    H < 12 ? "A"  : "P",
                TT:   H < 12 ? "AM" : "PM",
                Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
            };

        return mask.replace(token, function ($0) {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
}();

dateFormat.masks = {
    "default":      "ddd mmm dd yyyy HH:MM:ss",
    shortDate:      "m/d/yy",
    mediumDate:     "mmm d, yyyy",
    longDate:       "mmmm d, yyyy",
    fullDate:       "dddd, mmmm d, yyyy",
    shortTime:      "h:MM TT",
    mediumTime:     "h:MM:ss TT",
    longTime:       "h:MM:ss TT Z",
    isoDate:        "yyyy-mm-dd",
    isoTime:        "HH:MM:ss",
    isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
    isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

dateFormat.i18n = {
    dayNames: [
        "Р’СЃ", "РџРЅ", "Р’С‚", "РЎСЂ", "Р§С‚", "РџС‚", "РЎР±",
        "Р’РѕСЃРєСЂРµСЃРµРЅСЊРµ",
                "РџРѕРЅРµРґРµР»СЊРЅРёРє",
                "Р’С‚РѕСЂРЅРёРє",
                "РЎСЂРµРґР°",
                "Р§РµС‚РІРµСЂРі",
                "РџСЏС‚РЅРёС†Р°",
                "РЎСѓР±Р±РѕС‚Р°"
    ],
    monthNames: [
        "РЇРЅРІ",
                "Р¤РµРІ",
                "РњР°СЂ",
                "РђРїСЂ",
                "РњР°Р№",
                "РСЋРЅ",
                "РСЋР»",
                "РђРІРі",
                "РЎРµРЅ",
                "РћРєС‚",
                "РќРѕСЏ",
                "Р”РµРє",
        "РЇРЅРІР°СЂСЊ",
                "Р¤РµРІСЂР°Р»СЊ",
                "РњР°СЂС‚",
                "РђРїСЂРµР»СЊ",
                "РњР°Р№",
                "РСЋРЅСЊ",
                "РСЋР»СЊ",
                "РђРІРіСѓСЃС‚",
                "РЎРµРЅС‚СЏР±СЂСЊ",
                "РћРєС‚СЏР±СЂСЊ",
                "РќРѕСЏР±СЂСЊ",
                "Р”РµРєР°Р±СЂСЊ"
    ]
};

Date.prototype.format = function (mask, utc) {
    return dateFormat(this, mask, utc);
};

function showDomBlock(dom)
{
    dom.style.display = 'block';
}
function showedDom(dom)
{
    return dom.style.display != 'none';
}
function getEvent(e)
{
    return e || window.event;
}
function getEventCurrentTarget(e)
{
    var ev = getEvent(e);
    if (!ev)
        return null;
    return ev.currentTarget || ev.srcElement;
}
function setInputLimit(_domObject, _max_length)
{
    addEvent(_domObject, 'keypress', function(e){
        var el = getEventCurrentTarget(e),
            ev = getEvent(e);
        if (!el.value.substring(el.selectionStart, el.selectionEnd)
            && !(ev.which == 8 || ev.which == 0) && el.value.length + 1 > _max_length)
        {
            if(!ev.ctrlKey) stopEvent(ev);
            return false;
        }
    });
    addEvent(_domObject, 'input', function(e){
        var el = getEventCurrentTarget(e);
        el.value = el.value.substring(0, _max_length);
    });
}
function escapeXml(str)
{
    return str.replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/"/g, '&quot;')
              .replace(/'/g, '&apos;');
}
function unescapeXML(str)
{
    return str.replace(/&amp;/g, '&')
              .replace(/&lt;/g, '<')
              .replace(/&gt;/g, '>')
              .replace(/&quot;/g, '"')
              .replace(/&apos;/g, '\'');
}

var QueryString = function () {
    var query_string = {};
    var query = window.location.search.substring(1);
    var vars = query.split("&");
    var arr;
    for (var i=0;i<vars.length;i++) {
        var pair = vars[i].split("=");
        if (typeof query_string[pair[0]] === "undefined") {
            query_string[pair[0]] = decodeURIComponent(pair[1]);
        } else if (typeof query_string[pair[0]] === "string") {
            arr = [ query_string[pair[0]],decodeURIComponent(pair[1]) ];
            query_string[pair[0]] = arr;
        } else {
            query_string[pair[0]].push(decodeURIComponent(pair[1]));
        }
    }
    return query_string;
}();

function openCodeEditor(DOM, params) {
    var ctrl = D3Api.getControlByDom(DOM),
        isD3 = !!ctrl.D3Form;
    openD3Form('System/code_editor', true, {
        vars: {
            VALUE: (isD3 ? D3Api.getValue(ctrl) : _getControlProperty(ctrl, 'value')),
            PARAMS: params
        },
        width: 800,
        height: 600,
        onclose: [function (mod) {
            if (mod && +mod.ModalResult) {
                isD3 ? D3Api.setValue(ctrl, mod['value']) : _setControlProperty(ctrl, 'value', mod['value']);
            }
        }]
    });
}

function throttle(fn, threshhold, scope) {
    threshhold || (threshhold = 250);
    var last,
        deferTimer;
    return function () {
        var context = scope || this;

        var now = +new Date,
            args = arguments;
        if (last && now < last + threshhold) {
            // hold on to it
            clearTimeout(deferTimer);
            deferTimer = setTimeout(function () {
                last = now;
                fn.apply(context, args);
            }, threshhold);
        } else {
            last = now;
            fn.apply(context, args);
        }
    };
}if (!window.SYS_current_theme) {
     window.SYS_current_theme = 'bars';
}
if (typeof(window.SYS_is_theme_nochange) !=='boolean'){
     window.SYS_is_theme_nochange = true;
}

var SYS_ROOTDOM =
    window.addEventListener || window.attachEvent
        ? window
        : document.addEventListener
        ? document
        : null;
var _GET_ = returnGET();

function showAllProperty(_dO){
    for(var _pN in _dO){
        if(_dO.hasOwnProperty(_pN)){
            alert(_pN+'='+_dO[_pN]);
        }

    }
}
function onContextMenuBody(event)
{
    event = event || window.event;

    var target = getEventTarget(event);

    return (target.value != undefined);
}

/**
 * Проверяет объект на пустоту
 * @param obj
 * @returns {boolean}
 *
 * @see https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object
 */
function isEmptyObject(obj) {
    if (typeof obj === "undefined")
        return true;
    for(var prop in obj) {
        if(obj.hasOwnProperty(prop)) {
            return false;
        }
    }

    return JSON.stringify(obj) === JSON.stringify({});
}
function isObject(_object){
    return (_object instanceof Object) || (Node && _object instanceof Node);
}
function isNodeList(_object){
    return _object instanceof NodeList;
}
function isUndefined(_object){
    return typeof(_object)=='undefined';
}
function inArray(array, item) {
    return [].indexOf.call(array, item) != -1;
}
function hasProperty(_dO,_pN){
    if (_dO == null){
        return false;
    }
    if (typeof _dO['hasAttribute']==='function'){
        return _dO.hasAttribute(_pN);
    }
    if (_dO.attributes){
        return typeof(_dO.attributes[_pN.toLowerCase()])!='undefined';
    }
    return false;
}
function quickGetProperty(_dO,_pN){
    return _dO.attributes[_pN.toLowerCase()].value;
}
function getProperty(_dO,_pN,_dV){
    if(hasProperty(_dO,_pN)){
        return quickGetProperty(_dO,_pN);
    }
    return _dV;
}
function setAttribute(_dO,_aN,_aV){
    _dO.setAttribute(_aN,_aV);
}
function emptyFunction(){}
function nullFunction(){
    return null;
}
var SYS_ControlActions=new Array();
SYS_ControlActions['clone']=new Array();
SYS_ControlActions['clone']['value']={
    set:function (_domObject,_value){
        _domObject.setAttribute('value',_value,false);
        },
    get:function(_domObject){
        return getProperty(_domObject,'value',null);
    }
}
SYS_ControlActions['clone']['data']={
    set:function (_domObject,_data){
        if(!isObject(_domObject.clone)){
            showError('Объект не является наследником клонируемого обьекта');
        }
        _domObject.clone.data=_data;
    },
    get:function (_domObject){
        if(!isObject(_domObject.clone)){
            showError('Объект не является наследником клонируемого обьекта');
            return new Array();
        }
        return _domObject.clone.data
    }
}
function setControlValue(_dO,_v){
    _setControlProperty(_dO,'value',_v);
}
function getControlValue(_dO){
    return _getControlProperty(_dO,'value');
}
function setControlCaption(_dO,_c){
    _setControlProperty(_dO,'caption',_c);
}
function getControlCaption(_dO){
    return _getControlProperty(_dO,'caption');
}
function showError(_message,_error){
    return _SYS_ERROR_OBJECT.showError(_message,_error,true);
}
function showOracleError(_message,_error){
    _SYS_ERROR_OBJECT.showOracleError(_message,_error);
    return null;
}
function showXmlError(_xml){
    _SYS_ERROR_OBJECT.showXmlError(_xml);
}
function showOracleXmlError(_xml,_invars){
    _SYS_ERROR_OBJECT.showOracleXmlError(_xml,_invars);
}
function confirmWindow(_message,_okfunction,_cancelfunction){
    var win = new DConfirmWindow(_message,_okfunction,_cancelfunction);
    win.show();
}
function alertWindow(_message,_okfunction){
    var win = new DAlertWindow(_message,_okfunction);win.show();
}
//------------------------------------------
function wndResize(force)
{
    if(window.SYS_current_theme == 'bars'){
        var h = document.getElementById('_header');
        var c = document.getElementById('_mainContainer');
        if (h && c)
            c.style.height = (window.innerHeight-h.offsetHeight-5)+'px';
        runCalcSize();
        if(window['D3Api'])
            D3Api.resize(force);
    }else if(window.SYS_current_theme == 'new'){
        runCalcSize();
        D3Api.resize(force);
    }

}

function clearSelection()
{
    if (window.getSelection) {
        var selection = window.getSelection();

        if (selection.rangeCount > 0 && selection.getRangeAt(0).getClientRects().length > 0) {
            selection.removeAllRanges();
        }
    } else { // старый IE
        document.selection.empty();
    }
}
/* глобальные методы которые могуть буть переопределены внутренними методами системы */

function getPage(skip) {
    var isSkip = false;
    if (skip == null) {
        skip = 0;
    }else{
        if(skip > 0){
            isSkip = true;
        }
    }
    var _page = SYS_pages[SYS_pages.length - skip - 1];
    if (!isObject(_page)) {
        _page = SYS_pages_window[SYS_pages_window.length - 1];
        if (!isObject(_page)) {
            _page = new DNullPage();
        }
    }
    while (skip > 0) {
        _page = _page.prevPage;
        skip--;
    }

    if(isSkip && D3Api.debugUrlParam > 0){
        if('form' in _page){
            _page.form.setConsoleMsg('%cУстаревшее: Параметр skip является устаревшим.',"color: yellow; font-style: italic; background-color: green; padding: 2px;")
        }
    }
    return _page;
}
function removePage(skip,page) {
    var _page = (page) ? page : getPage(skip);
    if (SYS_pages_window.indexOf(_page) < 0) {
        return false;
    }

    if (SYS_pages_store) {
        SYS_pages_store.dispatch({ type: 'REMOVE', value: _page })
    }

    _page.remove();
    SYS_pages_window.splice(SYS_pages_window.indexOf(_page), 1);
    SYS_lastPage = SYS_pages_window[SYS_pages_window.length - 1];
    return _page;
}

function addSystemInfo(_nameObject,_data,skip) {
    getPage(skip).addSystemInfo(_nameObject, _data);
}
function setPropertySysInfoByName(_nameObject,_propertyName,_Value,skip) {
    getPage(skip).setPropertySysInfoByName(_nameObject, _propertyName, _Value);
}

function setWindowCaption(_caption,skip){
    getPage(skip).setPageCaption(_caption);
}
function setConfirmOnCloseFunction(_type,skip){
    if(_type == 1){
        getPage(skip).setPageConfirmOnClose();
    }
}
function getWindowCaption(skip){
    return getPage(skip).getPageCaption();
}
function closeWindow(skip,page,res){
    var p = (page)?page:getPage(skip);
    if('form' in p && !p.destroyed){
        p.form.beforeClose();
        p.beforeClose(res);
        p.getContainer().close();
        p.close(res);
        removePage(skip,p);
        p.afterClose(res);
        if(p.prevPage instanceof DPage){
            p.prevPage.removeChildPage(p);
        }
        p.destroyAll(skip,p);
        clearSelection();
        p = null;
        delete p;
    }
}
function executeModule(_moduleName,
                       _callBackAcceptMethod,
                       _callBackCancelMethod,
                       _callBackObject,
                       async,
                       skip,
                       silent) {
    return getPage(skip).executeModule(_moduleName,
                                       _callBackAcceptMethod,
                                       _callBackCancelMethod,
                                       _callBackObject,
                                       async,
                                       silent);
}
function executeAction(_actionName,
                       _callBackAcceptMethod,
                       _callBackCancelMethod,
                       _callBackObject,
                       async,
                       skip,
                       silent) {
    return getPage(skip).executeServerAction(_actionName,
                                             _callBackAcceptMethod,
                                             _callBackCancelMethod,
                                             _callBackObject,
                                             async,
                                             silent);
}
function setValue(_controlName,_value,skip){
    getPage(skip).setValue(_controlName,_value);
}
function getValue(_controlName,skip){
    return getPage(skip).getValue(_controlName);
}
function setVar(_name,_value,skip){
    getPage(skip).setVar(_name,_value);
}
function getVar(_name,skip){
    return getPage(skip).getVar(_name);
}
function setCaption(_controlName,_caption,skip){
    getPage(skip).setCaption(_controlName,_caption);
}
function getCaption(_controlName,skip){
    return getPage(skip).getCaption(_controlName);
}
function setHint(_controlName,_hint,skip){
    getPage(skip).setHint(_controlName,_hint);
}
function getHint(_controlName,skip){
    return getPage(skip).getHint(_controlName);
}
function setEnabled(_controlName,_value,skip){
    getPage(skip).setEnabled(_controlName,_value);
}
function getEnabled(_controlName,skip){
    return getPage(skip).getEnabled(_controlName);
}
function refreshDataSet(_dataSetName,instead,skip){
    if(instead==null){
        instead=true;
    }
    return getPage(skip).refreshDataSet(_dataSetName,instead);
}
function getDataSet(_dataSetName,_show_error,skip){
    return getPage(skip).getDataSet(_dataSetName,_show_error);
}
function base(skip){
    var page = getPage(skip);
    if (D3Api.debugUrlParam > 0) {
        if('form' in page){
            page.form.setConsoleMsg('%cУстаревшее: base().ИмяФункции() является устаревшим. Используйте Form.ИмяФункции()','color: yellow; font-style: italic; background-color: blue; padding: 2px;')
        }
    }
    return page.getNamespace();
}

function reloadWindow(skip){
    getPage(skip).reload();
};
function requestDataSetCount(_dataSetName,
                             _callBackFunction,
                             _callBackObject,
                             skip){
    getPage(skip).requestDataSetCount(_dataSetName,
        _callBackFunction,
        _callBackObject);
}
function getControlByName(_controlName,skip,_show_error){
    return getPage(skip).getControlByName(_controlName,_show_error);
}

function isExistsControlByName(_controlName,skip){
    return getPage(skip).isExistsControlByName(_controlName,false);
}

function setControlProperty(_controlName,_propertyName,_propertyValue,skip){
    getPage(skip).setControlProperty(_controlName,_propertyName,_propertyValue);
}
function getControlProperty(_controlName,_propertyName,skip){
    return getPage(skip).getControlProperty(_controlName,_propertyName);
}

function requestDataSetData(_dataSetName,
                            _data,
                            _acceptCallBackFunction,
                            _cancelCallBackFunction,
                            _callBackObject,
                            async,
                            skip) {
    return getPage(skip).requestDataSetData(_dataSetName, _data, _acceptCallBackFunction, _cancelCallBackFunction, _callBackObject, async);
}
function getCloneObjectsByRepeaterName(_nameRepeater,_nameControl,skip) {
    return getPage(skip).getCloneObjectsByRepeaterName(_nameRepeater, _nameControl);
}

function getRepeaterByGroupName(_groupName,skip) {
    return getPage(skip).getRepeaterByGroupName(_groupName);
}
function addRepeaterClone(_groupName,_dataArray,_domObject,_labelName,skip) {
    return getPage(skip).addRepeaterClone(_groupName, _dataArray, _domObject, _labelName);
}
function removeRepeaterClone(_groupName,_domObject,_index,skip) {
    getPage(skip).removeRepeaterClone(_groupName, _domObject, _index);
}

function startMultiDataSetsGroup(skip) {
    getPage(skip).startMultiDataSetsGroup();
}
function endMultiDataSetsGroup(skip,_callBackAcceptMethod,_callBackCancelMethod) {
    getPage(skip).endMultiDataSetsGroup(_callBackAcceptMethod, _callBackCancelMethod);
}
function startActionsGroup(skip,async) {
    getPage(skip).startActionsGroup(async);
}
function endActionsGroup(skip,_callBackAcceptMethod,_callBackCancelMethod) {
    getPage(skip).endActionsGroup(_callBackAcceptMethod, _callBackCancelMethod);
}
/* ******************************************** */

function openInfoWindow() {
    var currentForm = getPage().d3Form ? getPage().d3Form : getPage().form;
    var isReport = currentForm.name.split('/')[1] === 'showReport';

    if (isReport) {
        var iframe = getPage().form.containerForm.querySelector('iframe');
        currentForm = iframe.contentDocument.querySelector('[cmptype=Form]').form;
    };

    openWindow({
        name: 'System/InfoAboutForm/InfoAboutForm',
        vars: {
            'mainForm': currentForm.name,
            'userForms': getPage().d3Form ?  D3Api.MainDom.userForms : currentForm.userForms,
            'subForms': getPage().d3Form ?  D3Api.MainDom.subForms : currentForm.subForms,
        }
    }, true);
};


function _setControlProperty(_domObject,_propertyName,_propertyValue) {
    var cmpType = getProperty(_domObject, 'cmptype', 'unknownControl');
    if (SYS_ControlActions[cmpType] == undefined || SYS_ControlActions[cmpType][_propertyName] == undefined) {
        showError('Отсутствует обработчик для установки свойства ' + cmpType + '::' + _propertyName);
        return;
    }
    SYS_ControlActions[cmpType][_propertyName].set(_domObject, _propertyValue);
}
function _getControlProperty(_domObject,_propertyName) {
    //    return SYS_ControlActions[getProperty(_domObject,'cmptype','unknownControl')][_propertyName].get(_domObject);
    var cmpType = getProperty(_domObject, 'cmptype', 'unknownControl');
    if (SYS_ControlActions[cmpType] == undefined || SYS_ControlActions[cmpType][_propertyName] == undefined) {
        showError('Отсутствует обработчик для получения свойства ' + cmpType + '::' + _propertyName);
        return;
    }
    var valueGet = SYS_ControlActions[cmpType][_propertyName].get(_domObject);
    var ref = {value: valueGet};
    var _controlName = getProperty(_domObject, 'name', '');
    if (_controlName != '') {
        getPageByDom(_domObject).dispatchEvent('ongetproperty' + _controlName, _domObject, _controlName, _propertyName, ref);
    }
    return ref.value;
}
function getAbsolutePos(_dO) {
    var SL = 0,
        ST = 0;
    var is_div = /^div$/i.test(_dO.tagName);
    if (is_div && _dO.scrollLeft) {
        SL = _dO.scrollLeft;
    }

    if (is_div && _dO.scrollTop) {
        ST = _dO.scrollTop;
    }
    var r = {
        x: _dO.offsetLeft - SL,
        y: _dO.offsetTop - ST
    };
    if (_dO.offsetParent) {
        var tmp = getAbsolutePos(_dO.offsetParent);
        r.x += tmp.x;
        r.y += tmp.y;
    }
    return r;
}
function getDocumentSize() {
    var div = document.createElement('DIV');
    var s = div.style;
    s.position = 'absolute';
    s.right = s.bottom = s.width = s.height = '0px';
    document.body.appendChild(div);
    var pos = getAbsolutePos(div);
    document.body.removeChild(div);
    return {
        width: pos.x,
        height: pos.y
    };
}
function setDomSize(_dom,_width,_height) {
    _dom.style.width = _width + 'px';
    _dom.style.height = _height + 'px';
}
function setDomSizeNoPx(_dom,_width,_height) {
    _dom.style.width = _width;
    _dom.style.height = _height;
}
function setDomSizePercent(_dom,_width,_height) {
    _dom.style.width = _width + '%';
    _dom.style.height = _height + '%';
}
function setDomPos(_dom,_left,_top) {
    _dom.style.left = _left + 'px';
    _dom.style.top = _top + 'px';
}
function setDomVisible(_dom,_visible) {
    _dom.style.display = (_visible) ? '' : 'none';
}
function addEvent(_dom,_eN,_cF,_capture) {
    if (_dom.addEventListener) {
        _dom.addEventListener(_eN, _cF, (_capture == null) ? false : _capture);
    } else {
        _dom.attachEvent('on' + _eN, _cF);
    }
}
function removeEvent(_dom,_eN,_cF,_capture) {
    if (_dom.removeEventListener) {
        _dom.removeEventListener(_eN, _cF, (_capture == null) ? false : _capture);
    } else {
        _dom.detachEvent('on' + _eN, _cF);
    }
}
function addClass(c,className) {
    var re = new RegExp("(^|\\s)" + className + "(\\s|$)", "g")
    if (c.className == undefined) {
        c.className = className;
        return;
    }
    if (re.test(c.className)) {
        return
    }
    c.className = (c.className + " " + className)
        .replace(/\s+/g, " ")
        .replace(/(^ | $)/g, "")
}
function removeClass(c,className){
    var re = new RegExp("(^|\\s)" + className + "(\\s|$)", "g")
    if (c.className == undefined)
        return;
    c.className = c.className
        .replace(re, "$1")
        .replace(/\s+/g, " ")
        .replace(/(^ | $)/g, "")
}
function toogleClass(c,className1,className2) {
    if (hasClass(c, className1)) {
        removeClass(c, className1);
        addClass(c, className2);
    } else {
        removeClass(c, className2);
        addClass(c, className1);
    }
}
function hasClass(c,className) {
    if (c.className == undefined)
        return;
    if (!className)
        return hasClass2(c);
    return (c.className.search('\\b' + className + '\\b') != -1);
}
function hasClass2(obj) {
    var result = false;
    if (obj.getAttributeNode("class") != null) {
        result = obj.getAttributeNode("class").value;
    }
    return result;
}
function DBrowser() {
    var agt = navigator.userAgent.toLowerCase();
    //0 index
    this.nav = ((agt.indexOf('mozilla') != -1) && (agt.indexOf('spoofer') == -1)
        && (agt.indexOf('compatible') == -1) && (agt.indexOf('opera') == -1)
        && (agt.indexOf('webtv') == -1) && (agt.indexOf('hotjava') == -1));
    //1 index
    this.ie = ((agt.indexOf("msie") != -1) && (agt.indexOf("opera") == -1));
    //2 index
    this.opera = (agt.indexOf("opera") != -1);
    //chrome
    this.chrome = (agt.indexOf('chrome') != -1);
    //firefox
    this.ff = (agt.indexOf('firefox') != -1);
    this.safari = (agt.indexOf('safari') != -1);

    if (this.ff || this.chrome) {
        var re_ver = new RegExp((this.ff ? 'firefox' : 'chrome') + '\/([0-9]+)');
        this.version = +agt.match(re_ver)[1];
    }
}
var BROWSER    = new DBrowser();
var endl="\n";
var _SYS_ERROR_OBJECT=new DError();
var parseXML=emptyFunction;
if(BROWSER.ie || BROWSER.safari || BROWSER.opera) {
    isNodeList = function (_object) {
        return _object.length != undefined;
    }
}
if(BROWSER.ie) {
    isObject = function (_object) {
        return typeof (_object) == 'object';
    }
}


if(BROWSER.ie) {
    parseXML = function (_xmlText) {
        var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
        xmlDoc.async = "false";
        xmlDoc.loadXML(_xmlText);
        return xmlDoc;
    }
} else {
    parseXML = function (_xmlText) {
        var parser = new DOMParser();
        return parser.parseFromString(_xmlText, "text/xml");
    }
}
function getEvent(e) {
    return e || window.event;
}
function getEventTarget(e) {
    e = e || window.event;
    return e.srcElement || e.target;
}
if(!Array.prototype.push) {
    Array.prototype.push = function (element) {
        this[this.length] = element;
    }
}
function getChildTag(_dom,_tagName,_index) {
    if (_index == -1) {
        return _dom.getElementsByTagName(_tagName).pop();
    } else
        return _dom.getElementsByTagName(_tagName)[_index];
}
var unknownControl_SetCaption = emptyFunction;
var unknownControl_SetValue = emptyFunction;
var unknownControl_GetValue = function () {
    return null;
}
var unknownControl_GetCaption=function () {
    return null;
}
function getRequestObject() {
    if (window.XMLHttpRequest) {
        try {
            return new XMLHttpRequest();
        } catch (e) {
        }
    } else if (window.ActiveXObject) {
        try {
            return new ActiveXObject('MSXML2.XMLHTTP.3.0');
        } catch (e) {
        }
        try {
            return new ActiveXObject('Msxml2.XMLHTTP');
        } catch (e) {
        }
        try {
            return new ActiveXObject('Microsoft.XMLHTTP');
        } catch (e) {
        }
    }
    return null;
}
function removeDomObject(_dom) {
    if (!_dom.parentNode){
        return;
    }
    _dom.parentNode.removeChild(_dom);
}

//class DEvent
function DEvent(_method,_object) {
    this.call = function () {
        _method.apply(_object, arguments);
    }
}
var SYS_RequestObject = null;
var SYS_countRequests = 0;
var SYS_blockRequests = false;
//Количество форм в состоянии показа
var SYS_countShowState = null;
function incSYS_countRequests() {
    SYS_countRequests++;
}
function decSYS_countRequests() {
    SYS_countRequests--;
    if (SYS_countRequests <= 0) {
        if (SYS_countShowState <= 0)
            SYS_Event('showEnd');
    }
}
function incSYS_countShowState() {
    if (SYS_countShowState == null) SYS_countShowState = 0;
    SYS_countShowState++;
}
function decSYS_countShowState() {
    SYS_countShowState--;
    if (SYS_countShowState <= 0 && SYS_countRequests <= 0)
        SYS_Event('showEnd');
}
function SYS_setShowEndEvent(func) {
    if (SYS_countShowState != null && SYS_countShowState <= 0 && SYS_countRequests <= 0) {
        func.call(this);
    } else
        SYS_addEvent('showEnd', func);
}
var SYS_Events = {};
function SYS_addEvent(eventName,func) {
    if (SYS_Events[eventName])
        SYS_Events[eventName].push(func);
    else
        SYS_Events[eventName] = [func];
}
function SYS_clearEvent(eventName) {
    SYS_Events[eventName] = [];
}
function SYS_Event(eventName) {
    if (!SYS_Events[eventName])
        return;

    var args = Array.prototype.slice.call(arguments, 1);
    for (var i = 0; i < SYS_Events[eventName].length; i++)
        SYS_Events[eventName][i].apply(this, args);
}
function parseDataToUrl(_Data, _PropName) {
    if (_PropName == undefined) _PropName = null;

    var urlData = '';

    for (var _propertyName in _Data) {
        if (!_Data.hasOwnProperty(_propertyName)) {
            continue
        }
        if (isObject(_Data[_propertyName])) {
            var l_PropName = _PropName != null ? _PropName + '[' + _propertyName + ']' : _propertyName;
            urlData += parseDataToUrl(_Data[_propertyName], l_PropName);
        } else {
            if (_PropName != null) urlData += '&' + _PropName + '[' + _propertyName + ']=' + encodeURIComponent(_Data[_propertyName]);
            else urlData += '&' + _propertyName + '=' + encodeURIComponent(_Data[_propertyName]);
        }
    }
    return urlData;
}
//Можно установить заголовки запроса, после каждого запроса обнуляется
var globalRequestHeaders = {};
var _uniq = 0;
function getUniqId(prefix) {
    if (_uniq > 9999999)
        _uniq = 0;
    prefix = prefix || '';
    return prefix + (_uniq++) + (new Date()).getTime();
}
function requestServer(_definedPostMethod,
                       _phpFile,
                       _baseParam,
                       _baseValue,
                       _data,
                       _acceptCallBackMethod,
                       _cancelCallBackMethod,
                       _callBackObject,
                       onlyXml,
                       async) {
    var promise = new Promise(function (resolve, reject) {
        if (SYS_blockRequests)
            return false;

        var silentRequest = _data.silent;
        delete _data.silent;
        if (!silentRequest){
            incSYS_countRequests();
        }
        var req = getRequestObject();
        if (!req)
            return false;
        var url = _phpFile + '.php?' + _baseParam + '=' + _baseValue + '&theme=' + window.SYS_current_theme + '&cache=' + D3Api.SYS_CACHE_UID;

        if ('cache_enabled' in D3Api) {
            url += '&cache_enabled=' + D3Api.cache_enabled;
        }

        if('session_cache' in D3Api){
            url += '&session_cache=' + D3Api.session_cache;
        }
        var menuInfo = null;
        if(_callBackObject && _callBackObject.getMenuInfo){
            menuInfo = _callBackObject.getMenuInfo();
        }

        if(_phpFile !== 'getform' && _callBackObject instanceof DForm && 'formCache' in _callBackObject && _callBackObject.formCache){
            var formCache = _callBackObject.formCache;
            url += "&FormCache="+formCache;
        }
        if(menuInfo && ('FULL_CAPTION' in menuInfo)){
            url += "&pathForm="+encodeURI(menuInfo['FULL_CAPTION']);
        }
        var requestData = '';
        var postData = '';

        /*более не актуальный все данные передаются методом post*/
        if (_definedPostMethod) {
            postData += parseDataToUrl(_data);
        } else {
            requestData += parseDataToUrl(_data);
            postData = null;
        }
        if (async == null)
            async = true;
        req.open(_definedPostMethod ? 'POST' : 'GET', url + requestData, async);

        if (_definedPostMethod) {
            req.setRequestHeader("Method", "POST " + url + " HTTP/1.1");
            req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
        }
        for (var rh in globalRequestHeaders) {
            if (globalRequestHeaders.hasOwnProperty(rh)) {
                req.setRequestHeader(rh, globalRequestHeaders[rh]);
            }
        }
        globalRequestHeaders = {};
        var reqUid = getUniqId('req');
        var func = function () {
            if (req.readyState != 4) return;
            if (req.status == 0) {
                SYS_blockRequests = true;
                decSYS_countRequests();
                showError('Сервер недоступен. Повторите попытку позднее.')
                    .addListener('onclose', function () {
                        SYS_blockRequests = false;
                    }, this, true);
                return;
            }
            if (!silentRequest)
                decSYS_countRequests();

            if (req.status == 200) {
                if ((silentRequest || checkErrorRequest(req, _phpFile)) && _acceptCallBackMethod instanceof Function)
                    (new DEvent(_acceptCallBackMethod, _callBackObject)).call(((onlyXml) ? req.responseXML : req.responseText), {
                        resolve: resolve,
                        reject: reject
                    },req);
            } else if (_cancelCallBackMethod instanceof Function) {
                (new DEvent(_cancelCallBackMethod, _callBackObject)).call((onlyXml) ? req.responseXML : req.responseText, req.status,req);
            }
            SYS_Event('onRequestServerEnd', req, reqUid, silentRequest);
            delete req;
        }
        if (async)
            req.onreadystatechange = func;
        try {
            SYS_Event('onRequestServerBegin', req, reqUid, silentRequest);
            req.send(postData);
        } catch (e) {
        }
        SYS_RequestObject = req;
        if (!async) func();
    });
    return promise;
}
function requestServerMultiDataSets(_sysid,
                                    _formName,
                                    formData,
                                    _datas,
                                    callBackAcceptMethod,
                                    callBackCancelMethod,
                                    callBackObject) {
    var _data = {};
    var dsName = '';
    var _propertyName;
    var _baseValue = _formName;
    _baseValue += parseDataToUrl(formData);
    /*for(_propertyName in formData){
        _baseValue+='&'+_propertyName+'='+formData[_propertyName];
    }*/
    _data['_sysid'] = _sysid;
    for (var index = 0; index < _datas.length; index++) {
        dsName = 'ds' + index;
        if (callBackObject && callBackObject.getSysInfoByAttr) {
            _data[dsName + '[Form]'] = /*callBackObject.getSysInfoByAttr(_datas[index].DataSet,'formname')||*/_formName;
        } else {
            _data[dsName + '[Form]'] = _formName;
        }

        for (_propertyName in formData) {
            if (formData.hasOwnProperty(_propertyName)) {
                _data[dsName + '[' + _propertyName + ']'] = formData[_propertyName];
            }

        }
        for (_propertyName in _datas[index]) {
            if (_datas[index].hasOwnProperty(_propertyName)) {
                _data[dsName + '[' + _propertyName + ']'] = _datas[index][_propertyName];
            }
        }
    }
    return requestServer(true,
                                         'getmultidata',
                                         'Form',
                                         _baseValue,
                                         _data,
                                         callBackAcceptMethod,
                                         callBackCancelMethod,
                                         callBackObject,
                                         true);
}
function requestDataSetThread(name, data, acceptedCallback, cancelledCallback, callBackObject, async) {
    var infoThread = D3Api.MULTI_REQUEST;//информация об отправляемых запросах(потоках)
    if (!infoThread) {
        infoThread = {"MAX_THREAD": "10", "MAX_REQUEST": "10", "MAX_DATA_COUNT": "6000"};
    }

    var recCount = +infoThread.MAX_DATA_COUNT || 6000;
    var cnt = 0; // общее количестов запросов неоходимое для получения
    var _s = 1;

    data['mode'] = 'Range';
    data['_c'] = recCount;
    data['_s'] = _s;

    requestServer(
        true,
        'getdata',
        'Form',
        name,
        data,
        function(_xml){
            var fetchData = function(_xml) {
                return new Promise(function (resolve, reject) {
                    var currThread = 0;
                    var nResult = 0;
                    var res = [_xml];
                    var error = null;
                    var status = null;

                    function ExecuteMultiDataSet() {
                        if (!error) {
                            if (currThread >= +infoThread['MAX_THREAD']) {
                                return;
                            }
                            if (nResult >= cnt) {
                                resolve(res);
                            } else if (nResult + currThread < cnt) {
                                ++currThread;
                                _s += recCount;
                                data['_s'] = _s;
                                requestServer(
                                    true,
                                    'getdata',
                                    'Form',
                                    name,
                                    data,
                                    function(_xml){
                                        --currThread;
                                        ++nResult;
                                        _xml && res.push(_xml);
                                        ExecuteMultiDataSet();
                                    },
                                    function(_xml,_status) {
                                        error = _xml;
                                        status = _status;
                                        --currThread;
                                        ++nResult;
                                        ExecuteMultiDataSet();
                                    }, callBackObject, true, async);
                                ExecuteMultiDataSet();
                            }
                        } else {
                            reject({
                                'xml': error,
                                'status': status
                            });
                        }
                    }
                    ExecuteMultiDataSet();
                });
            }
            var rowCount = _xml.querySelector('rowcount');
                rowCount = +rowCount.textContent;
            cnt = Math.ceil(rowCount / recCount) - 1;
            if (cnt > 0) {
                fetchData(_xml)
                    .then(function(res) {
                        if (acceptedCallback instanceof Function) acceptedCallback(res);
                    })
                    .catch(function(rej) {
                        if (cancelledCallback instanceof Function) cancelledCallback(rej);
                    });

            } else {
                if (acceptedCallback instanceof Function) acceptedCallback([_xml]);
            }
        },
        cancelledCallback, callBackObject, true, async);
}
function requestServerMultiDataSetsThread(_sysid,
                                          _formName,
                                          formData,
                                          _datas,
                                          callBackObject) {

    var promise = new Promise(function (resolve, reject) {
        var infoThread = D3Api.MULTI_REQUEST;//информация об отправляемых запросах(потоках)
        if (!infoThread) {
            infoThread = {"MAX_THREAD": "", "MAX_REQUEST": ""};
        }
        _datas = D3Api.DataChunk(_datas, +infoThread['MAX_REQUEST']);
        var cnt = _datas.length;
        if (!infoThread['MAX_THREAD']) {
            infoThread['MAX_THREAD'] = cnt;
        }
        var currThread = 0;
        var nResult = 0;
        var res = [];
        var error = null;
        var status = null;

        function ExecuteMultiDataSet() {
            if (!error) {
                if (currThread >= +infoThread['MAX_THREAD']) {
                    return;
                }
                var remove = _datas.splice(0, 1);
                if (remove && remove.length > 0) {
                    ++currThread;
                    if (Array.isArray(remove)) {
                        remove = remove[0];
                    }
                    requestServerMultiDataSets(_sysid,
                        _formName,
                        formData,
                        remove,
                        function(_xml){
                            --currThread;
                            ++nResult;
                            res.push(_xml);
                            ExecuteMultiDataSet();
                        },
                        function(_xml,_status){
                            error = _xml;
                            status = _status;
                            --currThread;
                            ++nResult;
                            ExecuteMultiDataSet();

                        },
                        callBackObject);
                    ExecuteMultiDataSet();
                } else {
                    if (nResult >= cnt) {
                        resolve(res);
                    }

                }
            } else {
                reject({
                    'xml': error,
                    'status': status
                });
            }
        }
        ExecuteMultiDataSet();
    });
    return promise;
}
function requestServerMultiActions(_formName,
                                   formData,
                                   _datas,
                                   callBackAcceptMethod,
                                   callBackCancelMethod,
                                   callBackObject) {
    var _data = {};
    var actName = '';
    var _propertyName;
    var _baseValue = _formName;
    _baseValue += parseDataToUrl(formData);
    for (var index = 0; index < _datas.length; index++) {
        actName = 'act' + index;
        _data[actName + '[Form]'] = /*callBackObject.getSysInfoByAttr(_datas[index].Action,'formname')||*/_formName;
        for (_propertyName in formData) {
            if (formData.hasOwnProperty(_propertyName)) {
                _data[actName + '[' + _propertyName + ']'] = formData[_propertyName];
            }
        }
        for (_propertyName in _datas[index]) {
            if (_datas[index].hasOwnProperty(_propertyName)) {
                _data[actName + '[' + _propertyName + ']'] = _datas[index][_propertyName];
            }
        }
    }
    return requestServer(true,
                                         'getmultiaction',
                                         'Form',
                                         _baseValue,
                                         _data,
                                         callBackAcceptMethod,
                                         callBackCancelMethod,
                                         callBackObject,
                                         true);
}
function requestServerForm(_n,_a,_c,_o,_p){
    return  requestServer(true,
                                          'getform',
                                          'Form',
                                          _n,
                                          _p||{},
                                          _a,
                                          _c,
                                          _o);
}
function requestServerDataSet(_n,_d,_a,_c,_o,async) {
    return requestServer(true, 'getdata', 'Form', _n, _d, _a, _c, _o, true, async);
}
function requestServerAction(_definedPostMethod,_n,_d,_a,_c,_o,async) {
    return requestServer(true, 'action', 'Form', _n, _d, _a, _c, _o, true, async);
}
function requestServerModule(_definedPostMethod,_n,_d,_a,_c,_o,_xml,async){
    return requestServer(true,'getmodule','Form',_n,_d,_a,_c,_o,_xml,async);
}
var SYS_including_css_files = new Array();
var includeingfiles = new Array();
function SYS_include_css(_fileName,_not_theme, id) {
    if (typeof (SYS_including_css_files[_fileName]) != 'undefined') return;
    var objHead = document.getElementsByTagName('head')[0];
    var objStyle = document.createElement('link');
    objStyle.rel = 'stylesheet';
    objStyle.type = 'text/css';

    if (!empty(id)) {
        objStyle.setAttribute("id", id);
    }

    if(_not_theme === true){
        objStyle.href = _fileName + ((_fileName.indexOf('.css') != -1) ? '' : '.css');
    }else{
        var theme = ((SYS_current_theme != '') ? '_' : '') + SYS_current_theme + '.css';
        if((_fileName.indexOf('.css') != -1)){
            _fileName = _fileName.replace('.css','');
        }
        objStyle.href = _fileName + theme;
    }
    objHead.appendChild(objStyle);
    SYS_including_css_files[_fileName] = objStyle;
}
function setNewTheme(_nameTheme) {
    window.SYS_current_theme = _nameTheme;
    var loadedCssFiles = new Array();
    for (var _fileName in SYS_including_css_files) {
        if (!SYS_including_css_files.hasOwnProperty(_fileName)) {
            continue;
        }
        removeDomObject(SYS_including_css_files[_fileName]);
        delete SYS_including_css_files[_fileName];
        loadedCssFiles.push(_fileName);
    }
    for (var index = 0; index < loadedCssFiles.length; index++) {
        SYS_include_css(loadedCssFiles[index]);
    }
}
function setDefaultTheme() {
    if (window.SYS_current_theme == '') return;
    setNewTheme('');
}
function SYS_include_js(_fileName,
                        callBackAccept,
                        callBackCancel,
                        callBackObject) {
    callBackAccept = callBackAccept || emptyFunction;
    callBackCancel = callBackCancel || emptyFunction;
    if (includeingfiles[_fileName] == true) return false;
    includeingfiles[_fileName] = false;
    var objHead = document.getElementsByTagName('head')[0];
    var objScript = document.createElement('script');
    objScript.type = 'text/javascript';
    objScript.src = _fileName;
    if(!(/(.+)\.js/.test(objScript.src))){
        objScript.src += '.js';
    }
    objScript.src = objScript.src.replace('.js', ((window.SYS_current_theme != '') ? '_' : '') + window.SYS_current_theme + '.js');
    objScript.onload = function () {
        includeingfiles[_fileName] = true;
        (new DEvent(callBackAccept, callBackObject)).call(_fileName);
        this.onload = emptyFunction;
        this.onreadystatechange = emptyFunction;
    }
    objScript.onreadystatechange = function () {
        if (this.readyState == 'loaded' || this.readyState == 'complete') {
            includeingfiles[_fileName] = true;
            (new DEvent(callBackAccept, callBackObject)).call(_fileName);
            this.onload = emptyFunction;
            this.onreadystatechange = emptyFunction;
        }
    }
    objHead.appendChild(objScript);
    return true;
}
//class DError
function DError() {
    this.isShowError = true;
    this.isGenerateUserException = false;
    this.isGenerateStandartException = false;
    this.showXmlError = function (_xml) {
        if (!isObject(_xml)) {
            if (_xml != null)
                return this.showError(_xml);
            else return false;
        } else {
            try {
                return this.showError(_xml.textContent || _xml.text);
            } catch (e) {
                return this.showError(_xml, e);
            }
        }
    }
    this.showOracleXmlError = function (_xml, _invars) {
        if (_invars == null) _invars = '';

        if (isObject(_xml) || _xml == '[object Element]') {
            try {
                return this.showOracleError((_xml.textContent || _xml.text) + ' \nPARAMS: ' + _invars);
            } catch (e) {
                return this.showOracleError(_xml, e);
            }
        } else {
            return this.showOracleError(_xml + ' \nPARAMS: ' + _invars);
        }
    }
    this.showOracleError = function (_message, _error) {
        /*if (_message != _message.replace(/\r/g, '')) alert(123);
        else alert(321)    */
        if (!this.isShowError) return true;
        if (this.isGenerateUserException) throw new Error(_message);
        if (this.isGenerateStandartException) throw _error;
        var win = new DOracleErrorWindow(_message);
        win.show();
        return true;
    }
    this.showError = function (_message, _error, _backwin) {
        if (!this.isShowError) return true;
        if (this.isGenerateUserException) throw new Error(_message);
        if (this.isGenerateStandartException) throw _error;
        var win = new DErrorWindow(_message);

        if (_backwin === undefined || _backwin)
            return win.show();
        return true;
    }
    this.hideError = function () {
        //empty code
    }
}
//class DDataSetControl
function DDataSetControl(_type,_dom) {
    this.type = _type;
    this.dom = _dom;
}
//class DControlEvent
function DControlEvent(_dom,_event,objectForm, _isFunc) {
    // здесь вызываются функции на события dom
    var dom = _dom;
    var event = _event;
    var ObjectForm = objectForm;
    var _isFunc = _isFunc;
    this.call = function (Form, args) {
        addStackPage(ObjectForm.page);
        var res = true;
        var formname = dom && dom.getAttribute && dom.getAttribute('formname');
        var Form = objectForm.getNamespace();
        if(_isFunc === true && typeof event == 'function'){
            try{
                return event.call(dom, ObjectForm);
            }catch (e){
                showScriptError(e, {formname: formname, script: event})
            }
        }else if (typeof event == 'function') {
            eval('try{res= (' + event + ').call(dom);}catch(e){showScriptError(e, {formname: formname, script: event})};');
        } else {
            eval('try{ res= (function (){' + event + ';}).call(dom);}catch(e){showScriptError(e, {formname: formname, script: event})};');
        }

        removeStackPage();
        return res;
    }
}
function DataSetXmlDataToCount(_xml,showError) {
    var count = -1;
    if(!_xml){
        D3Api.debug_msg('данные не пришли.');
        return;
    }
    var _counts = _xml.childNodes;
    for (var index = 0; index < _counts.length; index++) {
        if (_counts[index].nodeName.toLowerCase() == 'count') {
            count = parseInt(_counts[index].textContent || _counts[index].text || '');
        }
    }
    if (count == -1) {
        return DataSetXmlDataToArray(_xml, 0, showError).length;
    }
    return count;
}
function DataSetXmlDataToArray(_xml,_count,showError) {
    if(!_xml){
        D3Api.debug_msg('данные не пришли.');
        return;
    }
    var result = new Array();
    result.sys_error = false;
    var _rows = _xml.childNodes;
    var _invars = '';
    var rndex = new Number(0);
    var _fields = new Array();
    var fndex = new Number();
    for (var index = 0; (index < _rows.length) && ((rndex < _count) || (_count == 0)); index++) {
        if (_rows[index].nodeName == 'row') {
            _fields = _rows[index].childNodes;
            result[rndex] = new Array();
            for (fndex = 0; fndex < _fields.length; fndex++) {
                if (_fields[fndex].nodeName != '#text'){
                    var vresult = _fields[fndex].textContent||_fields[fndex].text||'';
                    vresult = vresult.replace(/^\s*/,'').replace(/\s*$/,'');
                    result[rndex][_fields[fndex].nodeName]=vresult;
                }
            }
            rndex++;
        }
        if (_rows[index].nodeName == 'info') {
            result['info'] = {};
            for (var inf = 0; inf < _rows[index].childNodes.length; inf++) {
                if (_rows[index].childNodes[inf].nodeName != '#text'){
                    var vresult = _rows[index].childNodes[inf].textContent||_rows[index].childNodes[inf].text||'';
                    vresult = vresult.replace(/^\s*/,'').replace(/\s*$/,'');
                    result['info'][_rows[index].childNodes[inf].nodeName]=vresult;
                }
            }
        }
        if (_rows[index].nodeName == 'inarray') {
            _invars = _invars + _params[index].textContent || _params[index].text || '';
        }
        if (_rows[index].nodeName == 'Error' && showError) {
            var _invars_story = '';
            if (typeof (_rows[index].children) != 'undefined') {
                var _len = _rows[index].children.length;
                for(var jnd=0;jnd<_len;jnd++)
                {
                    var jtem = _rows[index].children[jnd];
                    if(jtem.nodeName=='vars'){
                        _invars_story = jtem.textContent||jtem.text||'';
                    }
                }
            }
            _invars = _invars + _invars_story;
            showOracleXmlError(_rows[index], _invars);
        }
    }
    return result;
}
function XmlDataToArray(_xml,showError) {
    if(!_xml){
        D3Api.debug_msg('данные не пришли.');
        return;
    }
    var result = new Array();
    var _invars = '';
    result.sys_error = false;
    var _params = _xml.childNodes;
    var document = _xml.ownerDocument;
    if (document.querySelector('multidata')) {
        result.multidata = true;
        if (document.querySelector('Error')) {
            result.sys_error = true;
        }
    }
    for (var index = 0; index < _params.length; index++) {
        if (_params[index].nodeName == '#text') continue;

        if (_params[index].nodeName == 'inarray') {
            _invars = _invars + _params[index].textContent || _params[index].text || '';
        }

        if (_params[index].nodeName == 'Error') {
            if (showError && !("multidata" in result)) {
                showOracleXmlError(_params[index], _invars);
            }
            result.sys_error = true;
            result.sys_error_message = _params[index].textContent;
        } else {
            if (_params[index].nodeName == 'notifymsg') {
                result[_params[index].nodeName] = [];
                var msg = _params[index].childNodes;
                for (var j = 0, len = msg.length; j < len; j++) {
                    if (msg[j].nodeName == '#text') {
                        continue;
                    }
                    result[_params[index].nodeName].push(msg[j].textContent || msg[j].text || '');
                }
            } else if (_params[index].nodeName == 'badgemsg') {
                result[_params[index].nodeName] = [];

                var badges = _params[index].childNodes;
                for (var j = 0; j < badges.length; j++) {
                    if (badges[j].nodeType !== 1) {
                        continue;
                    }
                    var msg = badges[j].childNodes, struct = {};
                    for (var k = 0, len = msg.length; k < len; k++) {
                        if (msg[k].nodeName == '#text') {
                            continue;
                        }
                        struct[msg[k].nodeName] = msg[k].textContent || _params[index].text || '';
                    }
                    result[_params[index].nodeName].push(struct);
                }
            } else {
                if(_params[index].hasAttribute('is_array')){
                    result[_params[index].nodeName] = [];
                    var child = _params[index].children;
                    for(var i = 0,len = child.length ; i < len ; i++){
                        if(child[i].nodeName == '#text'){
                            continue;
                        }
                        if(child[i].hasAttribute('is_array')){
                            var ch = child[i].children;
                            var num = result[_params[index].nodeName].push({});
                            for(var j = 0,jlen = ch.length ; j < jlen ; j++){
                                if(ch[j].nodeName == '#text'){
                                    continue;
                                }
                                result[_params[index].nodeName][num - 1][ch[j].nodeName] = ch[j].textContent||ch[j].text||'';
                            }
                        }else{
                            result[_params[index].nodeName].push(child[i].textContent||_params[i].text||'');
                        }
                    }
                }else{
                    result[_params[index].nodeName]=_params[index].textContent||_params[index].text||'';
                }
            }
        }
    }
    return result;
}
//class DDataSetControlContainer
function DDataSetControlContainer(_dom,_form) {
    this.isRepeater = false;
    this.isDetail = false;
    this.isChild = false;
    this.countDetails = 0;
    this.dom = _dom;
    this.form = _form;
    this.activateOnCreate = false;
    this.cancelActivateOnCreate = false;
    this.controls = new Array();
    this.fillControlData = function (_dataArray) {
        var control;
        for (var index = 0; index < this.controls.length; index++) {
            control = this.controls[index];
            switch (control.type) {
                case 0: {
                    if (typeof _dataArray[quickGetProperty(control.dom, 'datafield')] != "undefined") {
                        var val = _dataArray[quickGetProperty(control.dom, 'datafield')] || '';
                        _setControlProperty(control.dom, 'value', val);
                        var name = getProperty(control.dom, 'name');
                        if (!empty(name)) {
                            this.form.page.dispatchEvent('onchangeproperty' + name, control.dom, name, 'value', val);
                        }
                    }
                    break;
                }
                case 1: {
                    _setControlProperty(control.dom, 'caption', _dataArray[quickGetProperty(control.dom, 'captionfield')] || '');
                    break;
                }
                case 2: {
                    _setControlProperty(control.dom, 'hint', _dataArray[quickGetProperty(control.dom, 'hintfield')] || '');
                    break;
                }
            }
        }
    }
    this.getControlCount = function () {
        var count = 0;
        for (var index = 0; index < this.repeaters.length; index++) {
            count += this.repeaters[index];
        }
        return count + this.controls.length;
    }
    this.addControl = function (_dom) {
        if (hasProperty(_dom, 'datafield')) {
            this.controls.push(new DDataSetControl(0, _dom));
        }
        if (hasProperty(_dom, 'captionfield')) {
            this.controls.push(new DDataSetControl(1, _dom));
        }
        if (hasProperty(_dom, 'hintfield')) {
            this.controls.push(new DDataSetControl(2, _dom));
        }
        if (hasProperty(_dom, 'loadoncreate')) {
            this.activateOnCreate = true;
        }
    }
    this.repeaters = new Array();
    this.addRepeaterByDom = function (_dom, _form, _stopRepeate) {
        var _repeater = new DDataSetRepeater(_dom, _form);
        _repeater.dataset = this;
        return this.addRepeater(_repeater, false, _stopRepeate);
    }
    this.addRepeater = function (_repeater, _isDetail, _stopRepeate) {
        this.repeaters.push(_repeater);
        _repeater.isDetail = _isDetail;
        _repeater.stopRepeate = _stopRepeate;
        if (_isDetail)
            this.countDetails++;
        return _repeater;
    }
}
//class DClonePostData
function DClonePostData(_group) {
    this.controlsData = new Array();
    this.childsData = new Array();
    this.group = _group;
}

function getSrcValuesToXML(_tmpPostObject,clone) {
    var text = '';
    for (var index = 0; index < _tmpPostObject.params.length; index++) {
        param = _tmpPostObject.params[index];
        if (typeof (param.get) == 'undefined') continue;
        ignorenull = param.ignorenull;
        if (!empty(clone)) control = clone.controls[param.src];//если собираем от клона
        else control = getControlByName(param.src);//если собираем от контрола
        switch (param.srctype.toLowerCase()) {
            case 'ctrl': {
                if (!isObject(control)) {
                    showError('В клонируемом объекте компонент [' + param.src + '] не найден');
                    continue;
                }
                value = getControlValue(control);
                break;
            }
            case 'ctrlcaption': {
                if (!isObject(control)) {
                    showError('В клонируемом объекте компонент [' + param.src + '] не найден');
                    continue;
                }
                value = getControlCaption(control);
                break;
            }
            case 'var': {
                value = getVar(param.src);
                break;
            }
            case 'data': {
                value = this.data[param.src];
                break;
            }
            default: {
                value = param.src;
            }
        }
        if (!empty(value) || ignorenull) {
            if (empty(value)) value = '';
            _controlName = param.get;
            text += '<' + _controlName + '>' + ((typeof (value) == 'string') ? escapeXml(value) : value) + '</' + _controlName + '>';
        }
    }
    return text;

}
//class DClone
var SYS_clones_uid = 0;
function DClone(_clone,_form) {
    this.clone = _clone;
    this.labels = new Array();
    this.data = new Array();
    this.parentClone = null;
    this.type = 0;//0 - из базы, 1 - добавленные вновь
    this.group = getProperty(_clone, 'groupname', 'unknown');
    this.clones = new Array();
    this.rclones = new Array();
    this.uid = SYS_clones_uid++;
    this.addClone = function (_clone) {
        this.clones.push(_clone);
        _clone.parentClone = this;
        return _clone;
    }
    this.removeCloneByIndex = function (_index) {
        if (!isObject(this.clones[_index])) return;
        var clone = this.clones[_index].remove();
        if (clone.type == 0) this.rclones.push(clone);
        this.clones.splice(_index, 1);
    }
    this.removeClone = function (_clone) {
        this.removeCloneByIndex(this.clones.indexOf(_clone));
    }
    this.form = _form;
    this.controls = {};
    this.rclones = new Array();
    this.remove = function () {
        while (this.clones.length != 0) {
            this.clones[0].remove();
            this.clones.splice(0, 1);
        }
        for (var name in this.controls) {
            if (this.controls.hasOwnProperty(name)) {
                this.form.page.dispatchEvent('removeCloneControl' + name, name, this.controls[name]);
            }
        }
        removeDomObject(this.clone);
        return this;
    }
    this.parse = function () {
        this.form.parseCloneObject(this, this.clone);
        this.callControlEvents();
    }
    this.callControlEvents = function () {
        this.callControlsEvent("onpostclone");
    }
    this.callControlsEvent = function (event_name) {
        for (var name_prop in this.controls) {
            if (!this.controls.hasOwnProperty(name_prop)) {
                continue;
            }
            var control = this.controls[name_prop];
            if (control == this.clone)
                continue;
            if (hasProperty(control, event_name)) {
                _clone = getProperty(control, event_name, "");
                if (!empty(_clone)) {
                    clone_func = function () {
                        eval(_clone);
                    }
                    clone_func.call(control);
                }
            }
        }
    }

    this.getPostData = function (_tmpPostObject) {
        if (_tmpPostObject.propertyes.group != this.group) return '';
        var name = _tmpPostObject.propertyes.name;
        var resultXml = '<' + name + '>';

        resultXml += '<_clone_id>' + this.uid + '</_clone_id>';
        var control;
        var value = '';
        var param;
        var _controlName;
        var ignorenull;
        resultXml += getSrcValuesToXML(_tmpPostObject, this);
        var jndex = 0;
        //        alert(_tmpPostObject.propertyes.group+'='+_tmpPostObject.childs.length);
        var _tmpPostChildObject;
        for (var _tmpName in _tmpPostObject.childs) {
            if (!_tmpPostObject.childs.hasOwnProperty(_tmpName)) {
                continue;
            }
            _tmpPostChildObject = _tmpPostObject.childs[_tmpName];
            switch (_tmpPostChildObject.type.toLowerCase()) {
                case 'add': {
                    for (jndex = 0; jndex < this.clones.length; jndex++) {
                        if (this.clones[jndex].type != 0)
                            resultXml += this.clones[jndex].getPostData(_tmpPostChildObject);
                    }
                    break;
                }
                case 'upd': {
                    for (jndex = 0; jndex < this.clones.length; jndex++) {
                        if (this.clones[jndex].type != 1)
                            resultXml += this.clones[jndex].getPostData(_tmpPostChildObject);
                    }
                    break;
                }
                case 'del': {
                    for (jndex = 0; jndex < this.rclones.length; jndex++) {
                        resultXml += this.rclones[jndex].getPostData(_tmpPostChildObject);
                    }
                    break;
                }
                default: {
                    for (jndex = 0; jndex < this.clones.length; jndex++) {
                        resultXml += this.clones[jndex].getPostData(_tmpPostChildObject);
                    }
                }
            }
        }
        return resultXml + '</' + name + '>';
    }
}
//class DDataSetRepeater
function DDataSetRepeater(_dom,_form) {
    DDataSetControlContainer.call(this, _dom, _form);
    this.isRepeater = true;
    this.isLoadOne = false;
    this.distinctField = getProperty(_dom, 'distinct', '');
    this.isDistinct = this.distinctField != '';
    this.onpostclone = null;
    this.onclone = null;
    var events = {
        'onclone': [],
        'onpostclone': []
    }
    _dom.style.display = "none";
    //_dom.style.visibility='hidden';
    _dom.setAttribute("clone", true, false);
    _dom.setAttribute('sample', true, false);
    if (!hasProperty(_dom, 'cmptype')) {
        _dom.setAttribute('cmptype', 'clone', false);
    }
    this.isClearData = getProperty(_dom, 'clear', 'false') == 'true';
    this.isSortData = getProperty(_dom, 'sort', 'false') == 'true';
    var onclone = getProperty(_dom, 'onclone', '');
    if (onclone != '') {
        var Form = this.form.getNamespace();
        eval('onclone=function (_dataArray){' + onclone + ';}');
        this.onclone = onclone;
    }
    var onpostclone = getProperty(_dom, 'onpostclone', '');
    if (onpostclone != '') {
        var Form = this.form.getNamespace();
        eval('onpostclone=function (_clone,_dataArray){' + onpostclone + ';}');
        this.onpostclone = onpostclone;
    }
    this.addEvent = function (_eventName, _dom) {
        if(_eventName in events){
            events[_eventName].push(new DControlEvent(this.dom, quickGetProperty(this.dom, _eventName), this.form))
        }
    }
    this.addEventListener = function(_eventName, _listener){
        if(_eventName in events){
            events[_eventName].push(new DControlEvent(this.dom, _listener, this.form))
        }
    }
    this.callEvents = function (_eventName) {
        var args = new Array();
        for (var andex = 1; andex < arguments.length; andex++) {
            args.push(arguments[andex]);
        }
        var result = true;
        for (var index = 0; index < events[_eventName].length; index++) {
            result = events[_eventName][index].call(null, args) && result;
        }
        return result;
    }
    this.count = parseInt(quickGetProperty(_dom, 'repeate'));
    this.from = parseInt(getProperty(_dom, 'repeate_from', 0));
    //_dom.removeAttribute("repeate");
    //_dom.removeAttribute("dataset");
    this.clone = new DClone(_dom, _form);
    this.parentRepeater = null;
    this.dataset = null;
    this.parentField = null;
    this.keyField = null;
    this.parentFieldsData = new Array();
    if (hasProperty(_dom, 'keyfield')) {
        this.keyField = quickGetProperty(_dom, 'keyfield');
        _dom.removeAttribute("keyfield", false);
    }
    if (hasProperty(_dom, 'parentfield')) {
        this.parentFieldsData[0] = quickGetProperty(_dom, 'parentfield');
        _dom.removeAttribute("parentfield");
    }
    if (hasProperty(_dom, 'parentFieldsData')) {
        var _object = {};
        eval('_object=' + quickGetProperty(_dom, 'parentFieldsData'));
        for (var _propertyName in _object) {
            if (_object.hasOwnProperty(_propertyName)) {
                this.parentFieldsData[parseInt(_propertyName)] = _object[_propertyName];
            }
        }
        _dom.removeAttribute('parentFieldsData', false);
    }
    if (hasProperty(_dom, 'groupname')) {
        this.form.registerRepeaterGroup(quickGetProperty(_dom, 'groupname'), this);
    }
    if (hasProperty(_dom, 'name')) {
        this.form.registerRepeaterByName(quickGetProperty(_dom, 'name'), this);
        this.addControl(_dom);
        //_dom.removeAttribute('name');
    }
    this.data = [];/*инициализация переменной. Если оставить null, то если во вложенном репитере нет данных (activateoncreate=flase), возникала ошибка в fillRepeater(this.data.length)*/
    this.childCount = 0;
    this.killClones = function () {
        while (this.clone.clones.length != 0) {
            this.clone.removeCloneByIndex(0);
        }
        this.clone.rclones = new Array();
    }
    this.callDetailEvent = function () {
        this.childCount--;
        if (this.childCount == 0) {
            if (this.parentRepeater != null) {
                if (this.isDetail) {
                    this.parentRepeater.callDetailEvent();
                } else {
                    this.fillRepeater();
                    if (!this.isLoadOne) {
                        this.parentRepeater.callDetailEvent();
                    }
                }
            } else {
                this.fillRepeater();
            }
        }
    }
    this.fillRepeater = function (_parentValuesData) {
        if (hasProperty(this.dom, 'inclone')) return false;

        var stopRepeate = this.form.getVar('stopRepeate');
        if (!empty(stopRepeate) && stopRepeate == true && this.stopRepeate == true) return false;
        if (empty(_parentValuesData)) _parentValuesData = new Array();
        this.killClones();
        var camount = 0;
        var clones = new Array();
        var childClones = new Array();
        var cndex = 0;
        var childValuesData = new Array();
        var jndex = new Number();
        var _continue = false;
        var distinctValue;
        var distincts = new Array();
        var _data;
        var _repeater;
        var _isSortFind = false;
        for (var index = this.from; index < this.data.length && (camount < this.count || this.count == 0); index++, camount++) {
            _data = this.data[index];
            if (this.parentFieldsData.length != 0) {
                _continue = false;
                for (jndex = 0; jndex < this.parentFieldsData.length; jndex++) {
                    if (this.parentFieldsData[jndex] == undefined)
                        continue;
                    if (_parentValuesData[jndex] != _data[this.parentFieldsData[jndex]]) {
                        _continue = true;
                        break;
                    }
                }
                if (!_continue && this.isDistinct) {
                    if (distincts[distinctValue = _data[this.distinctField]]) continue;
                    distincts[distinctValue] = true;
                }
                if (_continue) {
                    if (this.isSortData) {
                        if (_isSortFind) {
                            return clones;
                        }
                    }
                    continue;
                }
                _isSortFind = true;
            } else if (this.isDistinct) {
                if (distincts[distinctValue = _data[this.distinctField]]) continue;
                distincts[distinctValue] = true;
            }
            childClones = new Array();
            childValuesData = new Array(_data[this.keyField] || null);
            for (jndex = 0; jndex < _parentValuesData.length; jndex++) {
                childValuesData.push(_parentValuesData[jndex]);
            }

            for (var rndex = 0; rndex < this.repeaters.length; rndex++) {
                _repeater = this.repeaters[rndex];
                if (_repeater.isDetail) {
                    childClones = childClones.concat(_repeater.fillRepeater(childValuesData));
                }
            }
            clones.push(this.addClone(_data, this.dom, this.parentRepeater == null));
            for (cndex = 0; cndex < childClones.length; cndex++) {
                removeDomObject(childClones[cndex]);
            }
            if (this.isClearData) {
                this.data.splice(index, 1);
                index--;
                //_data.skip=true;
            }
        }
        return clones;
    }
    this.addCloneByUser = function (_dataArray, _domObject, _labelName) {
        var container = this.clone;
        var _dom = this.dom;
        if (isObject(_domObject.clone)) {
            container = _domObject.clone;
            if (_labelName != null) {
                _dom = container.labels[_labelName];
            } else {
                _dom = _domObject;
            }
        }
        if (this.count != 0)
            if (this.count <= container.clones.length) return;

        var childValuesData = new Array(_dataArray[this.keyField]);
        var childClones = new Array();
        var _repeater;
        for (var rndex = 0; rndex < this.repeaters.length; rndex++) {
            if ((_repeater = this.repeaters[rndex]).isDetail)
                childClones = this.repeaters[rndex].fillRepeater(childValuesData);
        }
        var cloneObject = new DClone(this.addClone(_dataArray, _dom, false), this.form);
        container.clones.push(cloneObject);
        cloneObject.data = _dataArray;
        cloneObject.parse();
        cloneObject.type = 1;
        cloneObject.parentClone = container;
        if (this.onpostclone != null) {
            this.form.setSubstitutionControls(this.controls);
            this.onpostclone.call(_dom, cloneObject.clone, _dataArray);
            this.form.stopSubstitutionControls();
        }
        this.callEvents('onpostclone');
        while (childClones.length != 0) {
            removeDomObject(childClones[0]);
            childClones.splice(0, 1);
        }
        return cloneObject;
    }
    this.addClone = function (_dataArray, _domObject, _parsing) {
        var cloneObject;
        this.fillControlData(_dataArray);
        if (this.onclone != null) {
            this.form.setSubstitutionControls(this.controls);
            this.onclone.call(_dom, _dataArray);
            this.form.stopSubstitutionControls();
        }
        this.callEvents('onclone');
        var clone = this.dom.cloneNode(true);
        clone.style.display = '';
        clone.removeAttribute("sample");
        if (_domObject.parentNode){
            _domObject.parentNode.insertBefore(clone, _domObject);
        }
        if (_parsing) {
            this.clone.addClone(cloneObject = new DClone(clone, this.form));
            cloneObject.parse();
            cloneObject.data = _dataArray;

            if (this.onpostclone != null) {
                this.form.setSubstitutionControls(this.controls);
                this.onpostclone.call(_domObject, clone, _dataArray);
                this.form.stopSubstitutionControls();
            }
        }

        return clone;
    }
    this.setData = function (_dataArray) {
        this.data = _dataArray;

        if (!this.isLoadOne) {
            this.childCount += this.repeaters.length + 1;
        } else {
            this.childCount += this.countDetails + 1;
        }
        this.callDetailEvent();
        this.isLoadOne = true;
    }
}
//class DDataSetContainer
function DDataSetContainer(_name,_dom,_form) {
    DDataSetControlContainer.call(this, _dom, _form);
    this.name = _name;
    this.data = null;
    var events = {
        afterrefresh: new Array(),
        insteadrefresh: new Array(),
        onrefresh: new Array(),
        before_refresh: new Array()
    };
    this.getEventsCount = function (_eventName) {
        return events[_eventName].length;
    }
    this.addEvent = function (_eventName, _dom) {
        events[_eventName].push(new DControlEvent(_dom, quickGetProperty(_dom, _eventName), this.form));
    }
    this.addEventListener = function (_eventName, _listener, dom) {
        events[_eventName].push(new DControlEvent(dom, _listener, this.form));
    }
    this.callEvents = function (_eventName) {
        var args = new Array();
        for (var andex = 1; andex < arguments.length; andex++) {
            args.push(arguments[andex]);
        }
        var result = true;
        for (var index = 0; index < events[_eventName].length; index++) {
            result = events[_eventName][index].call(null, args) && result;
        }
        return result;
    }
    this.setLocalData = function (dataArray, needEvents) {
        this.data = dataArray;
        if (needEvents || needEvents == undefined) {
            if (this.getEventsCount('onrefresh') != 0) {
                this.callEvents('onrefresh', this.data, this.controls);
            }
            if (this.data.length != 0) {
                this.fillControlData(this.data[0]);
            }
            var repeater;
            for (var index = 0; index < this.repeaters.length; index++) {
                repeater = this.repeaters[index];
                repeater.setData(this.data)
            }
            this.callEvents('afterrefresh');
        }
    }
    this.setData = function (_data, showError) {
        if (_data instanceof Array) {
            this.data = _data;
        } else {
            this.data = DataSetXmlDataToArray(_data, 0, showError);
        }
        if (this.data.sys_error) {
            return;
        }

        //Переворот данных
        var sysinfo = this.form.getSysInfoByName(this.name);
        if (sysinfo && sysinfo.ColumnsField && sysinfo.ValuesField) {
            var index = 0;
            if (sysinfo.PrimaryField) {
                var ndata = {};
                for (var i = 0; i < this.data.length; i++) {
                    var key = this.data[i][sysinfo.PrimaryField];
                    var field = this.data[i][sysinfo.ColumnsField];
                    var value = this.data[i][sysinfo.ValuesField];
                    if (!ndata[key]) {
                        ndata[key] = {data: this.data[i]};
                        ndata[key].data[sysinfo.PrimaryField] = key;
                        index++;
                    } else {
                        this.data[i] = null;
                    }
                    ndata[key].data[field] = value;
                }
                this.data = this.data.filter(function(e) {
                    return e !== null;
                });
            } else {   //Одна строка
                for (var i = 0; i < this.data.length; i++) {
                    var tmp = this.data[i];
                    this.data[i] = new Array(); //Используется не поназначению, не меняю дабы ничего не сломать
                    this.data[0][tmp[sysinfo.ColumnsField]] = tmp[sysinfo.ValuesField]
                }
                this.data.splice(1);
                index = 1;
            }
            if (this.data['info']) {
                this.data['info'].rowcount = index;
            }
        } else if (sysinfo && sysinfo.ColumnsField) //Поворот всех данных строки -> столбцы
        {
            var dataNew = new Array();
            var ParName = "";
            var j;
            for (var i = 0; i < this.data.length; i++) {
                j = 0;
                for (var z in this.data[i]) {
                    if (!this.data[i].hasOwnProperty(z)) {
                        continue
                    }
                    if (z == sysinfo.ColumnsField)
                        continue;
                    ParName = this.data[i][sysinfo.ColumnsField];
                    if (dataNew[j] == null) dataNew[j] = {};
                    dataNew[j][ParName] = this.data[i][z];
                    j++;
                }
            }
            this.data.splice(0);
            for (var d in this.data) {
                if (!this.data.hasOwnProperty(d)) {
                    continue
                }
                dataNew[d] = this.data[d];
            }

            this.data = dataNew;
            this.data.info.rowcount = this.data.length;
        }

        if (this.getEventsCount('onrefresh') != 0) {
            this.callEvents('onrefresh', this.data, this.controls);
        }
        if (this.data.length != 0) {
            this.fillControlData(this.data[0]);
        }
        var repeater;
        for (var index = 0; index < this.repeaters.length; index++) {
            repeater = this.repeaters[index];
            repeater.setData(this.data)
        }
    }
}

//class DPostObject
function DPostObject() {
    this.propertyes = new Array();
    this.params = new Array();
    this.childs = new Array();
}
function execEventForm(idForm,funcBody) {
    var f = document.getElementById(idForm);
    f.form.execEventFunc.call(this, funcBody);
}
//class DForm
function DForm(_name,_page) {
    this.name = _name;
    this.container = new DNullContainer();
    this.page = _page;

    var repeatersGroup = new Array();
    var repeaters = new Array();
    this.stateReloadForm = false;

    var cnslMsg = [];
    var menuInfo = [];
    this.setConsoleMsg = function(_msg, _param){
        if(cnslMsg.indexOf(_msg) === -1){
            console.warn(_msg, _param);
            cnslMsg.push(_msg);
        }
    }
    this.setMenuInfo = function(_menuInfo){
        menuInfo = _menuInfo;
    }
    this.getMenuInfo = function(){
        return menuInfo;
    }
    //События, которые оборачиваются внутренним обработчиком
    var execDomEvents = new Array(
        'onclick',
        'ondblclick',
        'onchange',
        'onfocus',
        'onblur',
        'onmousedown',
        'onmouseup',
        'onkeypress',
        'onmouseover',
        'onmouseout',
        'onkeyup');
    ////////////////////////////////////////////////////////
    //Функция для замыкания
    var execEventFunc = function (funcBody, event) {
        // здесь вызываются функции на события dom, например открытие формы
        var Form = namespace;
        var dom = this;
        var formname = dom && dom.getAttribute && dom.getAttribute('formname');
        var container = dom && dom.getAttribute && dom.getAttribute('container');
        var template_field = dom && dom.getAttribute && dom.getAttribute('template_field');
        var tabsheet = dom && dom.closest('[cmptype="TabSheet"]');

        var templates_code = dom && dom.closest('[templates_code]');
        templates_code = templates_code && templates_code.getAttribute('templates_code');
        var visit_tab = dom && dom.closest('[vistab]');
        visit_tab = visit_tab && visit_tab.getAttribute('vistab');

        try{
            eval('(function(){with(Form){' + funcBody + '}}).call(this, event)');
        } catch(e) {
            showScriptError(e, {
                formname: formname,
                script: funcBody,
                container: container,
                visit_tab: visit_tab,
                templates_code: templates_code,
                template_field: template_field,
                tabsheet: tabsheet
            });
        }
    };
    this.execEventForm = execEventFunc;
    //Для дом событий
    var execDomEventFunc = function (dom, funcBody) {
        return function (event) {
            execEventFunc.call(dom, funcBody, event)
        };
    }
    ///////////////////////////////////////////////////////
    this.getRepeaterByName = function (_repeaterName) {
        return repeaters[_repeaterName];
    }
    this.getRepeaterByGroupName = function (_groupName) {
        return repeatersGroup[_groupName];
    }
    this.GetRepiters = function () {
        return repeaters;
    }
    this.addRepeaterClone = function (_groupName, _dataArray, _domObject, _labelName) {
        var _repeater = repeatersGroup[_groupName];
        if (!isObject(_repeater)) {
            showError('Группа [' + _groupName + '] не найдена');
            return null;
        }
        return _repeater.addCloneByUser(_dataArray, _domObject, _labelName);
    }
    this.removeRepeaterClone = function (_groupName, _domObject, _index) {
        var _clone = _domObject.clone;
        var error = false;
        if (!isObject(_clone)) {
            var _repeater = repeatersGroup[_groupName];
            if (!isObject(_repeater)) {
                error = true;
            } else {
                _clone = _repeater.clone;
            }
        } else {
            if ((_clone.group == _groupName) && (_index == null)) {
                _index = _clone.parentClone.clones.indexOf(_clone);
                _clone = _clone.parentClone;
            }
        }
        if (error) {
            showError('Объект [' + getProperty(_domObject, 'name', 'unknownName') + '] не может найти клонируемый объект в группе [' + _groupName + ']');
            return;
        }
        if (_index == null) _index = _clone.clones.length - 1;
        if (_index == -1) return;
        _clone.removeCloneByIndex(_index);
    }
    this.registerRepeaterByName = function (_nameRepeater, _repeater) {
        repeaters[_nameRepeater] = _repeater;
    }
    this.getCloneObjectsByRepeater = function (_repeater, _nameControl) {
        var controls = new Array();
        for (var index = 0; index < _repeater.clone.clones.length; index++) {
            controls.push(_repeater.clone.clones[index].controls[_nameControl]);
        }
        return controls;
    }
    this.getCloneObjectsByRepeaterName = function (_nameRepeater, _nameControl) {
        var _repeater;
        if (typeof (_repeater = repeaters[_nameRepeater]) != 'object') {
            showError('Repeater с именем ' + _nameRepeater + ' не зарегистрирован на форме.');
            return new Array();
        }
        return this.getCloneObjectsByRepeater(_repeater, _nameControl);
    }
    var groupsClone = new Array();
    this.registerRepeaterGroup = function (_groupName, _repeater) {
        repeatersGroup[_groupName] = _repeater;
        groupsClone[_groupName] = _repeater.clone;
    }
    var getPostXml = function (_tmpPostObject) {
        var _repeater = repeatersGroup[_tmpPostObject.propertyes.group];
        var resultXml = '';
        var name = '';
        if (empty(_repeater)) {
            name = _tmpPostObject.propertyes.name;
            resultXml = '<' + name + '>';
            resultXml += getSrcValuesToXML(_tmpPostObject, null);
            resultXml += '</' + name + '>';
        } else {
            var _clone = _repeater.clone;

            var jndex = new Number();
            switch (_tmpPostObject.type.toLowerCase()) {
                case 'add': {
                    for (jndex = 0; jndex < _clone.clones.length; jndex++) {
                        if (_clone.clones[jndex].type != 0)
                            resultXml += _clone.clones[jndex].getPostData(_tmpPostObject);
                    }
                    break;
                }
                case 'upd': {
                    for (jndex = 0; jndex < _clone.clones.length; jndex++) {
                        if (_clone.clones[jndex].type != 1)
                            resultXml += _clone.clones[jndex].getPostData(_tmpPostObject);
                    }
                    break;
                }
                case 'del': {
                    for (jndex = 0; jndex < _clone.rclones.length; jndex++) {
                        if (_clone.rclones[jndex].type == 0)
                            resultXml += _clone.rclones[jndex].getPostData(_tmpPostObject);
                    }
                    break;
                }
                default: {
                    for (jndex = 0; jndex < _clone.clones.length; jndex++) {
                        resultXml += _clone.clones[jndex].getPostData(_tmpPostObject);
                    }
                }
            }
        }
        return resultXml;
    }
    this.takePropertyCloneControl = function (_clone, _domObject) {
        _domObject.clone = _clone;
        var _controlName;
        if (hasProperty(_domObject, "name")) {
            _clone.controls[_controlName = quickGetProperty(_domObject, 'name')] = _domObject;
            this.page.dispatchEvent('createCloneControl' + _controlName, _controlName, _domObject);
        }
        //events
    }
    this.parseCloneObject = function (_clone, _domObject) {
        if (hasProperty(_domObject, "cmptype")) {
            this.takePropertyCloneControl(_clone, _domObject);
        }
        if (hasProperty(_domObject, 'label')) {
            _clone.labels[quickGetProperty(_domObject, 'label')] = _domObject;
        }
        var _tmpNode;
        var _cloneObject;
        /*  замыкание на текущую форму */
        for (var i = 0; i < execDomEvents.length; i++){
            if (hasProperty(_domObject, execDomEvents[i])){
                _domObject[execDomEvents[i]] = execDomEventFunc(_domObject, quickGetProperty(_domObject, execDomEvents[i]));
            }
        }
        for (var index = 0; index < _domObject.children.length; index++) {
            _tmpNode = _domObject.children[index];
            if (_tmpNode.nodeName == '#text') continue;
            if (hasProperty(_tmpNode, 'sample')) {
                if (hasProperty(_tmpNode, 'inclone')) {
                    var chc = _domObject.children.length - 1;
                    _tmpNode.removeAttribute('inclone');
                    var DS = this.getDataSet(getProperty(_tmpNode, 'dataset', ''));

                    var _repeater = DS.addRepeaterByDom(_tmpNode, this, false);
                    _repeater.addControl(_tmpNode);
                    if (hasProperty(_tmpNode, 'afterrefresh')) {
                        DS.addEvent('afterrefresh', _tmpNode);
                    }
                    if (hasProperty(_tmpNode, 'insteadrefresh')) {
                        DS.addEvent('insteadrefresh', _tmpNode);
                    }
                    if (hasProperty(_tmpNode, 'onrefresh')) {
                        DS.addEvent('onrefresh', _tmpNode);
                    }
                    if (hasProperty(_tmpNode, 'before_refresh')) {
                        DS.addEvent('before_refresh', _tmpNode);
                    }
                    _repeater.setData(DS.data);

                    if (chc == index)
                        break;
                } else {
                    removeDomObject(_tmpNode);
                    index--;
                }
                continue;
            }
            if (hasProperty(_tmpNode, 'trash')) continue;


            /*  замыкание на текущую форму */
            for (var i = 0; i < execDomEvents.length; i++){
                if (hasProperty(_tmpNode, execDomEvents[i])){
                    _tmpNode[execDomEvents[i]] = execDomEventFunc(_tmpNode, quickGetProperty(_tmpNode, execDomEvents[i]));
                }
            }

            if (hasProperty(_tmpNode, 'clone')) {
                _cloneObject = _clone.addClone(new DClone(_tmpNode, this));
                _cloneObject.parse();
                continue;
            }
            //if(typeof((_tmpNode).nodeName)=='#text')continue;
            this.parseCloneObject(_clone, _tmpNode);
        }
    }
    var associateControls = new Array();
    var currentControls = associateControls;
    this.isExistsControlByName = function (_controlName, _show_error) {
        if (_controlName == '') return false;
        if (!isObject(currentControls[_controlName])) {
            if (!isObject(associateControls[_controlName])) {
                if (_show_error || _show_error == null) {
                    showError('Компонент с именем ' + _controlName + ' не  зарегистрирован на форме ' + this.name);
                }
                return false;
            }
            return true;
        }
        return true;
    }
    var ObjectForm = this;
    this.getControlByName = function (_controlName, _show_error) {
        if (!this.isExistsControlByName(_controlName, _show_error)) return null;
        return currentControls[_controlName] || associateControls[_controlName];
    }
    this.setHint = function (_controlName, _hint) {
        if (this.isExistsControlByName(_controlName)) {
            var _dom = currentControls[_controlName] || associateControls[_controlName];
            _setControlProperty(_dom, 'hint', _hint);
        }
    }
    this.getHint = function (_controlName) {
        if (this.isExistsControlByName(_controlName))
            return _getControlProperty(currentControls[_controlName] || associateControls[_controlName], 'hint');
        return null;
    }


    this.setEnabled = function (_controlName, _value) {
        if (this.isExistsControlByName(_controlName)) {
            var _dom = currentControls[_controlName] || associateControls[_controlName];
            _setControlProperty(_dom, 'enabled', _value);
            this.page.dispatchEvent('onchangeproperty' + _controlName, _dom, _controlName, 'enabled', _value);
        }
    }
    this.getEnabled = function (_controlName) {
        if (this.isExistsControlByName(_controlName))
            return _getControlProperty(currentControls[_controlName] || associateControls[_controlName], 'enabled');
        return null;
    }

    this.setCaption = function (_controlName, _caption) {
        if (this.isExistsControlByName(_controlName)) {
            var _dom = currentControls[_controlName] || associateControls[_controlName];
            _setControlProperty(_dom, 'caption', _caption);
            this.page.dispatchEvent('onchangeproperty' + _controlName, _dom, _controlName, 'caption', _caption);
        }
    }
    this.getCaption = function (_controlName) {
        if (this.isExistsControlByName(_controlName))
            return _getControlProperty(currentControls[_controlName] || associateControls[_controlName], 'caption');
        return null;
    }
    this.setValue = function (_controlName, _value) {
        if (this.isExistsControlByName(_controlName)) {
            var _dom = currentControls[_controlName] || associateControls[_controlName];
            _setControlProperty(_dom, 'value', _value);
            this.page.dispatchEvent('onchangeproperty' + _controlName, _dom, _controlName, 'value', _value);
        }
    }
    this.getValue = function (_controlName) {
        if (this.isExistsControlByName(_controlName))
            return _getControlProperty(currentControls[_controlName] || associateControls[_controlName], 'value');
        return null;
    }
    this.setControlProperty = function (_controlName, _propertyName, _propertyValue) {
        if (this.isExistsControlByName(_controlName)) {
            var _dom = currentControls[_controlName] || associateControls[_controlName];
            _setControlProperty(_dom, _propertyName, _propertyValue);
            this.page.dispatchEvent('onchangeproperty' + _controlName, _dom, _controlName, _propertyName, _propertyValue);
        }
    }
    this.getControlProperty = function (_controlName, _propertyName) {
        if (this.isExistsControlByName(_controlName))
            return _getControlProperty(currentControls[_controlName] || associateControls[_controlName], _propertyName);
        return null;
    }
    this.vars = new Array();
    this.setVar = function (_paramName, _paramValue) {
        this.vars[_paramName] = _paramValue;
        this.page.dispatchEvent('onsetvar:'+_paramName);
    }
    this.getVar = function (_paramName) {
        if (typeof (this.vars[_paramName]) != 'undefined') {
            return this.vars[_paramName];
        }
        return null;
    }

    var eventsControl = {
        onshow: new Array(),
        oncreate: new Array(),
        onclose: new Array(),
        onreload: new Array(),
        LoadDataSets: new Array()
    };
    var callEvents = function (_eventName) {
        addStackPage(this.page);
        var events = eventsControl[_eventName];
        for (var index = 0; index < events.length; index++) {
            events[index].call(namespace);
        }
        removeStackPage();
    }
    this.addEvents = function (_eventName, funcString, _isFunc) {
        eventsControl[_eventName].push(new DControlEvent(null, funcString, this, _isFunc));
    }
    this.callEvents = function (_eventName) {
        callEvents(_eventName);
    }

    var DataSets = new Array();
    var scriptfiles = new Array();
    var cssfiles = new Array();
    var runScripts = new Array();
    var namespace = new Object();
    this.getNamespace = function () {
        return namespace;
    }
    this.existsFunction = function (name) {
        return namespace[name] instanceof Function;
    }
    this.callFunction = function (name) {
        try {
            return namespace[name].apply(this);
        } catch (e) {
            var formname = this.getAttribute('formname');
            showScriptError(e, {formname: formname, script: (namespace[name] || '').toString()});
        }
    }
    this.callFunctionArgs = function (name) {
        var args = new Array();
        for (var i = 1; i < arguments.length; i++) {
            args.push(arguments[i]);
        }
        try {
            return namespace[name].apply(this, args);
        } catch (e) {
            var formname = this.getAttribute('formname');
            showScriptError(e, {formname: formname, script: (namespace[name] || ' (' || args ||')').toString()});
        }
    }
    var sysinfo = new Array();
    var SYS_info_types = new Array();

    var any_loadinfo = function (sys_array, _dom, propertyes, params, addprop) {
        var _tmpPostObjectName = '';
        var attributes = new Array();
        for (var index = 0; index < _dom.attributes.length; index++) {
            attributes[_dom.attributes[index].name] = _dom.attributes[index].value;
        }
        if (typeof (attributes['name']) == 'undefined') {
            showError('Имя объекта не указано');
            return;
        }
        if (sys_array == sysinfo && sys_array[attributes['name']]) {
            console.log('Дублирование системных компонентов на форме. Компонент: ' + attributes['name']);
        }
        var _tmpPostObject = sys_array[attributes['name']] = new DPostObject();
        for (var _propertyName in propertyes) {
            if (!propertyes.hasOwnProperty(_propertyName)) {
                continue;
            }
            if (typeof (attributes[propertyes[_propertyName]]) != 'undefined') {
                _tmpPostObject.propertyes[_propertyName] = attributes[propertyes[_propertyName]];
            }
        }
        for (var _propertyName in addprop) {
            if (!addprop.hasOwnProperty(_propertyName)) {
                continue;
            }
            if (typeof (attributes[_propertyName]) != 'undefined') {
                _tmpPostObject[_propertyName] = attributes[_propertyName];
            } else {
                _tmpPostObject[_propertyName] = addprop[_propertyName];
            }
        }

        var _nodes = _dom.childNodes;
        var _node;
        var _nodeName = '';
        for (var index = new Number(0); index < _nodes.length; index++) {
            _node = _nodes[index];
            if ((_nodeName = _node.nodeName.toLowerCase()) == '#text') continue;
            SYS_info_types[_nodeName].call(this, _node, params, _tmpPostObject);
        }
        _tmpPostObject['attrs'] = attributes;
    }
    SYS_info_types['var'] = function (_dom, params, _tmpPostObject) {
        var _object = {ignorenull: false};
        var attributes = new Array();
        for (var andex = 0; andex < _dom.attributes.length; andex++) {
            attributes[_dom.attributes[andex].name] = _dom.attributes[andex].value;
        }
        if (typeof (attributes['ignorenull']) != 'undefined') {
            _object.ignorenull = attributes['ignorenull'] != 'false';
        }

        for (var jndex = 0; jndex < params.length; jndex++) {
            if (typeof (attributes[params[jndex]]) != 'undefined') {
                _object[params[jndex]] = attributes[params[jndex]];
            }
        }
        _tmpPostObject.params.push(_object);
    }
    SYS_info_types['subaction'] = function (_dom, params, _tmpPostObject) {
        any_loadinfo.call(this, _tmpPostObject.childs, _dom, {
            group: 'group',
            name: 'name'
        }, new Array('get', 'src', 'put', 'srctype'), {type: 'upd'});
    }
    SYS_info_types['module'] = function (_dom) {
        any_loadinfo.call(this, sysinfo, _dom, {}, new Array('get', 'src', 'put', 'srctype'), {
            showerror: true,
            responsetype: 'xml',
            mode: 'get',
            type: '0'
        });
    }
    SYS_info_types['dataset'] = function (_dom) {
        any_loadinfo.call(this, sysinfo, _dom, {
            DataSet: 'name',
            mode: 'mode',
            ColumnsField: 'columns_field',
            ValuesField: 'values_field',
            PrimaryField: 'primary_field'
        }, new Array('get', 'srctype', 'src'), {activateoncreate: true, showerror: true})
    }
    SYS_info_types['action'] = function (_dom) {
        any_loadinfo.call(this, sysinfo, _dom, {}, new Array('get', 'src', 'put', 'srctype'), {
            showerror: true,
            mode: 'get'
        });
    }
    SYS_info_types['scriptfile'] = function (_dom) {
        var _name = _dom.textContent || _dom.text;
        scriptfiles[_name] = false;
    }
    SYS_info_types['cssfile'] = function (_dom) {
        var _name = _dom.textContent || _dom.text;
        cssfiles[_name] = false;
    }
    SYS_info_types['parsererror'] = function (_dom) {
        showError(_dom.textContent || _dom.text);
    }
    SYS_info_types['sysinfo'] = function (_dom) {
        var _node;
        for (var index = new Number(0); index < _dom.childNodes.length; index++) {
            _node = _dom.childNodes[index];
            if (_node.nodeName != '#text') SYS_info_types[_node.nodeName.toLowerCase()].call(this, _node)
        }
    }
    SYS_info_types['report'] = function (_dom) {
        any_loadinfo.call(this, sysinfo, _dom, {ID: 'id'}, new Array('get', 'src', 'srctype'), {type: '0'});
    }
    SYS_info_types['formgetparam'] = function (_dom) {
        this.formSettingsGetParam.push(_dom.textContent || _dom.text);
    }
    SYS_info_types['formparam'] = function (_dom) {
        this.formSettingsState.push(_dom.textContent || _dom.text);
    }
    SYS_info_types['help'] = function (_dom) {
        this.helpShow = true;
        this.helpUrl = _dom.textContent || _dom.text || '';
        this.helpAbsPath = _dom.attributes[0].value;
        this.helpUid = _dom.attributes[1].value;
    }
    this.parseSystemInfo = function (_dom) {
        var _tmpInfo = parseXML('<sysinfo>' + _dom.innerHTML + '</sysinfo>');
        for (var index = new Number(0); index < _tmpInfo.childNodes.length; index++) {
            _node = _tmpInfo.childNodes[index];
            if (_node.nodeName != '#text') SYS_info_types[_node.nodeName.toLowerCase()].call(this, _node);
        }
        removeDomObject(_dom);
    }
    this.addSystemInfo = function (_nameInfoObject, _data) {
        /*можно передавать _nameInfoObject с иерархией через : Актуально для action:subaction*/
        var _nameInfoObjectArr = _nameInfoObject.split(':');
        var b = true;
        var sysInfoArr = sysinfo;
        var i = 0;
        var _tmpPostObject = null;
        while (i < _nameInfoObjectArr.length && b) {
            if (isObject(sysInfoArr[_nameInfoObjectArr[i]])) {
                _tmpPostObject = sysInfoArr[_nameInfoObjectArr[i]];
                sysInfoArr = _tmpPostObject.childs;
            } else {
                b = false;
            }
            i++;
        }
        if (!isObject(_tmpPostObject)) {
            _tmpPostObject = sysinfo[_nameInfoObjectArr[0]] = new DPostObject();
        }
        var addparam = true;
        for (var i = 0, len = _tmpPostObject.params; i < len; i++) {
            if (_tmpPostObject.params.get == _data.get) {
                addparam = false;//параметр уже добавлен.
                console.info('параметр ' + _data.get + 'уже добавлен для компонента ' + _nameInfoObject);
                break;
            }
        }
        if (addparam) {
            _tmpPostObject.params.push(_data);
        }
    }
    this.getPropertySysInfoByName = function (_nameObject, _propertyName, _defaultValue) {
        if (!isObject(sysinfo[_nameObject])) return _defaultValue;
        return sysinfo[_nameObject][_propertyName];
    }
    this.setPropertySysInfoByName = function (_nameObject, _propertyName, _Value) {
        if (!isObject(sysinfo[_nameObject])) return;
        sysinfo[_nameObject][_propertyName] = _Value;
    }
    this.getSysInfoByAttr = function (_nameInfoObject, _key_name) {
        var _tmpPostObject = sysinfo[_nameInfoObject] || new DPostObject();
        if (_tmpPostObject['attrs']) {
            if (Object.keys(_tmpPostObject['attrs']).indexOf(_key_name) > -1) {
                return _tmpPostObject['attrs'][_key_name];
            } else {
                return null;
            }
        }
    }
    this.getSysInfoByName = function (_nameInfoObject) {
        var _tmpPostObject = sysinfo[_nameInfoObject] || new DPostObject();
        var resultArray = new Array();
        for (var propertyName in _tmpPostObject.propertyes) {
            if (_tmpPostObject.propertyes.hasOwnProperty(propertyName)) {
                resultArray[propertyName] = _tmpPostObject.propertyes[propertyName];
            }
        }

        var param;
        var value = null;
        var ignorenull = false;
        ;
        for (var index = new Number(0); index < _tmpPostObject.params.length; index++) {
            param = _tmpPostObject.params[index];
            if (typeof (param.get) == 'undefined') continue;
            ignorenull = param.ignorenull;
            switch (param.srctype.toLowerCase()) {
                case 'var': {
                    value = this.getVar(param.src);
                    break;
                }
                case 'ctrl': {
                    value = this.getValue(param.src);
                    var _dom = this.getControlByName(param.src, true);
                    if (getProperty(_dom, 'filteritem', '') == 'true')
                        value = FilterItem_GetValue(_dom, value);
                    break;
                }
                case 'ctrlcaption': {
                    value = this.getCaption(param.src);
                    break;
                }
                case 'ctrlhint': {
                    value = this.getHint(param.src);
                    break;
                }
                default: {
                    value = param.src;
                }
            }

            if ((value != null && value.toString() != '') || ignorenull || param.get.substr(0, 1) == '*') {
                if (value == null) value = '';
                resultArray[param.get] = value;
            }
        }
        for (var _childName in _tmpPostObject.childs) {
            if (_tmpPostObject.childs.hasOwnProperty(_childName)) {
                resultArray[_childName] = getPostXml.call(this, _tmpPostObject.childs[_childName]);
            }
        }
        return resultArray;
    }
    this.takePropertyControl = function (_dom, _container) {
        if (hasProperty(_dom, 'name')) {
            associateControls[quickGetProperty(_dom, 'name')] = _dom;
        }
        if (_container != null){
            _container.addControl(_dom);
        }
        if (hasProperty(_dom, 'onshow')){
            eventsControl.onshow.push(execDomEventFunc(_dom, quickGetProperty(_dom, 'onshow')));
        }
        if (hasProperty(_dom, 'oncreate')){
            eventsControl.oncreate.push(execDomEventFunc(_dom, quickGetProperty(_dom, 'oncreate')));
        }
        if (hasProperty(_dom, 'onclose')){
            eventsControl.onclose.push(execDomEventFunc(_dom, quickGetProperty(_dom, 'onclose')));
        }
        if (hasProperty(_dom, 'onreload')){
            eventsControl.onreload.push(execDomEventFunc(_dom, quickGetProperty(_dom, 'onreload')));
        }
        for (var i = 0; i < execDomEvents.length; i++){
            if (hasProperty(_dom, execDomEvents[i])){
                _dom[execDomEvents[i]] = execDomEventFunc(_dom, quickGetProperty(_dom, execDomEvents[i]));
            }
        }
    }
    this.parse = function (_dom, _container, _dataset) {
        var count = 0;
        if (hasProperty(_dom, 'cmptype')) {
            _dom.jsParent = this;
            var _cmptype = quickGetProperty(_dom, 'cmptype');
            switch (_cmptype.toLowerCase()) {
                case 'sysinfo': {
                    this.parseSystemInfo(_dom);
                    count++;
                    break;
                }
                case 'script': {
                    this.parseScript(_dom);
                    count++;
                    break;
                }
                case 'title': {
                    this.container.setCaption(_dom.innerHTML);
                    removeDomObject(_dom);
                    count++;
                    break;
                }
                case 'frminfo':
                case 'frmetalon': {
                    return 0;
                }
                default: {
                    this.takePropertyControl(_dom, _container);
                }
            }
        }
        _dom.D3Form = this;
        _dom.DForm = this;
        _dom.D3Base = new D3Api.D3Base(_dom);
        _dom.D3Store = {_setEvents_: {}};
        var _tmpNodes = _dom.childNodes;
        var _tmpNode;
        var _tmpContainer = _container;
        var _tmpNameDataSet = '';
        var _tmpDataSet = _dataset;
        //        var _repeater;
        for (var index = 0; index < _tmpNodes.length; index++) {
            _tmpContainer = _container;
            if (typeof ((_tmpNode = _tmpNodes[index]).nodeName) == '#text') continue;
            if (hasProperty(_tmpNode, 'dataset')) {
                if (typeof (DataSets[_tmpNameDataSet = quickGetProperty(_tmpNode, 'dataset')]) != 'object') {
                    DataSets[_tmpNameDataSet] = new DDataSetContainer(_tmpNameDataSet, _tmpNode, this);
                }
                _tmpDataSet = _tmpContainer = DataSets[_tmpNameDataSet];
                if (hasProperty(_tmpNode, 'repeate')) {
                    var _stopclone = false;
                    var _withoutParent = hasProperty(_tmpNode, 'withoutParent');
                    if (hasProperty(_tmpNode, 'stopclone')) {
                        _stopclone = (quickGetProperty(_tmpNode, 'stopclone') == 'true');
                    }
                    _tmpContainer = _tmpContainer.addRepeaterByDom(_tmpNode, this, _stopclone);
                    if (_container && _container.isRepeater && !_withoutParent) {
                        _container.addRepeater(_tmpContainer, hasProperty(_tmpNode, 'detail'), false, _stopclone);
                        _tmpContainer.parentRepeater = _container;
                        //_tmpNode.removeAttribute("detail",false);
                    }
                }
            }
            if (hasProperty(_tmpNode, 'afterrefresh')) {
                _tmpDataSet.addEvent('afterrefresh', _tmpNode);
            }
            if (hasProperty(_tmpNode, 'insteadrefresh')) {
                _tmpDataSet.addEvent('insteadrefresh', _tmpNode);
            }
            if (hasProperty(_tmpNode, 'onrefresh')) {
                _tmpDataSet.addEvent('onrefresh', _tmpNode);
            }
            if (hasProperty(_tmpNode, 'before_refresh')) {
                _tmpDataSet.addEvent('before_refresh', _tmpNode);
            }

            index -= this.parse(_tmpNode, _tmpContainer, _tmpDataSet);
        }
        return count;
    }

    this.parseScript = function (_dom) {
        // сохраняем максимально все параметры скрипта, чтоб можно было вывести в сообщении для отладки
        // здесь вызываются скрипты с рисованных форм обернутые в <component type="Script">
        var parentDom = _dom && _dom.closest('[formname]');
        var tabsheet = _dom && _dom.closest('[cmptype="TabSheet"]');
        var template_field = _dom && _dom.getAttribute && _dom.getAttribute('template_field');
        var templates_code = _dom && _dom.closest('[templates_code]');
        templates_code = templates_code && templates_code.getAttribute('templates_code');
        var visit_tab = _dom && _dom.closest('[vistab]');
        visit_tab = visit_tab && visit_tab.getAttribute('vistab');
        var formname = parentDom && parentDom.getAttribute('formname');
        runScripts.push({
            script: _dom.value,
            formname: formname,
            templates_code: templates_code,
            template_field: template_field,
            visit_tab: visit_tab,
            tabsheet: tabsheet
        });
        removeDomObject(_dom);
    }
    var includeScriptAccept = function (_fileName) {

        scriptfiles[_fileName] = true;
        countLoadScript--;
        if (countLoadScript <= 0) {
            //из-за асинхронности, при запросе с формы на oncreate, сюда вклинивался датасет и вызывал onshow
            //сейчас в любом случае в этот момент onshow не вызовется
            this.requestsCount++;
            // если какойто скрипт отвалился - полностью прекращаем выполнение
            if (!this.processRunScripts()) {
                return;
            }
            this.startActionsGroup();
            callEvents.call(this, 'oncreate');
            this.page.dispatchEvent('oncreate', this);
            this.formCreate();
            this.endActionsGroup();
            this.prepareLoadDataSets();
            this.requestsCount--;
            this.loadDataSets();
        }
    }
    var includeScriptCancel = function (_fileName) {
        showError('Не  удалось подгрузить файл ' + _fileName + endl + 'Возможно некоторые компоненты будут работать некорректно');
        if (confirm('Продолжить загрузку без остановки скрипта?')) {
            includeScriptAccept.call(this, _fileName);
            return;
        }
    }
    var countLoadScript = new Number(0);
    this.processIncludes = function () {
        var _fileName = '';
        for (_fileName in scriptfiles) {
            if (scriptfiles.hasOwnProperty(_fileName)) {
                if (SYS_include_js(_fileName, includeScriptAccept, includeScriptCancel, this)) countLoadScript++;
            }
        }
        if (countLoadScript <= 0) {
            this.requestsCount++;
            // если какойто скрипт отвалился - полностью прекращаем выполнение
            if (!this.processRunScripts()) {
                return;
            }
            this.startActionsGroup();
            callEvents.call(this, 'oncreate');
            this.page.dispatchEvent('oncreate',this);
            this.formCreate();
            this.endActionsGroup();
            this.prepareLoadDataSets();
            this.requestsCount--;
            this.loadDataSets();
        }
        for (_fileName in cssfiles) {
            if (cssfiles.hasOwnProperty(_fileName)) {
                SYS_include_css(_fileName);
            }
        }
    }
    var requestFormAccept = function (_html,_prom,_peq) {
        var formCache = _peq.getResponseHeader('FormCache');
        this.formCache = formCache;
        if (this.formData._openWindowData) {
            this.page.window_size = null;
            var owd = this.formData._openWindowData;
            delete this.formData._openWindowData;
            this.isComposition = owd.isComposition;
            if (owd.modal && !isObject(owd.modal)) {
                try {
                    var win = new DWindow(owd.otladka);
                    win.IsComposition = owd.isComposition;

                    if (owd.width && owd.height)
                        this.page.window_size = {width: owd.width, height: owd.height};
                    var pageW = this.page;
                    win.addListener('onreload', function () {
                        reloadWindow(0, pageW);
                    }, null, false);
                    win.addListener('onclose', function () {
                        closeWindow(0, pageW);
                    }, null, false);
                    this.page.setContainer(win);
                    this.page.modal = true;
                } catch (e) {
                    alert('not including window.js');
                    return;
                }
            } else if (owd.modal && isObject(owd.modal)) {
                this.page.setContainer(new DDocument(owd.modal));
            } else if (!owd.modal) {
                this.page.setContainer(new DDocument());
                if(window.SYS_current_theme == 'bars'){
                    var _page = getPage();
                    while (SYS_pages_window.length != 0) {
                        removePage(0);
                    }
                    SYS_lastPage = _page;
                    SYS_pages_window.push(_page);
                    var index = 0;
                    while (index < SYS_pages.length) {
                        if (SYS_pages[index] != _page) {
                            SYS_pages.splice(index, 1);
                        } else {
                            index++;
                        }
                    }
                }
            }
            if (!owd.notAddPage)
                addPage(this.page);
        }

        if (!isObject(this.container)) {
            showError('Неверный контейнер для формы ' + this.name + endl + ' [object].container=' + this.container);
        }
        this.container.show();

        addStackPage(this.page);

        if (SYS_current_theme === 'bars') {
            this.container.getContainer().innerHTML = _html ? _html : '<div></div>';
            var l_MainDOM = this.container.getContainer().childNodes[0];
        } else {
            this.container.getContainer().insertAdjacentHTML('afterbegin', _html ? _html : '<div></div>');
            var container = this.container.getContainer();
            var l_MainDOM = container.childNodes[0];
        }

        // задаем размер окна указанный в атрибуде window_size основого тега
        var window_size = undefined;
        if (l_MainDOM.attributes['window_size'] != undefined)
            window_size = l_MainDOM.attributes['window_size'];
        this.page.force_windowsize = false;
        if (this.page.modal && l_MainDOM.attributes['mwindow_size'] != undefined) {
            this.page.force_windowsize = true;
            window_size = l_MainDOM.attributes['mwindow_size'];
        }
        this.version = parseFloat(getProperty(l_MainDOM, 'version', '1'));
        if (this.version < 2.5 && getProperty(this.container.getContainer(), 'report', 'false') != 'true') {
            if (l_MainDOM.nodeName.toUpperCase() != 'DIV') {
                var d = document.createElement('div');
                this.container.getContainer().appendChild(d);
                d.appendChild(l_MainDOM);
                l_MainDOM = d;
            }
            addClass(l_MainDOM, 'formBackground');
        }
        // -----
        if (window_size != undefined && this.page.window_size == null) {
            var l_WndSizeArr = window_size.value.split('x');
            if (l_WndSizeArr[0] != 'undefined') {
                if (l_WndSizeArr.length < 2) l_WndSizeArr[1] = 500
                this.page.window_size = {width: l_WndSizeArr[0], height: l_WndSizeArr[1]}
            }
        }

        this.containerForm = l_MainDOM;
        if (!this.formData.nooverflow && !this.formData.rep_paramnooverflow) {
            this.containerForm.style.overflow = 'auto';
        }
        l_MainDOM.form = this;
        this.uniqID = 'Form_' + D3Api.getUniqId('uid');
        GLOBAL_CURRENT_FORM = this.uniqID;
        l_MainDOM.id = this.uniqID;

        if (SYS_current_theme === 'bars') {
            this.parse(this.container.getContainer())
        } else {
            /* Временный фикс композиций */
            var compositionsScripts = container.querySelectorAll(
                ':scope > [cmptype="Script"]'
            )
            if (compositionsScripts.length > 0) {
                compositionsScripts.forEach(function (e) {
                    l_MainDOM.appendChild(e)
                })
            }
            var compositionsSysInfo = container.querySelectorAll(
                ':scope > [cmptype="sysinfo"]'
            )
            if (compositionsSysInfo.length > 0) {
                compositionsSysInfo.forEach(function (e) {
                    l_MainDOM.appendChild(e)
                })
            }

            this.parse(l_MainDOM)
        }

        //this.setSizePos();
        this.showHelp();
        removeStackPage();
        if (this.page.modal) {
            this.setSizePos();
        } else {
            this.container.setVisible(true);
        }
        this.processIncludes();

        function stopEventDragStart(e) {
            e = e || window.event;
            if (e.target.tagName === 'IMG') {
                if (e.preventDefault) {
                    e.preventDefault();
                } else {
                    e.returnValue = false
                }
                return false;
            } else if (e.target.tagName === 'A') {
                e.dataTransfer.setData("Text", e.target.textContent);
            }
            return true;
        }

        this.containerForm.addEventListener('dragstart', stopEventDragStart);
    }
    this.setSizePos = function (onlySize) {
        var size = getDocumentSize();
        if (this.page.modal) {
            if (this.page.window_size && this.page.window_size.width != undefined && this.page.window_size.height != undefined) {
                var _hneed = false;
                var _wneed = false;
                if (this.page.window_size.width != 'auto' && (!this.page.window_size.width.indexOf || this.page.window_size.width.indexOf('%') == -1))
                    var l_Width = Math.min(this.page.window_size.width, size.width);
                else {
                    var l_Width = this.page.window_size.width;
                    _wneed = true;
                }
                if (this.page.window_size.height != 'auto' && (!this.page.window_size.height.indexOf || this.page.window_size.height.indexOf('%') == -1))
                    var l_Height = Math.min(this.page.window_size.height, size.height);
                else {
                    var l_Height = this.page.window_size.height;
                    _hneed = true;
                }

                this.page.getContainer().setSize(l_Width, l_Height);

                if (_wneed || _hneed) {
                    this.page.getContainer().clearMaxSizeStyle();
                    var rws = getAbsoluteSize(this.page.getContainer().GetMainDOM());
                    l_Width = (_wneed) ? rws.width : l_Width;
                    l_Height = (_hneed) ? rws.height : l_Height;
                    this.page.window_size = false;
                }
                if (!onlySize)
                    this.page.getContainer().setPosition(size.width / 2 - l_Width / 2, size.height / 2 - l_Height / 2);
            }
            if (this.containerForm) {
                this.containerForm.style.overflow = '';
                setDomSizeNoPx(this.containerForm, '', '100%');
                if (this.page.window_size)
                    this.page.getContainer().clearMaxSizeStyle();
                var ws = getAbsoluteSize(this.page.getContainer().GetMainDOM());
                var s = getAbsoluteRect(this.containerForm);

                var dh = this.containerForm.scrollHeight - s.height;
                var dw = this.containerForm.scrollWidth - s.width;
                if (dw > 0) dw += 7;

                var l_Width = Math.min(ws.width + dw, size.width);
                var l_Height = Math.min(ws.height + dh, size.height);
                this.page.getContainer().clearMaxSizeStyle();
                this.page.getContainer().setSize(l_Width, l_Height);
                if (!onlySize)
                    this.page.getContainer().setPosition(size.width / 2 - l_Width / 2, size.height / 2 - l_Height / 2);
                this.containerForm.style.overflow = 'auto';
            } else {
                this.page.getContainer().setSize(400, 300);
                if (!onlySize)
                    this.page.getContainer().setPosition(size.width / 2 - 400 / 2, size.height / 2 - 300 / 2);
            }
            this.page.getContainer().setVisible(true);
            return;
        } else {
            setDomSizeNoPx(this.container.GetMainDOM(), '', '');
            var form_height = this.containerForm.style.height;
            if (this.page.window_size && this.containerForm) {
                var hpx = this.page.window_size.height;

                if (hpx != 'auto' && (!hpx.indexOf || hpx.indexOf('%') == -1)) {
                    hpx = hpx + 'px';
                    setDomSizeNoPx(this.containerForm, '', hpx);
                } else {
                    if (hpx == '100%')
                        setDomSizeNoPx(this.container.GetMainDOM(), '', '100%');
                    else
                        setDomSizeNoPx(this.container.GetMainDOM(), '', '');
                    setDomSizeNoPx(this.containerForm, '', hpx);
                }
            } else if (form_height == '100%') {
                setDomSizeNoPx(this.container.GetMainDOM(), '', '100%');
            } else if (form_height && (form_height.indexOf || form_height.indexOf('%') > 0)) {
                setDomSizeNoPx(this.containerForm, '', form_height);
            }
            this.container.setVisible(true);
        }
        runCalcSize(this.container.GetMainDOM(), this.container.GetMainDOM());
    }
    this.setSizeTrunc = function (onlySize) {
        if (this.page.modal) {
            this.page.getContainer().setSize(0, 0);
            this.setSizePos(onlySize);
        }
    }
    var requestFormCancel = function (_xml, _status) {
        this.setSizePos();
        if (_xml){
            showXmlError(_xml);
        }
    }
    this.formData = {};
    this.getUrlFormDataRecurs = function (_Data, _PropName) {
        if (_Data instanceof Function)
            return '';
        if (_PropName == undefined) _PropName = null;

        var urlFormData = '';

        for (var _propertyName in _Data) {
            if (!_Data.hasOwnProperty(_propertyName)) {
                continue
            }
            if (_propertyName == '_openWindowData') {
                if (!empty(_Data[_propertyName]['modal']) && _Data[_propertyName]['modal'] == true) {
                    urlFormData += '&modal=1';
                }
                continue;
            }
            if (isObject(_Data[_propertyName])) {
                var l_PropName = _PropName != null ? _PropName + '[' + _propertyName + ']' : _propertyName;
                urlFormData += this.getUrlFormDataRecurs(_Data[_propertyName], l_PropName);
            } else {
                if (_PropName != null) {
                    urlFormData += '&' + _PropName + '[' + _propertyName + ']=' + encodeURIComponent(_Data[_propertyName]);
                } else {
                    urlFormData += '&' + _propertyName + '=' + encodeURIComponent(_Data[_propertyName]);
                }
            }
        }
        return urlFormData;
    }
    this.getUrlFormData = function () {
        if (!empty(this.page) && empty(this.formData['_openWindowData']) && !empty(this.page.modal) && this.page.modal == true) {
            this.formData['modal'] = '1';
        }
        return this.getUrlFormDataRecurs(this.formData);
    }
    this.requestForm = function () {
        if (this.name[0] == '#' || this.id) {
            this.id = this.id || this.name.substr(1);
            this.name = this.id;
            var el = document.getElementById(this.id);
            if (el) {
                requestFormAccept.call(this, el.innerHTML);
            }
        } else{
            requestServerForm(this.name + this.getUrlFormData(), requestFormAccept, requestFormCancel, this);
        }

    }
    this.callScriptFunction = function (fName, args) {
        if (namespace[fName]) {
            namespace[fName].apply(namespace, args);
        }
    }

    /* начало перегрузки методов внутри формы */
    var page = this.page;



    function openWindow(formData,modal,_width,_height,otladka,notAddPage) {
        var _page = getPage();
        var options = {};
        if (!isObject(formData)) {
            options['name'] = formData;
        }else{
            options = formData;
        }
        if(!D3Api.empty(_width)){
            options['width'] = _width;
        }
        if(!D3Api.empty(_height)){
            options['height'] = _height;
        }
        if(!D3Api.empty(otladka)){
            options['otladka'] = otladka;
        }
        if(!D3Api.empty(notAddPage)){
            options['notAddPage'] = notAddPage;
        }
        options['parentPage'] = _page;
        return window.openWindow(options, modal);
    }
    function getPage(skip) {
        //TODO: костыль контексты работать будут только в отчетах.
        var mainCont = document.getElementById('_mainContainer');
        var isReport = false;
        if(mainCont){
            isReport = D3Api.getProperty(document.getElementById('_mainContainer'),'report','false') == 'true';
        }
        if(isReport === false){
            return window.getPage(skip);
        }
        var isSkip = false;
        if (skip == null) {
            skip = 0;
        }else{
            if(skip > 0){
                isSkip = true;
            }
        }
        var _page = page;
        while (skip > 0) {
            _page = _page.prevPage;
            skip--;
        }

        if(isSkip && D3Api.debugUrlParam > 0){

            if('form' in _page){
                _page.form.setConsoleMsg('%cУстаревшее: Параметр skip является устаревшим.',"color: yellow; font-style: italic; background-color: green; padding: 2px;")
            }
        }
        return _page;
    }
    this.getPage = function(skip){
        return getPage(skip);
    }
    function removePage(skip,page) {
        var _page = (page) ? page : getPage(skip);
        if (SYS_pages_window.indexOf(_page) < 0) {
            return false;
        }

        if (SYS_pages_store) {
            SYS_pages_store.dispatch({ type: 'REMOVE', value: _page })
        }

        _page.remove();
        SYS_pages_window.splice(SYS_pages_window.indexOf(_page), 1);
        SYS_lastPage = SYS_pages_window[SYS_pages_window.length - 1];
        return _page;
    }

    function addSystemInfo(_nameObject,_data,skip) {
        getPage(skip).addSystemInfo(_nameObject, _data);
    }
    function setPropertySysInfoByName(_nameObject,_propertyName,_Value,skip) {
        getPage(skip).setPropertySysInfoByName(_nameObject, _propertyName, _Value);
    }

    function setWindowCaption(_caption,skip){
        getPage(skip).setPageCaption(_caption);
    }
    function setConfirmOnCloseFunction(_type,skip){
        if(_type == 1){
            getPage(skip).setPageConfirmOnClose();
        }
    }
    function getWindowCaption(skip){
        return getPage(skip).getPageCaption();
    }
    function closeWindow(skip,page,res){
        var p = (page)?page:getPage(skip);
        if('form' in p && !p.destroyed){
            p.form.beforeClose();
            p.beforeClose(res);
            p.getContainer().close();
            p.close(res);
            removePage(skip,p);
            p.afterClose(res);
            if(p.prevPage instanceof DPage && ('form' in p.prevPage)){
                p.prevPage.removeChildPage(p);
            }
            p.destroyAll(skip,p);
            clearSelection();
            p = null;
            delete p;
        }
    }
    function executeModule(_moduleName,
                           _callBackAcceptMethod,
                           _callBackCancelMethod,
                           _callBackObject,
                           async,
                           skip,
                           silent) {
        return getPage(skip).executeModule(_moduleName,
            _callBackAcceptMethod,
            _callBackCancelMethod,
            _callBackObject,
            async,
            silent);
    }
    function executeAction(_actionName,
                           _callBackAcceptMethod,
                           _callBackCancelMethod,
                           _callBackObject,
                           async,
                           skip,
                           silent) {
        return getPage(skip).executeServerAction(_actionName,
            _callBackAcceptMethod,
            _callBackCancelMethod,
            _callBackObject,
            async,
            silent);
    }
    function setValue(_controlName,_value,skip){
        getPage(skip).setValue(_controlName,_value);
    }
    function getValue(_controlName,skip){
        return getPage(skip).getValue(_controlName);
    }
    function setVar(_name,_value,skip){
        getPage(skip).setVar(_name,_value);
    }
    function getVar(_name,skip){
        return getPage(skip).getVar(_name);
    }
    function setCaption(_controlName,_caption,skip){
        getPage(skip).setCaption(_controlName,_caption);
    }
    function getCaption(_controlName,skip){
        return getPage(skip).getCaption(_controlName);
    }
    function setHint(_controlName,_hint,skip){
        getPage(skip).setHint(_controlName,_hint);
    }
    function getHint(_controlName,skip){
        return getPage(skip).getHint(_controlName);
    }
    function setEnabled(_controlName,_value,skip){
        getPage(skip).setEnabled(_controlName,_value);
    }
    function getEnabled(_controlName,skip){
        return getPage(skip).getEnabled(_controlName);
    }
    function refreshDataSet(_dataSetName,instead,skip){
        if(instead==null){
            instead=true;
        }
        return getPage(skip).refreshDataSet(_dataSetName,instead);
    }
    function getDataSet(_dataSetName,_show_error,skip){
        return getPage(skip).getDataSet(_dataSetName,_show_error);
    }
    function base(skip){
        var page = getPage(skip);
        if (D3Api.debugUrlParam > 0) {
            if('form' in page){
                page.form.setConsoleMsg('%cУстаревшее: base().ИмяФункции() является устаревшим. Используйте Form.ИмяФункции()','color: yellow; font-style: italic; background-color: blue; padding: 2px;')
            }
        }
        return page.getNamespace();
    }

    function reloadWindow(skip){
        getPage(skip).reload();
    };
    function requestDataSetCount(_dataSetName,
                                 _callBackFunction,
                                 _callBackObject,
                                 skip){
        getPage(skip).requestDataSetCount(_dataSetName,
            _callBackFunction,
            _callBackObject);
    }
    function getControlByName(_controlName,skip,_show_error){
        return getPage(skip).getControlByName(_controlName,_show_error);
    }

    function isExistsControlByName(_controlName,skip){
        return getPage(skip).isExistsControlByName(_controlName,false);
    }

    function setControlProperty(_controlName,_propertyName,_propertyValue,skip){
        getPage(skip).setControlProperty(_controlName,_propertyName,_propertyValue);
    }
    function getControlProperty(_controlName,_propertyName,skip){
        return getPage(skip).getControlProperty(_controlName,_propertyName);
    }

    function requestDataSetData(_dataSetName,
                                _data,
                                _acceptCallBackFunction,
                                _cancelCallBackFunction,
                                _callBackObject,
                                async,
                                skip) {
        return getPage(skip).requestDataSetData(_dataSetName, _data, _acceptCallBackFunction, _cancelCallBackFunction, _callBackObject, async);
    }
    function getCloneObjectsByRepeaterName(_nameRepeater,_nameControl,skip) {
        return getPage(skip).getCloneObjectsByRepeaterName(_nameRepeater, _nameControl);
    }

    function getRepeaterByGroupName(_groupName,skip) {
        return getPage(skip).getRepeaterByGroupName(_groupName);
    }
    function addRepeaterClone(_groupName,_dataArray,_domObject,_labelName,skip) {
        return getPage(skip).addRepeaterClone(_groupName, _dataArray, _domObject, _labelName);
    }
    function removeRepeaterClone(_groupName,_domObject,_index,skip) {
        getPage(skip).removeRepeaterClone(_groupName, _domObject, _index);
    }
    function startMultiDataSetsGroup(skip) {
        getPage(skip).startMultiDataSetsGroup();
    }
    function endMultiDataSetsGroup(skip,_callBackAcceptMethod,_callBackCancelMethod) {
        getPage(skip).endMultiDataSetsGroup(_callBackAcceptMethod, _callBackCancelMethod);
    }
    function startActionsGroup(skip,async) {
        getPage(skip).startActionsGroup(async);
    }
    function endActionsGroup(skip,_callBackAcceptMethod,_callBackCancelMethod) {
        getPage(skip).endActionsGroup(_callBackAcceptMethod, _callBackCancelMethod);
    }
    /* конец перегрузки методов внутри формы */

    this.processRunScripts = function () {
        // результат удачности выполнения скриптов. если какойто скрипт отвалился - полностью прекращаем выполнение
        var result = true;
        var getSysFuncFromUserFunc = function (_function) {
            // здесь обрабатываются функции вызванные из функций (например base().afterCheck внутри base().OkButton())
            return function callSysFunctionFromUser() {
                addStackPage(ObjectForm.page);
                try {
                    //TODO: аналог
                    //var Form = this;
                    //var args = arguments;
                    //eval('result = (' + _function + ').apply(Form, args);');

                    var result = _function.apply(this, arguments);
                } catch (e) {
                    showScriptError(e, {formname: ObjectForm.name, script: _function});
                }
                removeStackPage();
                return result;
            };
        }
        var Form = namespace;

        run = run.bind(this);
        run(0, 1);

        function run(index, repCount) {
            try {
                for (; index < runScripts.length; index++) {
                    if (!result) {
                        break;
                    }
                    eval('try {' + runScripts[index].script + '} catch(e) {showScriptError(e, runScripts[index])}');
                }
                for (var _propertyName in Form) {
                    if (!Form.hasOwnProperty(_propertyName)) {
                        continue;
                    }
                    if (typeof (Form[_propertyName]) == 'function') {
                        Form[_propertyName] = getSysFuncFromUserFunc(Form[_propertyName]);
                    }
                }
            } catch (e) {
                if (e.name === 'NS_ERROR_NOT_AVAILABLE' && repCount < 10) {
                    setTimeout(run, 500, index, repCount + 1);
                } else {
                    result = false;
                    showScriptError(e, runScripts[index]);
                    return;
                }
            }
        }
        return result;
    }
    var requestServerDataSetAccept = function (_xml, promiseObj) {
        if (!this.page) {
            //форму успели закрыть
            return;
        }
        this.requestsCount--;
        if(!_xml){
            D3Api.debug_msg('данные не пришли.');
            return;
        }
        var _nodes = _xml.childNodes;
        if (!isNodeList(_nodes)) {
            showError(_nodes);

            return;
        }
        addStackPage(this.page);
        var _node;
        var jndex;
        var _dataset;
        var _dataArray = [];
        for (var index = 0; index < _nodes.length; index++) {
            _node = _nodes[index];
            switch (_node.nodeName.toLowerCase()) {
                case 'dataset': {
                    for (jndex = 0; jndex < _node.attributes.length; jndex++) {
                        if (_node.attributes[jndex].name == 'name') {
                            loadingDataSets[_node.attributes[jndex].value] = false;
                            _dataArray = DataSetXmlDataToArray(_node, 0, Boolean(this.getPropertySysInfoByName(_node.attributes[jndex].value, 'showerror', 'true') != 'false'));
                            (_dataset = DataSets[_node.attributes[jndex].value]).setData(_node, Boolean(this.getPropertySysInfoByName(_node.attributes[jndex].value, 'showerror', 'true') != 'false'));
                            _dataset.callEvents('afterrefresh');
                            if (this.loadDataSets) {
                                stackDataSets.splice(0, 1);
                                this.loadDataSets();
                            }
                            break;
                        }
                    }
                    break;
                }
                case 'parsererror':
                case 'error': {
                    showXmlError(_node);
                    break;
                }
            }
        }
        if (promiseObj && 'resolve' in promiseObj) {
            promiseObj.resolve(_dataArray);
        }
        removeStackPage();
    }
    var requestServerDataSetCancel = function (_xml, _status) {
        if (!this.page) {
            /**
             * форму успели закрыть
             **/
            return;
        }
        this.requestsCount--;
        addStackPage(this.page);
        showXmlError(_xml);
        stackDataSets.splice(0, 1);
        this.loadDataSets();
        removeStackPage();
    }
    var stackDataSets = new Array();
    var isShowing = false;
    var isCreated = false;
    var isShowed = false;
    var isSized = false;
    this.requestsCount = 0;
    this.loadDataSets = function () {
        if (this.requestsCount == 0) {
            if (!isShowing) {
                isShowing = true;
                this.startActionsGroup();
                callEvents.call(this, 'onshow');
                this.page.dispatchEvent('onshow');
                isShowed = true;
                this.endActionsGroup();
                decSYS_countShowState();
                if (this.requestsCount == 0) {
                    isSized = true;
                    this.setSizePos();
                }
            } else if (!isSized) {
                isSized = true;
                this.setSizePos();
            }
            return;
        }
    }
    this.getDataSet = function (_dataSetName, _show_error) {
        var dataSet = DataSets[_dataSetName];
        if (!isObject(dataSet) && (_show_error || _show_error == null)) {
            showError('DataSet с именем ' + _dataSetName + ' не найден на форме ' + this.name + ' или он не имеет связи с компонентами формы');
            return;
        }
        return dataSet
    }
    var loadingDataSets = new Array();
    this.refreshDataSet = function (_dataSetName, instead) {
        var dataSet = DataSets[_dataSetName];
        if (!isObject(dataSet)) {
            showError('DataSet с именем ' + _dataSetName + ' не найден на форме ' + this.name + ' или он не имеет связи с компонентами формы');
            return;
        }
        if (dataSet.getEventsCount('insteadrefresh') == 0) {
            instead = false;
        }
        if (instead) {
            dataSet.callEvents('insteadrefresh');
            return;
        }
        if (dataSet.getEventsCount('before_refresh') > 0) {
            if (dataSet.callEvents('before_refresh') === false)
                return;
        }
        loadingDataSets[_dataSetName] = true;
        var _data = this.getSysInfoByName(_dataSetName);
        _data.DataSet = _dataSetName;
        if (startMultiRequest) {
            this.addMultiData({DATA: _data, TYPE: 'datasetrange'});
            return;
        }
        var page = this;
        this.requestsCount++;
        var name = /*this.getSysInfoByAttr(_dataSetName,'formname')||*/this.name;
        return requestServerDataSet(name + this.getUrlFormData() + '&baseForm=' + this.name, _data, requestServerDataSetAccept, requestServerDataSetCancel, this);
    }
    var requestServerMultiDataSetsAccept = function (_xml) {
        if(!_xml){
            D3Api.debug_msg('данные не пришли.');
            return;
        }
        var _nodes = _xml.childNodes;
        if (!isObject(_nodes)) {
            showError(_nodes);
            return;
        }
        var index = 0;
        var _node;
        while ((_node = _nodes[index]).nodeName != 'multidata' && index < _nodes.length) index++;
        var _sysid = 0;
        for (index = 0; index < _node.attributes.length; index++) {
            if (_node.attributes[index].name == 'sysid') {
                _sysid = parseInt(_node.attributes[index].value) - 1;
                break;
            }
        }
        _nodes = _node.childNodes;
        if (!isObject(_nodes)) {
            showError('В ответе от сервера не найдено ни одного источника данных');
            return;
        }
        var _data;
        var jndex;
        var sourceCode;
        addStackPage(this.page);
        var _name;
        var _id;
        var countAttributes = 0;
        for (index = 0; index < _nodes.length; index++) {
            _node = _nodes[index];
            if (!_node.attributes) continue;
            countAttributes = 0;
            _id = 0;
            for (jndex = 0; jndex < _node.attributes.length; jndex++) {
                if (_node.attributes[jndex].name == 'name') {
                    _name = _node.attributes[jndex].value;
                    countAttributes++;
                }
                if (_node.attributes[jndex].name == 'sysid') {
                    _id = parseInt(_node.attributes[jndex].value);
                    countAttributes++;
                }
                if (countAttributes >= 2) break;
            }
            if (countAttributes < 1) continue;//not found all attributes
            _data = this.getMultiData(_sysid, _id);
            if (!isObject(_data)) continue;

            sourceCode = _node.nodeName.toLowerCase();
            //alert(sourceCode+'='+_data.TYPE);
            var _dataset;
            switch (_data.TYPE.toLowerCase()) {
                case 'datasetrange': {
                    if (sourceCode == 'dataset') {
                        loadingDataSets[_name] = false;
                        (_dataset = DataSets[_name]).setData(_node, Boolean(this.getPropertySysInfoByName(_name, 'showerror', 'true') != 'false'));
                        _dataset.callEvents('afterrefresh');
                        break;
                    }
                    break;
                }
                case 'datasetcount': {
                    if (sourceCode == 'dataset') {
                        if (_data._callBackFunction instanceof Function) _data._callBackFunction.call(_data._callBackObject, DataSetXmlDataToCount(_node, Boolean(this.getPropertySysInfoByName(_name, 'showerror', 'true') != 'false')));
                    }
                    break;
                }
                default: {
                    showError('Неизвестный тип ' + _data.TYPE + '.');
                }
            }
            if (_dataset.data.sys_error)
                break;
        }
        removeStackPage();
    }
    var requestServerMultiDataSetsCancel = function (_xml, _status) {
        this.requestsCount--;
        addStackPage(this.page);
        showXmlError(_xml);
        //multiDatas=new Array();
        this.loadDataSets();
        removeStackPage();
    }
    var startMultiRequest = false;
    this.startMultiDataSetsGroup = function () {
        startMultiRequest = true;
        multiDatas[multiDatas.length] = new Array();
    }
    this.endMultiDataSetsGroup = function (_callBackAcceptMethod) {

        startMultiRequest = false;
        this.refreshMultiDataSets(_callBackAcceptMethod);
    }
    var multiDatas = new Array();
    this.addMultiData = function (_data) {
        var multiData = multiDatas[multiDatas.length - 1];
        _data.DATA._sysid = multiData.length;
        multiData.push(_data);
    }
    this.getMultiData = function (_indexMultiData, _indexData) {
        return multiDatas[_indexMultiData][_indexData];
    }
    this.removeMultiData = function (_indexMultiData) {
        multiDatas.splice(_indexMultiData, 1);
    }
    this.refreshMultiDataSets = function (_callBackAcceptMethod) {
        if (multiDatas.length == 0) {
            return;//если ни одного датасета не нужно то выходим
        }

        var _datas = new Array();
        var _lastdatas = new Array();
        var _data;
        var _id = multiDatas.length;
        var multiData = multiDatas[_id - 1];
        for (var index = 0; index < multiData.length; index++) {
            _data = multiData[index];
            //запрос данных для DS к-е заканчиваются на _dataset в первую очередь
            if (hasstr_dataset(_data.DATA.DataSet)) {
                _datas.push(_data.DATA);
            } else {
                _lastdatas.push(_data.DATA);
            }
        }
        for (var i = 0; i < _lastdatas.length; i++) {
            _datas.push(_lastdatas[i]);
        }
        if (_datas.length == 0) {
            return;
        }
        this.requestsCount++;
        var promise = requestServerMultiDataSetsThread(_id,
            this.name,
            this.formData,
            _datas,
            this);
        var that = this;
        promise.then(function (_result) {
            for (var i = 0, len = _result.length; i < len; i++) {
                requestServerMultiDataSetsAccept.call(that, _result[i]);
            }
            that.requestsCount--;
            that.loadDataSets();
            if (_callBackAcceptMethod instanceof Function) _callBackAcceptMethod.call();
        }, function (_obj) {
            requestServerMultiDataSetsCancel(_obj['xml'], _obj['status']);
        }).catch(function(e) {
            // todo formname
            showScriptError(e, {formname: that.name, script: (_callBackAcceptMethod || '').toString()});
        });
    }

    var requestDataSetCountAccept = function (_xml, _callBackFunction, _callBackObject) {
        this.requestsCount--;
        if(!_xml){
            D3Api.debug_msg('данные не пришли.');
            return;
        }
        var _nodes = _xml.childNodes;
        if (!isNodeList(_nodes)) {
            showError(_nodes);
            return;
        }
        addStackPage(this.page);
        var _node;
        var jndex;
        var count = 0;
        var _name;
        for (var index = 0; index < _nodes.length; index++) {
            _node = _nodes[index];
            switch (_node.nodeName.toLowerCase()) {
                case 'dataset': {
                    for (jndex = 0; jndex < _node.attributes.length; jndex++) {
                        if (_node.attributes[jndex].name == 'name') {
                            _name = _node.attributes[jndex].value;
                            count = DataSetXmlDataToCount(_node, Boolean(this.getPropertySysInfoByName(_node.attributes[jndex].value, 'showerror', 'true') != 'false'));
                            stackDataSets.splice(0, 1);
                            this.loadDataSets();
                            break;
                        }
                    }
                    break;
                }
                case 'parsererror':
                case 'error': {
                    showXmlError(_node);
                    break;
                }
            }
        }
        if (_callBackFunction instanceof Function) _callBackFunction.call(_callBackObject, count);
        removeStackPage();
    }
    var requestDataSetDataAccept = function (_xml, _acceptCallBackFunction, _cancelCallBackFunction, _callBackObject, promiseObj) {
        this.requestsCount--;
        if(!_xml){
            D3Api.debug_msg('данные не пришли.');
            return;
        }
        var _nodes = _xml.childNodes;
        if (!isNodeList(_nodes)) {
            showError(_nodes);
            return;
        }
        addStackPage(this.page);
        var _node;
        var jndex;
        var _dataArray = new Array();

        for (var index = 0; index < _nodes.length; index++) {
            _node = _nodes[index];
            switch (_node.nodeName.toLowerCase()) {
                case 'dataset': {
                    for (jndex = 0; jndex < _node.attributes.length; jndex++) {
                        if (_node.attributes[jndex].name == 'name') {
                            _dataArray = DataSetXmlDataToArray(_node, 0, Boolean(this.getPropertySysInfoByName(_node.attributes[jndex].value, 'showerror', 'true') != 'false'))
                            if (_dataArray.sys_error) {
                                if (_cancelCallBackFunction instanceof Function) _cancelCallBackFunction.call(_callBackObject, new Array());
                            } else {
                                if (_acceptCallBackFunction instanceof Function) _acceptCallBackFunction.call(_callBackObject, _dataArray);
                            }
                            break;
                        }
                    }
                    break;
                }
                case 'parsererror':
                case 'error': {
                    showXmlError(_node);
                    break;
                }
            }
        }
        if (promiseObj && 'resolve' in promiseObj) {
            promiseObj.resolve(_dataArray);
        }
        this.loadDataSets();
        removeStackPage();
    }
    this.requestDataSetData = function (_dataSetName, _data, _acceptCallBackFunction, _cancelCallBackFunction, _callBackObject, async) {
        if (!isObject(DataSets[_dataSetName])) {
            if (!isObject(sysinfo[_dataSetName])) {
                showError('DataSet с именем ' + _dataSetName + ' не найден на форме ' + this.name);
                return;
            }
        }
        var _sys_data = this.getSysInfoByName(_dataSetName);
        _data.DataSet = _dataSetName;
        for (var _propertyName in _data) {
            if (_data.hasOwnProperty(_propertyName)) {
                _sys_data[_propertyName] = _data[_propertyName];
            }
        }
        this.requestsCount++;
        return requestServerDataSet(this.name + this.getUrlFormData(), _sys_data, function (_xml, promise) {
                requestDataSetDataAccept.call(this, _xml, _acceptCallBackFunction, _cancelCallBackFunction, _callBackObject, promise);
            },
            function (_xml) {
                showXmlError(_xml);
                addStackPage(this.page);
                if (_cancelCallBackFunction instanceof Function)
                    _cancelCallBackFunction.call(_callBackObject, 0);
                removeStackPage();
            }, this, async);
    }
    this.requestDataSetCount = function (_dataSetName, _callBackFunction, _callBackObject) {
        if (!isObject(DataSets[_dataSetName])) {
            showError('DataSet с именем ' + _dataSetName + ' не найден на форме ' + this.name);
            return;
        }
        var _data = this.getSysInfoByName(_dataSetName);
        _data.mode = 'Count';
        _data.DataSet = _dataSetName;
        if (startMultiRequest) {
            this.addMultiData({
                DATA: _data,
                TYPE: 'datasetcount',
                _callBackFunction: _callBackFunction,
                _callBackObject: _callBackObject
            });
            return;
        }
        this.requestsCount++;
        requestServerDataSet(this.name + this.getUrlFormData(), _data, function (_xml) {
            requestDataSetCountAccept.call(this, _xml, _callBackFunction, _callBackObject);
        }, function (_xml) {
            showXmlError(_xml);
            addStackPage(this.page);
            if (_callBackFunction instanceof Function) _callBackFunction.call(_callBackObject, 0);
            removeStackPage();
            stackDataSets.splice(0, 1);
            this.loadDataSets();
        }, this);
    }
    this.prepareLoadDataSets = function () {
        var that = this;
        this.startMultiDataSetsGroup();
        for (var _tmpNameDataSet in DataSets) {
            if (DataSets.hasOwnProperty(_tmpNameDataSet)) {
                if ((DataSets[_tmpNameDataSet].getControlCount() != 0 || DataSets[_tmpNameDataSet].activateOnCreate) && Boolean(this.getPropertySysInfoByName(_tmpNameDataSet, 'activateoncreate', 'true') != 'false') && !DataSets[_tmpNameDataSet].cancelActivateOnCreate) {
                    this.refreshDataSet(_tmpNameDataSet, true);
                    //stackDataSets.push(_tmpNameDataSet);
                }
            }
        }
        this.endMultiDataSetsGroup(function () {
            that.callEvents('LoadDataSets', null);
        });
    }
    var isSubstitutionControls = false;
    var substitutionControls = [];
    this.setSubstitutionControls = function (_controls, _ss) {
        isSubstitutionControls = true;
        if (_ss) {
            substitutionControls.push(_controls);
        }
        currentControls = _controls;
    }
    this.stopSubstitutionControls = function (_ss) {
        isSubstitutionControls = false;
        if (_ss) {
            substitutionControls.pop();
            currentControls = substitutionControls.length ? substitutionControls[substitutionControls.length - 1] : associateControls;
        } else {
            substitutionControls = [];
            currentControls = associateControls;
        }
    }
    var ActionGroups = 0;
    var ActionsData = [];
    var ActionsUid = 0;
    var ActionsUidData = {};
    var AllActionGroups = [];
    var AllAcceptMethods = [];
    var AllBackMethods = [];

    var startDataSetsGroup = [];
    var AllAcceptMethodsDataSet = [];
    var AllBackMethodsDataSet = [];

    /**AllActionGroup - true  Добавлять в очередь как асинхронные так и синхронные**/
    this.startActionsGroup = function (AllActionGroup) {
        if (ActionGroups < 0) {
            ActionGroups = 1;
        } else {
            ActionGroups++;
        }
        AllActionGroups.push(AllActionGroup || false);
    }
    this.addActionData = function (_actionName, _extData) {
        //Очереди нет
        if (ActionGroups == 0)
            return false;
        //Уникальный номер action
        var _data = this.getSysInfoByName(_actionName);
        _data.Action = _actionName
        _data._sysid = ActionsUid++;
        //Добавляем данные action для отправки на сервер
        ActionsData.push(_data);
        //Добавляем данные action для последующей обработки, когда придет ответ
        ActionsUidData[_data._sysid] = _extData;
        return true;
    }

    function callAcceptMethods(_callMethods) {
        for (var i = 0, len = _callMethods.length; i < len; i++) {
            _callMethods[i].call(null);
        }
        AllAcceptMethods = [];
        AllBackMethods = [];
    }

    this.endActionsGroup = function (_callBackAcceptMethod, _callBackCancelMethod) {
        AllActionGroups.splice(ActionGroups - 1, 1);
        ActionGroups--;
        if (typeof _callBackAcceptMethod == 'function') {
            AllAcceptMethods.push(_callBackAcceptMethod);
        }
        if (typeof _callBackCancelMethod == 'function') {
            AllBackMethods.push(_callBackCancelMethod);
        }
        if (ActionGroups == 0 && ActionsData.length > 0) {
            //Отправляем запрос
            requestServerMultiActions(this.name, this.formData, ActionsData, requestServerMultiActionsAccept, requestServerMultiActionsCancel, this);
            //Обнуляем очередь
            ActionsData = [];
        }
    }
    var requestServerMultiActionsAccept = function (_xml, _callBackAcceptMethod, _callBackCancelMethod) {
        if(!_xml){
            D3Api.debug_msg('данные не пришли.');
           return;
        }
        var _nodes = _xml.childNodes;
        if (!isObject(_nodes)) {
            showError(_nodes);
            return;
        }
        var index = 0;
        var _node;
        while (index < _nodes.length && (_node = _nodes[index]).nodeName != 'multidata')
            index++;

        _nodes = _node.childNodes;
        if ((_node.nodeName != 'multidata') || !isObject(_nodes)) {
            showError('В ответе от сервера не найдено ни одного источника данных');
            return;
        }
        var resError = {};

        addStackPage(this.page);
        for (index = 0; index < _nodes.length; index++) {
            _node = _nodes[index];
            if (_node.nodeName.toLowerCase() != 'actiondata')
                continue;
            var error = _node.querySelector('Error');
            var action = _node.querySelector('Action');
            if (error && action) {
                resError[action.attributes['name'].value] = error.textContent;
            }
            var uid = _node.getAttribute('sysid');
            if (ActionsUidData[uid]) {
                var status = (_node.firstChild) ? _node.firstChild.getAttribute('status') : '';
                if (ActionsUidData[uid].callAccept)
                    ActionsUidData[uid].callAccept(_node);
                if (ActionsUidData[uid].callCancel && status == 'cancel')
                    ActionsUidData[uid].callCancel(_node);
                delete ActionsUidData[uid];
            }
        }
        var msg = '';
        for (var i in resError) {
            if (resError.hasOwnProperty(i)) {
                if (("showerror" in sysinfo[i]) && sysinfo[i]['showerror'] == 'false') {
                    continue;
                }
                msg += i + ':\n' + resError[i] + '\n';
            }
        }
        if (Object.keys(resError).length > 0) {
            callAcceptMethods.call(null, AllBackMethods);
        } else {
            callAcceptMethods.call(null, AllAcceptMethods);
        }
        if (msg != '') {
            var error = new DError();
            error.showOracleError(msg);
        }
        removeStackPage();

    }
    var showDbmsNotifyMessage = function (_arr) {
        for (var i = 0, len = _arr.length; i < len; i++) {
            var obj = JSON.parse(_arr[i]);
            D3Api.notify('Системное сообщение.', obj, {subform: 'System/notify/log', vars: obj.vars, expires: 10000});
        }

    }
    var setBadgeMenuCount = function(badgemsgs) {
        D3Api.setBadges(badgemsgs);
    }
    var requestServerMultiActionsCancel = function (_xml, _callBackCancelMethod) {
        addStackPage(this.page);
        callAcceptMethods.call(null, AllBackMethods);
        showXmlError(_xml);
        removeStackPage();
    }
    var executeServerSubActions = function (_xmlSubAction) {
        var _nodes = _xmlSubAction.childNodes;
        if (!isNodeList(_nodes)) {
            showError(_nodes);
            return;
        }

        for (var index = 0; index < _nodes.length; index++) {
            var _node = _nodes[index];
            if (_node.nodeName.toLowerCase() == 'subaction' && _node.getAttribute) {
                var subAct = sysinfo[_node.getAttribute('name')];
                var subDatas = _node.childNodes;
                var repeater = repeatersGroup[subAct.propertyes.group];
                if (!isNodeList(_nodes) || !subAct || !repeater)
                    continue;

                for (var sindex = 0; sindex < subDatas.length; sindex++) {
                    var _subnode = subDatas[sindex];
                    if (_subnode.nodeName.toLowerCase() == 'subdata' && _node.getAttribute) {
                        var clone_id = _subnode.getAttribute('id');
                        for (var cindex = 0; cindex < repeater.clone.clones.length; cindex++) {
                            if (repeater.clone.clones[cindex].uid == clone_id) {
                                var resultArray = XmlDataToArray(_subnode, true);
                                if (resultArray.sys_error) {
                                    break;
                                }
                                this.setSubstitutionControls(repeater.clone.clones[cindex].controls);
                                var _tmpParam, _value;
                                for (var pndex = 0; pndex < subAct.params.length; pndex++) {
                                    if (typeof ((_tmpParam = subAct.params[pndex]).put) == 'undefined') {
                                        continue;
                                    }
                                    _value = resultArray[_tmpParam.put];
                                    if (typeof (_value) == 'undefined') {
                                        _value = '';
                                    }
                                    switch (_tmpParam.srctype) {
                                        case 'var': {
                                            this.setVar(_tmpParam.src, _value);
                                            break;
                                        }
                                        case 'ctrl': {
                                            this.setValue(_tmpParam.src, _value);
                                            break;
                                        }
                                        case 'ctrlcaption': {
                                            this.setCaption(_tmpParam.src, _value);
                                            break;
                                        }
                                        case 'ctrlhint': {
                                            this.setHint(_tmpParam.src, _value);
                                            break;
                                        }
                                    }
                                }
                                this.stopSubstitutionControls();
                                break;
                            }
                        }
                    }
                }
            }
        }
    }

    var executeServerActionAccept = function (_xml, _callBackAcceptMethod, _callBackCancelMethod, _callBackObject, _controls) {
        if (!this.page) {
            //форму успели закрыть
            return;
        }
        if (!_xml)
            var _nodes = [];
        else
            var _nodes = _xml.childNodes;
        if (!isNodeList(_nodes)) {
            showError(_nodes);
            return;
        }
        addStackPage(this.page);
        this.setSubstitutionControls(_controls);
        var _node;
        var resultArray = new Array();
        var index;
        var jndex;
        for (index = 0; index < _nodes.length; index++) {
            _node = _nodes[index];
            switch (_node.nodeName.toLowerCase()) {
                case 'action': {
                    for (jndex = 0; jndex < _node.attributes.length; jndex++) {
                        if (_node.attributes[jndex].name == 'name') {
                            var arr = resultArray[_node.attributes[jndex].value] = XmlDataToArray(_node, Boolean(this.getPropertySysInfoByName(_node.attributes[jndex].value, 'showerror', 'true') != 'false'));
                            if (("sys_error_message" in arr)) {
                                // колбэки неудачи экшнов/датасетов
                                if (_callBackCancelMethod instanceof Function) {
                                    try{
                                        _callBackCancelMethod.call(_callBackObject, arr);
                                    } catch(e) {
                                        showScriptError(e, {script: (_callBackCancelMethod || '').toString()});
                                    }
                                }
                                this.stopSubstitutionControls();
                                removeStackPage();
                                return;
                            }
                            var _actionInfo = sysinfo[_node.attributes[jndex].value];
                            var chAct = 0;
                            for (var subAct in _actionInfo.childs) {
                                if (!_actionInfo.childs.hasOwnProperty(subAct)) {
                                    continue;
                                }
                                sysinfo[subAct] = _actionInfo.childs[subAct];
                                chAct++;
                            }
                            if (chAct > 0) {
                                this.stopSubstitutionControls();
                                executeServerSubActions.call(this, _node);
                                this.setSubstitutionControls(_controls);
                            }
                            break;
                        }
                    }
                    break;
                }
                case 'parsererror':
                case 'error': {
                    showXmlError(_node);
                    break;
                }
            }

        }
        var _tmpPostObject;
        var pndex;
        var _tmpParam;
        var _value;
        var notifyMsg = "";
        // засовываю в массив названия всех форм экшнов, т.к. неясно какой из них может повлиять на catch
        var formnames = [];

        for (var _actionName in resultArray) {
            if (!resultArray.hasOwnProperty(_actionName)) {
                continue;
            }
            /**
             * startActionsGroup выполняется в рамках одной транзакции в случае если хотя бы в один экшн не выполнена но не проставлять не актуальные значения
             **/
            if (("multidata" in resultArray[_actionName]) && resultArray[_actionName]["sys_error"] == true) {
                break;
            }
            _tmpPostObject = sysinfo[_actionName] || new DPostObject();

            if (_tmpPostObject && _tmpPostObject.attrs && _tmpPostObject.attrs.formname) {
                formnames.push(_tmpPostObject.attrs.formname);
            }

            if (('notifymsg' in resultArray[_actionName]) && resultArray[_actionName]['notifymsg'].length > 0) {
                showDbmsNotifyMessage(resultArray[_actionName]['notifymsg'])

            }

            if ('badgemsg' in resultArray[_actionName]) {
                setBadgeMenuCount(resultArray[_actionName]['badgemsg']);
            }

            for (pndex = 0; pndex < _tmpPostObject.params.length; pndex++) {
                if (typeof ((_tmpParam = _tmpPostObject.params[pndex]).put) == 'undefined') {
                    continue;
                }
                _value = resultArray[_actionName][_tmpParam.put];
                if (typeof (_value) == 'undefined') {
                    _value = '';
                }
                switch (_tmpParam.srctype) {
                    case 'var': {
                        this.setVar(_tmpParam.src, _value);
                        break;
                    }
                    case 'ctrl': {
                        if(Array.isArray(_value)){
                            var _dom = this.getControlByName(_tmpParam.src,true);
                            var groupname = null;
                            if(_dom && _dom.hasAttribute('groupname')){
                                groupname = getProperty(_dom,'groupname');
                                var repeate = this.getRepeaterByGroupName(groupname);
                                if(repeate){
                                    repeate.setData(_value);
                                }
                            }else{
                                this.setValue(_tmpParam.src,_value);
                            }
                        }else{
                            this.setValue(_tmpParam.src,_value);
                        }
                        break;
                    }
                    case 'ctrlcaption': {
                        this.setCaption(_tmpParam.src, _value);
                        break;
                    }
                    case 'ctrlhint': {
                        this.setHint(_tmpParam.src, _value);
                        break;
                    }
                }
            }

        }
        // колбэки экшнов/датасетов
        if (_callBackAcceptMethod instanceof Function) {
            try{
                _callBackAcceptMethod.call(_callBackObject);
            } catch(e) {
                showScriptError(e, {formname: formnames.join(), script: (_callBackAcceptMethod || '').toString()});
            }
        }
        if (this.stopSubstitutionControls) {
            this.stopSubstitutionControls();
        }

        removeStackPage();
    }
    var executeServerActionCancel = function (_xml, _callBackCancelMethod, _callBackObject, _controls) {
        if (!this.page) {
            //форму успели закрыть
            return;
        }
        addStackPage(this.page);
        this.setSubstitutionControls(_controls);
        // колбэки неудачи экшнов/датасетов
        if (_callBackCancelMethod instanceof Function) {
            try{
                _callBackCancelMethod.call(_callBackObject);
            } catch(e){
                // todo formname
                showScriptError(e, {formname: this.name, script: (_callBackCancelMethod || '').toString()});
            }
        }
        this.stopSubstitutionControls();
        removeStackPage();
        showXmlError(_xml);
    }
    this.executeServerAction = function (_nameAction, _callBackAcceptMethod, _callBackCancelMethod, _callBackObject, async, silent) {
        if (sysinfo[_nameAction] === undefined) {
            console.error('Action с именем "' + _nameAction + '" не найден на форме "' + this.name + '".');
            return;
        }
        var _controls = currentControls;
        var self = this;
        //добавлять в очередь если ActionGroups(true) или запросы асинхронные
        var allGroups = AllActionGroups[ActionGroups - 1];
        if ((allGroups || (async || async == null)) && this.addActionData(_nameAction, {
            callAccept: function (_xml) {
                executeServerActionAccept.call(self, _xml, _callBackAcceptMethod, _callBackCancelMethod, _callBackObject, _controls);
            },
            callCancel: function (_xml) {
                executeServerActionCancel.call(self, _xml, _callBackCancelMethod, _callBackObject, _controls);
            }
        }))
            return;

        var _data = this.getSysInfoByName(_nameAction);
        _data['Action'] = _nameAction;
        _data['silent'] = !!silent;
        var name = /*this.getSysInfoByAttr(_nameAction,'formname')||*/this.name;

        var max_exec_time = this.getSysInfoByAttr(_nameAction,'max_exec_time');
        var interId = null;

        if(!D3Api.empty(max_exec_time) && 'php_config' in D3Api && 'gc_maxlifetime' in D3Api.php_config){
            /* не дадим завершиться сессии пока экшн выполняется значительно долго */
            max_exec_time = (+D3Api.php_config['gc_maxlifetime']) - 300;
            if(max_exec_time <= 0){
                max_exec_time = 300;
            }
           // interId = setInterval(function(){
           //     requestServerModule(true, 'System/system', {
           //         Module: 'updateTimeSession'
           //     }, null, null, null, true, true);
           // },max_exec_time * 1000);
        }
        return requestServerAction(Boolean(this.getPropertySysInfoByName(_nameAction, 'mode', 'get') != 'get'),
            name + this.getUrlFormData() + '&baseForm=' + this.name,
            _data,
            function (_xml) {
                if(!D3Api.empty(interId)){
                    clearInterval(interId);
                }
                executeServerActionAccept.call(this, _xml, _callBackAcceptMethod, _callBackCancelMethod, _callBackObject, _controls);
            },
            function (_xml) {
                if(!D3Api.empty(interId)){
                    clearInterval(interId);
                }
                executeServerActionCancel.call(this, _xml, _callBackCancelMethod, _callBackObject, _controls);
            },
            this,
            async);
    }
    var executeServerModuleAccept = function (_xml, _callBackAcceptMethod, _callBackCancelMethod, _callBackObject) {
        if (!this.page) {
            //форму успели закрыть
            return;
        }
        if(!_xml){
            D3Api.debug_msg('данные не пришли.');
            return;
        }
        var _nodes = _xml.childNodes;
        if (!isNodeList(_nodes)) {
            showError(_nodes);
            return;
        }
        addStackPage(this.page);
        var _node;
        var resultArray = new Array();
        var index;
        var jndex;
        for (index = 0; index < _nodes.length; index++) {
            _node = _nodes[index];
            switch (_node.nodeName.toLowerCase()) {
                case 'module': {
                    for (jndex = 0; jndex < _node.attributes.length; jndex++) {
                        if (_node.attributes[jndex].name == 'name') {
                            var arr = resultArray[_node.attributes[jndex].value] = XmlDataToArray(_node, Boolean(this.getPropertySysInfoByName(_node.attributes[jndex].value, 'showerror', 'true') != 'false'));
                            if (arr.sys_error) {
                                // колбэки неудачи экшнов/датасетов
                                if (_callBackCancelMethod instanceof Function) {
                                    try{
                                        _callBackCancelMethod.call(_callBackObject, arr);
                                    } catch(e) {
                                        showScriptError(e, {script: (_callBackCancelMethod || '').toString()});
                                    }
                                }
                                removeStackPage();
                                return;
                            }
                            break;
                        }
                    }
                    break;
                }
                case 'parsererror':
                case 'error': {
                    showXmlError(_node);
                    break;
                }
            }

        }
        var _tmpPostObject;
        var pndex;
        var _tmpParam;
        var _value;
        var notifyMsg = "";
        var formnanes = [];
        for (var _moduleName in resultArray) {
            if (!resultArray.hasOwnProperty(_moduleName)) {
                continue;
            }
            _tmpPostObject = sysinfo[_moduleName] || new DPostObject();
            if (_tmpPostObject && _tmpPostObject.attrs && _tmpPostObject.attrs.formname) {
                formnanes.push(_tmpPostObject.attrs.formname);
            }
            if ('notifymsg' in resultArray[_moduleName]) {

                showDbmsNotifyMessage(resultArray[_moduleName]['notifymsg'])

            }
            if ('badgemsg' in resultArray[_moduleName]) {
                setBadgeMenuCount(resultArray[_actionName]['badgemsg']);
            }

            for (pndex = 0; pndex < _tmpPostObject.params.length; pndex++) {
                if (typeof ((_tmpParam = _tmpPostObject.params[pndex]).put) == 'undefined') {
                    continue;
                }
                _value = resultArray[_moduleName][_tmpParam.put];
                if (typeof (_value) == 'undefined') {
                    _value = '';
                    //showError('Значение для ['+_tmpParam.srctype+']['+_tmpParam.src+'] не возвращено');
                    //_callBackCancelMethod.call(_callBackObject);
                    //removeStackPage();
                    //return;
                }
                switch (_tmpParam.srctype) {
                    case 'var': {
                        this.setVar(_tmpParam.src, _value);
                        break;
                    }
                    case 'ctrl': {
                        this.setValue(_tmpParam.src, _value);
                        break;
                    }
                    case 'ctrlcaption': {
                        this.setCaption(_tmpParam.src, _value);
                        break;
                    }
                    case 'ctrlhint': {
                        this.setHint(_tmpParam.src, _value);
                        break;
                    }
                }
            }

        }
        if (_callBackAcceptMethod instanceof Function) {
            try{
                _callBackAcceptMethod.call(_callBackObject);
            } catch(e) {
                showScriptError(e, {formname: formnanes.join(), script: (_callBackAcceptMethod || '').toString()});
            }
        }
        removeStackPage();
    }
    var executeServerModuleCancel = function (_xml, _callBackCancelMethod, _callBackObject) {
        if (!this.page) {
            //форму успели закрыть
            return;
        }
        addStackPage(this.page);
        if (_callBackCancelMethod instanceof Function) _callBackCancelMethod.call(_callBackObject);
        removeStackPage();
        var error = _xml instanceof XMLDocument ? _xml.querySelector('Error') : _xml;
        if (error) {
            showXmlError(error);
        }
    }
    this.executeModule = function (_moduleName, _callBackAcceptMethod, _callBackCancelMethod, _callBackObject, async, silent) {
        var isXml = Boolean(this.getPropertySysInfoByName(_moduleName, 'responsetype', 'xml') == 'xml');
        var si = this.getSysInfoByName(_moduleName);
        si['Module'] = _moduleName;
        si['silent'] = !!silent;
        var name = /*this.getSysInfoByAttr(_moduleName,'formname')||*/this.name;
        return requestServerModule(Boolean(this.getPropertySysInfoByName(_moduleName, 'mode', 'get') != 'get'),
            name + this.getUrlFormData() + '&baseForm=' + this.name,
            si,
            function (_xml) {
                if (isXml) {
                    executeServerModuleAccept.call(this, _xml, _callBackAcceptMethod, _callBackCancelMethod, _callBackObject);
                } else {
                    _callBackAcceptMethod.call(_callBackObject, _xml);
                }
            },
            function (_xml) {
                executeServerModuleCancel.call(this, _xml, _callBackCancelMethod, _callBackObject);
            },
            this,
            isXml,
            async);
    }
    this.show = function (_postData) {
        if (this.name == null) {
            showError('Имя формы не указано');
            return;
        }
        this.requestForm(_postData);
    }
    this.remove = function () {
        callEvents.call(this, 'onclose');

        if (SYS_current_theme === 'bars') {
            var cont = this.container.getContainer()
            if (cont) {
                cont.innerHTML = '';
            }
        } else {
            var page = this.page,
                d3Form = page.d3Form;
            if (d3Form) {
                //d3Form.DOM.remove()
            } else {
                page.form.containerForm.remove();
            }
        }
    }
    this.reload = function () {
        callEvents.call(this, 'onreload');
        this.saveFormSettings();
        if (this.page.modal)
            this.page.getContainer().setVisible(false);
        else
            this.container.setVisible(false);

        isCreated = false;
        isShowing = false;
        isShowed = false;
        this.formSettings = {};
        this.formSettingsChange = false;
        this.formSettingsGetParam = [];
        this.formSettingsState = [];

        this.helpShow = false;
        this.helpUrl = '';
        this.helpAbsPath = '';
        this.helpUid = '';

        if (SYS_current_theme === 'bars') {
            this.container.innerHTML = '';
        } else {
            this.containerForm.remove();
        }

        this.FilterItems = new Array();
        this.SelectLists = new Array();
        loadingDataSets = new Array();
        stackDataSets = new Array();
        countLoadScript = new Number(0);
        isShowing = false;
        isSized = false;
        DataSets = new Array();
        scriptfiles = new Array();
        cssfiles = new Array();
        runScripts = new Array();
        namespace = new Object();
        sysinfo = new Array();
        this.vars = [];
        for (var key in this.formVarsOpen) {
            if (!this.formVarsOpen.hasOwnProperty(key)) {
                continue;
            }
            this.vars[key] = this.formVarsOpen[key];
        }
        multiDatas = new Array();
        this.requestsCount = 0;
        //callEvents=new Array();
        eventsControl = {
            onshow: new Array(),
            oncreate: new Array(),
            onclose: new Array(),
            onreload: new Array(),
            LoadDataSets: new Array()
        };
        //        vars=new Array();
        currentControls = associateControls = new Array();
        this.stateReloadForm = true;
        incSYS_countShowState();
        this.requestForm();
    }
    this.formCreate = function () {
        isCreated = true;
        this.loadFormSettings(false);
    }

    var func_beforeUnload = function () {
        ObjectForm.saveFormSettings();
        return 'Внимание!';
    }
    this.beforeClose = function () {
        this.saveFormSettings();

    }
    this.close = function () {
        this.container.close();
    }
    this.formSettings = {};
    this.formSettingsChange = false;
    this.formSettingsGetParam = [];
    this.formSettingsState = [];

    this.getFormSettings = function (ctrl) {
        if (ctrl) {
            this.formSettingsChange = true;
            var st = {};
            var c = this.getControlByName(ctrl, false);
            if (c) {
                var cmpType = quickGetProperty(c, 'cmptype');
                if (SYS_ControlActions[cmpType] && SYS_ControlActions[cmpType]['settings']) {
                    st = SYS_ControlActions[cmpType]['settings'].get(c);
                }
            }
            this.formSettings[ctrl] = mixinObjects(st, this.formSettings[ctrl]);
            return this.formSettings[ctrl];
        } else
            return this.formSettings;
    }
    this.deleteFormSettings = function (ctrl) {
        this.formSettingsChange = true;
        delete this.formSettings[ctrl];
    }
    this.canSaveFormSettings = function () {
        return this.formSettingsState.indexOf('notsave') == -1;
    }
    this.setFormSettings = function (r) {
        if (r)
            this.stringFormSettings = r;
        if (!isCreated) {
            var self = this;
            setTimeout(function () {
                self.setFormSettings()
            }, 100);
            return true;
        }
        var s = false;
        try {
            if (this.stringFormSettings) {
                s = JSON.parse(this.stringFormSettings);
            }
        } catch (e) {
        }
        this.stringFormSettings = '';

        if (s) {
            for (var ctrl in s) {
                if (!s.hasOwnProperty(ctrl)) {
                    continue;
                }
                if (ctrl == '_WINDOW_') {
                    this.formSettings[ctrl] = s[ctrl];
                    if ( !('theme' in s[ctrl]) || window.SYS_current_theme == s[ctrl]['theme']) {
                        if (this.page.modal && s[ctrl]['width'] && s[ctrl]['height']) {
                            if (!this.page.window_size) this.page.window_size = {};
                            this.page.window_size.width = s[ctrl]['width'];
                            this.page.window_size.height = s[ctrl]['height'];
                        }
                    }
                    if(window.SYS_current_theme == 'new'){
                        applyFormTheme.call(this, s[ctrl]['theme']);
                    }
                    continue;
                }
                var c = this.getControlByName(ctrl, false);
                if (c) {
                    this.formSettings[ctrl] = s[ctrl];
                    var cmpType = quickGetProperty(c, 'cmptype');
                    if (SYS_ControlActions[cmpType] && SYS_ControlActions[cmpType]['settings']) {
                        var res = SYS_ControlActions[cmpType]['settings'].set(c, this.formSettings[ctrl]);
                        if (!res) {
                            delete this.formSettings[ctrl];
                        }
                    }
                } else {
                    delete this.formSettings[ctrl];
                }
            }
            if(window.SYS_current_theme == 'new'){
                if (!s.hasOwnProperty('_WINDOW_')) {
                    applyFormTheme.call(this);
                }
            }
        }else{
            if(window.SYS_current_theme == 'new'){
                applyFormTheme.call(this);
            }
        }
    }
    this.saveFormSettings = function () {
        if (this.formSettingsChange && this.formSettingsState.indexOf('notsave') == -1 && (!_GET_['settings'] || _GET_['settings'] == '1')) {
            var fN = this.name;
            for (var i = 0; i < this.formSettingsGetParam.length; i++) {
                if (this.formData[this.formSettingsGetParam[i]])
                    fN += '/' + this.formData[this.formSettingsGetParam[i]];
            }
           // requestServerModule(true, 'System/system', {
           //     Module: 'formSettings',
           //     form: fN,
           //     action: 'save',
           //     settings: JSON.stringify(this.formSettings),
           //     silent: true
           // });
        }
    }
    this.loadFormSettings = function (async) {
        if (!_GET_['settings'] || _GET_['settings'] == '1') {
            var fN = this.name;
            for (var i = 0; i < this.formSettingsGetParam.length; i++) {
                if (this.formData[this.formSettingsGetParam[i]])
                    fN += '/' + this.formData[this.formSettingsGetParam[i]];
            }
          //  requestServerModule(true, 'System/system', {
          //      Module: 'formSettings',
          //      form: fN,
          //      action: 'load',
          //      silent: true
          //  }, this.setFormSettings, null, this, false, async);
        }
    }

    this.helpShow = false;
    this.helpUrl = '';
    this.helpAbsPath = '';
    this.helpUid = '';
    this.showHelp = function () {
        var helpBtn = document.getElementById('helpButton');
        if (helpBtn && !this.page.modal) {
            setDomVisible(helpBtn, false);
        }

        var rd = document.getElementById('roleDoc');
        var docPriv = rd ? !empty(rd.value) : false;
        if (this.name == 'System/help' || !this.helpShow || (!this.helpUrl && !docPriv))
            return;

        var formObj = this;
        var helpFunc = function () {
            if (docPriv) {
                openWindow({name: 'System/help', vars: {form: formObj}}, true);
            } else
                openHelpUrl(formObj.helpAbsPath + formObj.helpUrl);
        }
        if (this.page.modal) {
            var page = this.page;

            if (empty(page.d3Form)) {
                this.page.getContainer().showHelpEvent(helpFunc);
            } else {
                page.d3Form.DWindow.showHelpEvent(helpFunc);
            }
        } else if (helpBtn) {
            helpBtn.onclick = helpFunc;
            setDomVisible(helpBtn, true);
        }
    }
    this.destroyAllProperty = function () {
        DataSets = null;
        scriptfiles = null;
        cssfiles = null;
        runScripts = null;
        namespace = null;
        eventsControl = null;
        repeatersGroup = null;
        repeaters = null;
        groupsClone = null;
        getPostXml = null;
        associateControls = null;
        currentControls = null;
        ObjectForm = null;
        any_loadinfo = null;

        delete DataSets;
        delete scriptfiles;
        delete cssfiles;
        delete runScripts;
        delete namespace;
        delete eventsControl;
        delete repeatersGroup;
        delete repeaters;
        delete groupsClone;
        delete getPostXml;
        delete associateControls;
        delete currentControls;
        delete ObjectForm;
        delete any_loadinfo;

    }
    var $_GET = this.vars;
}
function openHelpUrl(url) {
    window.open(url);
}
//-----------------------------------------------------------------------------------------------
function skip() {
    arguments.callee.caller.skip = true;
}
function DListenerObject(_object,_method,_capture) {
    var object = _object;
    var method = _method;
    var capture = _capture;
    this.isThis = function (_object, _method, _capture) {
        if (object != _object) return false;
        if (method != _method) return false;
        if (capture != _capture) return false;
        return true;
    }
    this._call = function (_eventArguments) {
        if (capture) method.skip = false;
        method.apply(object, _eventArguments);
        var skip = false;
        if (method['skip']) {
            var skip = Boolean(method.skip);
            delete method.skip;
        }
        return skip && capture;
    }
}
var GLOBAL_CURRENT_FORM = '';
//class DListener
function DListener() {
    //Когда создается форма(парс), устанавливается переменная GLOBAL_CURRENT_FORM
    this.formUID = GLOBAL_CURRENT_FORM;

    if (typeof (this.Events) != 'undefined') {
        // очищаем все события, кроме onafterclose
        for (var i in this.Events) {
            if (!this.Events.hasOwnProperty(i)) {
                continue;
            }
            if (i != 'onafterclose')
                delete this.Events[i];
        }
    } else {
        this.Events = new Array();
    }

    var getGroupEvents = function (_eventName) {
        var groupEvents = this.Events[_eventName];
        return (groupEvents instanceof Array) ? groupEvents : this.Events[_eventName] = new Array();
    }
    var getGroup = function (_eventName) {
        var groupEvents = this.Events[_eventName];
        if (!(groupEvents instanceof Array)) groupEvents = new Array();
        return groupEvents;
    }
    //public:
    this.addListener = function (_eventName, _method, _object, _capture) {
        var groupEvents = getGroup.call(this, _eventName);
        for (var _index = 0; _index < groupEvents.length; _index++) {
            if (groupEvents[_index].isThis(_object, _method, _capture)) {
                return false;
            }
        }
        return getGroupEvents.call(this, _eventName).splice((_capture) ? 0 : this.Events[_eventName].length, 0, new DListenerObject(_object, _method, _capture));
    }
    this.removeListener = function (_eventName, _method, _object, _capture) {
        var groupEvents = getGroup.call(this, _eventName);
        for (var _index = new Number(0); _index < groupEvents.length; _index++) {
            if (groupEvents[_index].isThis(_object, _method, _capture)) {
                //RemoveObjectPropertyes(groupEvents[_index]);
                groupEvents.splice(_index, 1);
            }
        }
    }
    this.dispatchEvent = function (_eventName) {
        var _eventArguments = new Array();
        for (var _index = new Number(1); _index < arguments.length; _index++) {
            _eventArguments[_index - 1] = arguments[_index];
        }
        var groupEvents = getGroup.call(this, _eventName);
        for (var _index = new Number(); _index < groupEvents.length; _index++) {
            if (groupEvents[_index]._call(_eventArguments)) return;
        }
    }
}
//-----------------------------------------------------------------------------------------------
function DNullContainer() {
    var loadingIndicate = document.getElementById('_mainIndicateLoader') || {style: {}};
    this.GetMainDOM = function () {
    }
    this.setVisible = function (v) {
    }
    this.getContainer = function () {
    }
    this.setCaption = function (_caption) {
    }
    this.show = function () {
    }
    this.close = function () {
    }
    this.refresh = function () {
    }
}
function DDocument(dom) {
    var body = (dom) ? dom : document.getElementById('_mainContainer');
    //var maindom = (dom) ? dom : document.getElementById('mainContainerContent');
    var maindom = (dom) ? dom : document.getElementById('D3MainContainer');
    var loadingIndicate = (dom) ? (document.getElementById('_mainIndicateLoader') || {style: {}}) : {style: {}};
    var title = (dom) ? false : document.getElementById('_titleContainer');
    this.GetMainDOM = function () {
        if(window.SYS_current_theme == 'bars'){
            return maindom;
        }else if(window.SYS_current_theme == 'new'){
            return body;
        }

    }
    this.setVisible = function (v) {
        if(window.SYS_current_theme == 'bars'){
            if (v) {
                removeClass(maindom, 'hidden');
                maindom.style.display = '';
                addClass(maindom, 'showed');
            } else {
                removeClass(maindom, 'showed');
                addClass(maindom, 'hidden');
            }
        }
    }
    this.getContainer = function () {
        return body;
    }
    this.setCaption = function (_caption) {
        if(window.SYS_current_theme == 'bars'){
            if (title) {
                title.innerHTML = _caption;
            }
        }
    }
    this.show = function () {
        if(window.SYS_current_theme == 'bars'){
            this.setCaption('');
        }

    }
    this.close = function () {
        if(window.SYS_current_theme == 'bars'){
            this.setVisible(false);
            maindom.style.height = '';
            if (body) {
                body.innerHTML = ''; //2
            }
        }
    }
    this.refresh = function () {
        if(window.SYS_current_theme == 'bars'){
            body.align = 'left';
            setTimeout(function () {
                body.align = '';
            }, 0);
        }
    }

    this.close();
}
function getMainForm(dom) {
    if (!dom){
        dom = document.getElementById('_mainContainer');
    }
    if(window.SYS_current_theme == 'bars'){
        if (dom.firstChild && dom.firstChild.form){
            return dom.firstChild.form;
        }
    }else if(window.SYS_current_theme == 'new'){
        if (dom.form) {
            return dom.form
        }
    }



    return false;
}
//class DNullPage
function DNullForm() {

    var cnslMsg = [];
    this.setConsoleMsg = function(_msg, _param){
        if(cnslMsg.indexOf(_msg) === -1){
            console.warn(_msg, _param);
            cnslMsg.push(_msg);
        }
    }
    this.beforeClose = function () {
        if (typeof this.saveFormSettings == 'function') {
            this.saveFormSettings();
        }
    };
    this.vars = {};
    this.setVar = function (_paramName, _paramValue) {
        this.vars[_paramName] = _paramValue;
    };
    this.getVar = function (_paramName) {
        if (typeof (this.vars[_paramName]) != 'undefined') {
            return this.vars[_paramName];
        }
        return null;
    };
}

function DNullPage(FormName) {
    this.setSubstitutionControls = emptyFunction;
    this.stopSubstitutionControls = emptyFunction;
    this.addRepeaterClone = emptyFunction;
    this.removeRepeaterClone = emptyFunction;
    this.getCloneObjectsByRepeaterName = emptyFunction;
    this.remove = emptyFunction;
    this.show = emptyFunction;
    this.getNamespace = function () {
        return {};
    }
    this.setContainer = emptyFunction;
    this.getContainer = function () {
        return new DDocument();
    }
    this.close = emptyFunction;
    this.isNullObject = true;
    this.executeServerAction = function () {
        return false;
    };
    this.getValue = function () {
        return null;
    }
    this.setValue = emptyFunction;
    this.setControlProperty = emptyFunction;
    this.getControlProperty = function () {
        return null;
    }
    this.setVar = function (_paramName, _paramValue) {
        this.form.vars[_paramName] = _paramValue;
    }
    this.getVar = function (_paramName) {
        if (typeof (this.form.vars[_paramName]) != 'undefined') {
            return this.form.vars[_paramName];
        }
        return null;
    }
    this.setCaption = emptyFunction;
    this.getCaption = function () {
        return null;
    }
    this.setHint = emptyFunction;
    this.getHint = function () {
        return null;
    }
    this.setEnabled = emptyFunction;
    this.getEnabled = function () {
        return null;
    }
    this.refreshDataSet = emptyFunction;
    this.reload = emptyFunction;
    this.requestDataSetCount = emptyFunction;
    this.addSystemInfo = emptyFunction;
    this.setFormData = emptyFunction;
    this.requestDataSetData = emptyFunction;
    this.prevPage = this;
    this.executeModule = emptyFunction;
    this.startMultiDataSetsGroup = emptyFunction;
    this.endMultiDataSetsGroup = emptyFunction;
    this.getRepaterByName = function () {
        return false;
    };
    this.memory = new Object();
    this.afterClose = emptyFunction;
    this.beforeClose = emptyFunction;
    var frm = new DForm();
    this.form = new DNullForm();
    if (!empty(FormName)) {
        this.form.__proto__ = new DForm(FormName, this)
    }
    var thForm = this.form;
    this.form.showHelp = function () {
        frm.showHelp.call(thForm)
    };
    this.destroyAll = function (skip, page) {
        var p = (page) ? page : getPage(skip);
        removePage(skip, p);
        frm.destroyAllProperty();
        for (var i in frm) {
            if (frm.hasOwnProperty(i)) {
                frm[i] = null;
                delete frm[i];
            }
        }
        for (var i in p) {
            if (p.hasOwnProperty(i)) {
                p[i] = null;
                delete p[i];
            }
        }
    };
}
function $$(_domObject,skip) {
    if (!isObject(_domObject.clone)){
        return;
    }
    getPage(skip).setSubstitutionControls(_domObject.clone.controls, true);
}
function _$$(skip) {
    getPage(skip).stopSubstitutionControls(true);
}
//class DPage()
function DPage(_formName) {
    this.destroyed = false
    DListener.call(this);
    this.form = new DForm(_formName, this);

    this.form.FilterItems = new Array(); //для хранения фильтров страницы
    this.form.SelectLists = new Array(); //для хранения selectlist страницы
    this.memory = new Object();
    var childPages = [];
    this.setChildPage = function (_page){
        childPages.push(_page);
    }
    this.getChildPages = function (){
        return childPages;
    }
    this.removeChildPage = function (_page){
        var indx = childPages.indexOf(_page);
        if(indx > -1){
            childPages.splice(indx, 1);
        }
    }

    this.setSubstitutionControls = function (_controls, _ss) {
        this.form.setSubstitutionControls(_controls, _ss);
    }
    this.stopSubstitutionControls = function (_ss) {
        this.form.stopSubstitutionControls(_ss);
    }
    this.addRepeaterClone = function (_groupName, _dataArray, _domObject, _labelName) {
        return this.form.addRepeaterClone(_groupName, _dataArray, _domObject, _labelName);
    }
    this.removeRepeaterClone = function (_groupName, _domObject, _index) {
        this.form.removeRepeaterClone(_groupName, _domObject, _index);
    }
    this.getCloneObjectsByRepeaterName = function (_nameRepeater, _nameControl) {
        return this.form.getCloneObjectsByRepeaterName(_nameRepeater, _nameControl);
    }
    this.setContainer = function (_container) {
        this.form.container = _container;
    }
    this.executeModule = function (_moduleName, _callBackAcceptMethod, _callBackCancelMethod, _callBackObject, async, silent) {
        if (_callBackAcceptMethod == null) _callBackAcceptMethod = emptyFunction;
        if (_callBackCancelMethod == null) _callBackCancelMethod = emptyFunction;
        return this.form.executeModule(_moduleName, _callBackAcceptMethod, _callBackCancelMethod, _callBackObject, async, silent);
    }
    this.getContainer = function () {
        return this.form.container;
    }
    this.show = function (_postData) {
        this.form.show(_postData);
    }
    this.getNamespace = function () {
        return this.form.getNamespace();
    }
    this.remove = function () {
        this.form.remove();
    }
    this.close = function (res, _dom) {
        this.destroyed = true;
        this.form.close();
        //        addStackPage(this);
        this.dispatchEvent('onclose', res, _dom);
        //        removeStackPage();
    }
    this.beforeClose = function (res) {
        this.dispatchEvent('onbeforeclose', res);
    }
    this.afterClose = function (res) {
        if (SYS_pages.length > 0) {
            var TMP_pages = SYS_pages;
            SYS_pages = [];
        }

        this.dispatchEvent('onafterclose', res);

        if (TMP_pages && TMP_pages.length > 0)
            SYS_pages = TMP_pages;
        TMP_pages = null;
    }
    this.executeServerAction = function (_actionName, _callBackAcceptMethod, _callBackCancelMethod, _callBackObject, async, _silent) {
        if (_callBackAcceptMethod == null) _callBackAcceptMethod = emptyFunction;
        if (_callBackCancelMethod == null) _callBackCancelMethod = emptyFunction;
        return this.form.executeServerAction(_actionName, _callBackAcceptMethod, _callBackCancelMethod, _callBackObject, async, _silent);
    }
    this.setValue = function (_controlName, _value) {
        this.form.setValue(_controlName, _value);
    }
    this.getValue = function (_controlName) {
        return this.form.getValue(_controlName);
    }
    this.setControlProperty = function (_controlName, _propertyName, _propertyValue) {
        this.form.setControlProperty(_controlName, _propertyName, _propertyValue);
    }
    this.getControlProperty = function (_controlName, _propertyName) {
        return this.form.getControlProperty(_controlName, _propertyName);
    }
    this.setVar = function (_name, _value) {
        this.form.setVar(_name, _value);
    }
    this.getVar = function (_name) {
        return this.form.getVar(_name);
    }
    this.setCaption = function (_controlName, _caption) {
        this.form.setCaption(_controlName, _caption);
    }
    this.getCaption = function (_controlName) {
        return this.form.getCaption(_controlName);
    }
    this.setEnabled = function (_controlName, _value) {
        this.form.setEnabled(_controlName, _value);
    }
    this.getEnabled = function (_controlName) {
        return this.form.getEnabled(_controlName);
    }
    this.setHint = function (_controlName, _hint) {
        this.form.setHint(_controlName, _hint);
    }
    this.getHint = function (_controlName) {
        return this.form.getHint(_controlName);
    }
    this.refreshDataSet = function (_dataSetName, instead) {
        return this.form.refreshDataSet(_dataSetName, instead);
    }
    this.getDataSet = function (_dataSetName, _show_error) {
        return this.form.getDataSet(_dataSetName, _show_error);
    }
    this.reload = function () {
        this.memory = new Object();
        this.form.reload();
        DListener.call(this);
    }
    this.getControlByName = function (_controlName, _show_error) {
        return this.form.getControlByName(_controlName, _show_error);
    }
    this.isExistsControlByName = function (_controlName) {
        return this.form.isExistsControlByName(_controlName, false);
    }
    this.requestDataSetCount = function (_dataSetName, _callBackFunction, _callBackObject) {
        this.form.requestDataSetCount(_dataSetName, _callBackFunction, _callBackObject);
    }
    this.addSystemInfo = function (_nameObject, _data) {
        this.form.addSystemInfo(_nameObject, _data);
    }
    this.setPropertySysInfoByName = function (_nameObject, _propertyName, _Value) {
        this.form.setPropertySysInfoByName(_nameObject, _propertyName, _Value);
    }
    this.setFormData = function (_data) {
        this.form.formData = _data;
    }
    this.setPageCaption = function (_caption) {
        this.getContainer().setCaption(_caption);
    }
    this.setPageConfirmOnClose = function () {
        this.getContainer().setConfirmOnClose(1);
    }
    this.getPageCaption = function () {
        return this.getContainer().getCaption instanceof Function ? this.getContainer().getCaption() : '';
    }
    this.requestDataSetData = function (_dataSetName, _data, _acceptCallBackFunction, _cancelCallBackFunction, _callBackObject, async) {
        return this.form.requestDataSetData(_dataSetName, _data, _acceptCallBackFunction, _cancelCallBackFunction, _callBackObject, async);
    }
    this.prevPage = null;
    this.startMultiDataSetsGroup = function () {
        this.form.startMultiDataSetsGroup();
    }
    this.endMultiDataSetsGroup = function (_callBackAcceptMethod) {
        this.form.endMultiDataSetsGroup(_callBackAcceptMethod);
    }
    this.startActionsGroup = function (async) {
        this.form.startActionsGroup(async);
    }
    this.endActionsGroup = function (_callBackAcceptMethod, _callBackCancelMethod) {
        this.form.endActionsGroup(_callBackAcceptMethod, _callBackCancelMethod);
    }
    this.getRepeaterByName = function (_repeaterName) {
        return this.form.getRepeaterByName(_repeaterName);
    }
    this.getRepeaterByGroupName = function (_groupName) {
        return this.form.getRepeaterByGroupName(_groupName);
    }
    this.setSizePos = function () {
        this.form.setSizePos();
    }
    this.destroyAll = function (skip, page) {
        var p = (page) ? page : getPage(skip);
        removePage(skip, p);
        p.form.destroyAllProperty();
        for (var i in p.form) {
            if (p.form.hasOwnProperty(i)) {
                p.form[i] = null;
                delete p.form[i];
            }
        }
        for (var i in p) {
            if (p.hasOwnProperty(i)) {
                p[i] = null;
                delete p[i];
            }
        }
    }
}
var SYS_pages = [];
var SYS_pages_window = [];
var SYS_lastPage = new DNullPage();
var SYS_reportParams = {};
function addStackPage(_page) {
    SYS_pages.push(_page);
    SYS_lastPage = _page;
}
function removeStackPage() {
    SYS_pages.splice(SYS_pages.length - 1, 1);
    SYS_lastPage = SYS_pages_window[SYS_pages_window.length - 1];
}
function addPage(_page) {
    var prev_page = null;
    if (SYS_pages_window && (SYS_pages_window.length > 0)) {
        prev_page = SYS_pages_window[SYS_pages_window.length - 1];
    }
    if (empty(prev_page)) {
        prev_page = new DNullPage();
    }
    _page.prevPage = prev_page
    SYS_pages_window.push(_page);

    if (SYS_pages_store) {
        SYS_pages_store.dispatch({ type: 'ADD', value: _page });
    }
}

function movePages(firstPageIndex, secondPageIndex) {
    if (firstPageIndex !== secondPageIndex) {
        var temp = SYS_pages_window[firstPageIndex];
        SYS_pages_window[firstPageIndex] = SYS_pages_window[secondPageIndex];
        SYS_pages_window[secondPageIndex] = temp;
    }
}

function $() {
    var evt = arguments.callee.caller.arguments[0] || window.event;
    var dom = evt.currentTarget || evt.srcElement;
    while (typeof (dom.jsParent) == 'undefined') {
        dom = dom.parentNode;
    }
    addStackPage(dom.jsParent.page);
}
function _$() {
    removeStackPage();
}
function abortLoading() {
    SYS_RequestObject.abort();
}

function getCloneObjectsByDom(_domObject,_nameControl) {
    var clone = _domObject.clone;
    if (!isObject(clone)) {
        showError('Данный объект [' + getProperty(_domObject, 'name', 'unknownName') + '] не принадлежит клонируемому объекту');
        return new Array();
    }
    var clones = clone.repeater.clone.clones;
    var controls = new Array();
    for (var index = 0; index < clones.length; index++) {
        controls.push(clones[index].controls[_nameControl]);
    }
    return controls;
}

/**
 * Возвращает клон в котором находится данный контрол
 * @param _control - DOM объект от которого идет поиск
 * @param repeaterName - имя репитера, клон которого ищется
 * @return DOM объект клона, иначе false
 */
function getCloneByNameFromControl(_control,repeaterName) {
    var c = _control;
    //Сначала ищем клон
    while (!c.clone && c.parentNode)
        c = c.parentNode;

    if (!c.parentNode && !c.clone)
        return false;
    c = c.clone;
    //Теперь по клонам
    while (c) {
        if (getProperty(c.clone, 'name', '') == repeaterName)
            return c.clone;
        c = c.parentClone;
    }

    return false;
}
function getControlByNameFromClone(_domObject,_nameControl,jump) {
    var _clone = _domObject.clone;
    if (!isObject(_clone)) {
        showError('Объект не является наследником клонируемого');
        return null;
    }
    if (jump == null) jump = 0;
    for (var index = 0; index < jump; index++) {
        _clone = _clone.parentClone;
        if (!isObject(_clone)) {
            showError('Объект не является наследником клонируемого');
            return null;
        }
    }

    var control;
    if (typeof (control = _clone.controls[_nameControl]) != 'object') {
        showError('Объект с именем ' + _nameControl + ' не зарегистрирован в клонируемом объекте');
        return null;
    }
    return control;
}

function stopEvent(ev) {
    ev || (ev = window.event);
    if (ev.stopPropagation) {
        ev.preventDefault();
        ev.stopPropagation();
    } else {
        ev.cancelBubble = true;
        ev.returnValue = false;
    }
    return false;
}
function loadFile(_fileName, _charset = undefined) {
    window.location = 'getfile.php?file=' + _fileName + (_charset == undefined ? '' : '&charset=' + _charset);
}
function reloadURL() {
    location.reload();
}
function logOff() {
    var esia = getGlobalVar('int_esia');
    if ((typeof esia !== 'undefined' ) && (esia != null) && (''+getGlobalVar('int_esia')!={}) ) {
        window.open('webservice/esia/logout?callbackUrl=' + window.location, '_self');
        return;
    }
    requestServerModule(false,
        'System/system',
        {Module: 'logout'},
        function (_data) {
            reloadURL();

        },
        function () {
            showError('Не удалось выйти из системы');
        },
        null,
        true,
        false);
}
function changeLPU() {
    requestServerModule(false,
        'System/system',
        {Module: 'changelpu'},
        function (_data) {
            reloadURL();
        },
        function () {
            showError('Не получилось сменить кабинет');
        },
        null,
        true,
        false);
}

function GetDateWords() {
    return {
        'days': ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
        'months': [
            'января',
            'февраля',
            'марта',
            'апреля',
            'мая',
            'июня',
            'июля',
            'августа',
            'сентября',
            'октября',
            'ноября',
            'декабря']
    }
}

function AddDateLeadingZero(source) {
    return source < 10 ? '0' + source.toString() : source;
}

(function SysDateInit(window) {
    var date = new Date(),
        startDate = (new Date()).getTime(),
        initDate = date,
        days = GetDateWords().days,
        months = GetDateWords().months;

    var timer = setInterval(function () {
        var currDate = (new Date()).getTime(),
            ms = Math.floor(currDate - startDate);

        date = new Date(initDate.getTime() + ms);
    }, 1000);

    window.SysDateObj = {
        sync: function (_date) {
            _date = _date.split(/[\s.:]+/, 6);
            startDate = (new Date()).getTime();
            initDate = new Date(_date[2], _date[1] - 1, _date[0], _date[3], _date[4], _date[5]);
            date = new Date(_date[2], _date[1] - 1, _date[0], _date[3], _date[4], _date[5]);
        },

        getDate: function () {
            return date;
        },

        toString: function () {
            var hours = date.getHours(),
                minutes = date.getMinutes();
            return days[date.getDay()] + ', ' + date.getDate() + ' ' + months[date.getMonth()] + ', '
                + AddDateLeadingZero(hours) + ':' + AddDateLeadingZero(minutes);
        },

        toFormattedString: function (format) {
            return DateToString(format, date);
        }
    };
})(window);

function DateToString(format, date) {
    var days = GetDateWords().days,
        months = GetDateWords().months;

    format = format.toUpperCase();
    return format.replace('DD', AddDateLeadingZero(date.getDate()))
        .replace('MM', AddDateLeadingZero(date.getMonth() + 1))
        .replace('YYYY', date.getFullYear())
        .replace('YY', ('' + date.getFullYear()).substr(2))
        .replace('DAY', days[date.getDay()])
        .replace('MONTH', months[date.getMonth()])
        .replace('HH24', AddDateLeadingZero(date.getHours()))
        .replace('MI', AddDateLeadingZero(date.getMinutes()))
        .replace('SS', AddDateLeadingZero(date.getSeconds()));
}

function SysDate(format) {
    return format ? SysDateObj.toFormattedString(format) : SysDateObj.getDate();
}
function getUserData() {
   //equestServerModule(false, 'System/system', {
   //       Module: 'userenv',
   //       title: getGlobalVar('winPath')
   //   },
   //   function (env) {
   //       env = env.replace('$HTTP_HOST',location.host);
   //       openWindow({
   //           name: 'UniversalForms/text_area',
   //           vars: {
   //               'in_value': env,
   //               'window_caption': 'Скопировать в буфер обмена: Ctrl+C',
   //               'select_on_focus': 1
   //           }
   //       }, true, 500, 250);
   //   },
   //   function () {
   //   },
   //   null, false, false);
    return false;
}

//SYS_include_css('Styles/default');
function showReport(_reportName,_width,_height) {
    openWindow({name: 'Reports/showReport', modulename: _reportName}, true, _width, _height);
}
function createReport(_domObject,_params,_object, type)
{
	var reportinfo = _domObject.getElementsByTagName('reportinfo');
    if(!D3Api.empty(reportinfo) && reportinfo.length > 0){
        reportinfo = JSON.parse(reportinfo[0].innerText);
    }

    var reportparam = _domObject.getElementsByTagName('reportparam');
    if(!D3Api.empty(reportparam) && reportparam.length > 0){
        reportparam = JSON.parse(reportparam[0].innerText);
    }
    var sessioninfo = _domObject.getElementsByTagName('sessioninfo');
    if(!D3Api.empty(sessioninfo) && sessioninfo.length > 0){
        sessioninfo = JSON.parse(sessioninfo[0].innerText);
    }
    var skip = parseInt(getProperty(_domObject, 'skip', '0'));
    var _paramValue;
    var moduleName = _object.modulename;
    var _form = getPageByDom(_domObject).form.getPage(skip).form;
    //var _form = getPage(skip).form;
    var tagElement = 'iframe';

    if('_platform' in _object && 'noiframe' in _object && _object['noiframe'] == true /*&& _object['_platform'] == 'd3'*/){
        //TODO: все дочерние отчеты
        tagElement = 'div';
    }
    var element = document.createElement(tagElement);
    element.setAttribute('type','report');
    var url= {
        '_rep_code' : _object._rep_code,
        '_rep_id' : _object._rep_id
    }
    element.setAttribute('name',getProperty(_domObject,'name','unknownName'));
    if(tagElement == 'iframe'){
        element.setAttribute('height','940');
        element.setAttribute('scrolling','yes');
        element.setAttribute('frameborder','0');
        element.setAttribute('marginheight','0');
        element.setAttribute('marginwidth','0');
        element.setAttribute('autoheight','true');
    }
    element.setAttribute('style','background-Color:#FFFFFF;width:100%;height: inherit;');
    element.vars = {};/**переменные для передачи в отчет**/
    element.Events={
        'onshow':[function(_window){
            for(var rootDocument = window;'frameElement' in rootDocument && rootDocument.frameElement;){
                rootDocument = window.frameElement;
            }

        }
        ],//событие для вызова как отчет загрузился
        'onresize':[]//событии для вызова при изменение размера всего документна
    }
    element.currWindow = window;
    if(!empty(moduleName)){
        _domObject.type = parseInt(_form.getPropertySysInfoByName(moduleName,'type','0'));
        if(!(+_domObject.type==1 || +_domObject.type == 5)){
            executeModule(moduleName,function (_data){_domObject.innerHTML=_data;},function (){_domObject.innerHTML='Не возможно построить отчет';},null,true,skip);
            return true;
        }
    }
    if(empty(moduleName)){
        _domObject.type=1;
        for(var index=0;index<_params.length;index++){
            if(_params[index].indexOf(':') > 0){
                var par = _params[index].split(':');
                element.vars[par[0]] = ((_object[par[1]])?_object[par[1]]:_form.getVar(par[1]));
            }
            else{
                _paramValue = _form.getVar(_params[index]);
                if (_paramValue === null) {
                    _paramValue = '';
                }
                element.vars[_params[index]] = ((_object[_params[index]])?_object[_params[index]]:_paramValue);
            }
        }
    }else if(+_domObject.type==1 || +_domObject.type == 5){
        var _data = _form.getSysInfoByName(moduleName);
        var _url = ''
        for(var _propertyName in _data){
            if(['_rep_id','_rep_code'].indexOf(_propertyName) > -1){
                url[_propertyName] = _data[_propertyName];
            }
            element.vars[_propertyName] = _data[_propertyName];
        }
    }
    var param_map = [
        'STR',
        'NUM',
        'DAT',
        'LOG'
    ];
    var storedProcParam = {};
    for(var index=0;index < reportparam.length; index++){
        var par_get_code = reportparam[index]['PAR_CODE'];
        if(reportparam[index].LINK_TYPE == '4'){
            par_get_code = 'REP_ID';
        }
        if(reportparam[index].LINK_TYPE == '7'){
            par_get_code = 'REP_UNITCODE';
        }
        if(!(par_get_code in element.vars)){
            element.vars[par_get_code] = '';
        }

        switch (reportparam[index].LINK_TYPE){
            case '3':
                element.vars[par_get_code] = sessioninfo.LPU;
            case '6':
                /*тип связи - константа*/
                element.vars[par_get_code] = reportparam[index]['DEF_'+param_map[reportparam[index]['PAR_TYPE']]+'_VALUE'];
                break;
            case '3':
                /* логический */
                element.vars[par_get_code] = function(){
                    if(par_get_code in element.vars && (element.vars[par_get_code] != "0"  && !D3Api.empty(element.vars[par_get_code]))){
                        return 1;
                    }else{
                        return 0;
                    }
                }();
                break;
            case '1':
                /* число */
                element.vars[par_get_code] = D3Api.string2Float(element.vars[par_get_code]);
                break;
        }
        if(reportparam[index]['NULLABLE'] == '0' && element.vars[par_get_code] == ''){
            D3Api.showAlert("Параметр " + par_get_code + " отчета " + reportinfo['REP_NAME'] + " не может быть null.");
            return false;
        }
        if(!D3Api.empty(reportparam[index]['STOREDPROC_PAR'])){
            storedProcParam[reportparam[index]['STOREDPROC_PAR']] = element.vars;
        }
        /* еще доделать exeStoredProc */

    }
    var src = '';
    for(var prop in url){
        if(src != ''){
            src += "&";
        }
        src += prop+"="+url[prop];
    }
	if (typeof _object['_blob'] === "undefined") {
		_object['_blob'] = {};
	}
	if (Object.keys(_object['_blob']).length > 0) {
		for(var prop in _object['_blob']){
			if(src != ''){
				src += "&";
			}
			src += prop+"="+_object['_blob'][prop];
		}
	} else {
		_object['_blob'] = {
			_rep_body_id: 0,
			_unit: '',
			_field: ''
		};
	}

    if('cache_enabled' in D3Api){
        if(src != ''){
            src += "&";
        }
        src += 'cache_enabled='+D3Api.cache_enabled;
    }
    if('session_cache' in D3Api){
        if(src != ''){
            src += "&";
        }
        src += 'session_cache='+D3Api.session_cache;
    }


    src = src.replace(/"/g, '&quot;');
    element.setAttribute('src','getreport.php?theme='+window.SYS_current_theme+'&'+src);
    _domObject.elementReport = element;
    _domObject.appendChild(element);
    if(tagElement == 'div'){
        element.classList.add('noIframe');
		if (+_object['_blob']['_rep_body_id'] && _object['_blob']['_unit'] && _object['_blob']['_field']) {
			openWindow({
				name: 'Reports/blobReport',
				reportid: reportinfo['ID'],
				rep_body_id: +_object['_blob']['_rep_body_id'],
				unit: _object['_blob']['_unit'],
				field: _object['_blob']['_field'],
				vars: element.vars,
				nooverflow: true
			}, element).addListener('onshow',function(){
				element.subForm = element.childNodes[0];
				for(var i = 0,len = element.Events['onshow'].length ; i < len ; i++){
					element.Events['onshow'][i](element.subForm);
				}
			});
		} else if(_object['_platform'] == 'd3'){
            D3Api.showForm(_object['_path'],
                element, {
                    vars: element.vars,
                    onshow: function() {
                        element.subForm  = element.firstElementChild.D3Form;
                        for(var i = 0,len = element.Events['onshow'].length ; i < len ; i++){
                            element.Events['onshow'][i](element.subForm);
                        }
                    }
                });
        }else{
            if(reportinfo['REP_TYPE'] == '5'){//WEB-конструктор
                openWindow({
                    name: 'Reports/webReport',
                    reportid: reportinfo['ID'],
                    vars: element.vars,
                    nooverflow: true
                }, element).addListener('onshow',function(){
                    element.subForm = element.childNodes[0];
                    for(var i = 0,len = element.Events['onshow'].length ; i < len ; i++){
                        element.Events['onshow'][i](element.subForm);
                    }
                });
            }else{
                openWindow({
                    name: _object['_path'],
                    vars: element.vars
                }, element, undefined, undefined, undefined, true) .addListener('onshow', function() {
                    element.subForm = element.childNodes[0];
                    for(var i = 0,len = element.Events['onshow'].length ; i < len ; i++){
                        element.Events['onshow'][i](element.subForm);
                    }
                });
            }
        }
    }else{
        element.Events['onresize'].push(function(_window){
            if('frameElement' in window && window.frameElement){
                element.style.height = _window.document.body.offsetHeight + 50 + 'px'
            }
        })
    }
}
function exportReportToXls(_reportName, extension, use_old_module) {
    if (!isExistsControlByName(_reportName, false))
        return false;
    var _domObject = getControlByName(_reportName);
    var frames = _domObject.getElementsByTagName('iframe');
    var ext_name = '';
    if (!empty(extension)) {
        ext_name = extension.toLowerCase();
    } else {
        ext_name = 'xls';
    }
    if (empty(use_old_module)) {
        use_old_module = false;
    }
    var f = 'Отчет.' + ext_name;
    var isStatReport = false;
    if (frames[0].contentWindow.$_REPORT_NAME){
        f = frames[0].contentWindow.$_REPORT_NAME + '.' + ext_name;
        if('$_REPORT_CODE' in frames[0].contentWindow && frames[0].contentWindow.$_REPORT_CODE == 'StatReportAll'){
            isStatReport = true;
        }
    }
    savePrintLogs(frames[0], 'EXCEL');

    var tpl = '';
    var reportForm = '';
    var report = frames[0].contentDocument.body.querySelector('[report="true"] div');

    if (!empty(report)) {
        tpl = report.getAttribute('template');
        var filename = f;
    }

    if (!empty(tpl) && !empty(report.D3Form)) // D3
    {
        reportForm = report.D3Form;
        var tbs = {};

        tbs['template'] = tpl;

        if (reportForm.existsFunction('prepareDataTBS')) {
            tbs['data'] = D3Api.JSONstringify(reportForm.callFunction('prepareDataTBS'));
        } else {
            var tbsData = {vars: {}};
            for (var v in reportForm.vars) {
                if (!reportForm.vars.hasOwnProperty(v)) {
                    continue
                }
                if (typeof (reportForm.vars[v]) == 'object')
                    continue;
                tbsData.vars[v] = reportForm.vars[v];
            }
            for (var a in reportForm.actions) {
                if (!reportForm.actions.hasOwnProperty(a)) {
                    continue;
                }
                tbsData[a] = reportForm.actions[a].data;
            }
            for (var d in reportForm.dataSets) {
                if (!reportForm.dataSets.hasOwnProperty(a)) {
                    continue;
                }
                tbsData[d] = reportForm.dataSets[d].data;
            }
            tbs['data'] = D3Api.JSONstringify(tbsData);
        }

        requestServerModule(true, 'System/system&Module=tbs', tbs, function (xml) {
            var resultArray = parseXmlResponse(xml, 'module');

            if (resultArray.sys_error)
                return;

            if (resultArray['filename'] != '') {
                document.location = 'getfile.php?file=' + resultArray['filename'] + '&filename=' + filename;
            } else {
                showError('Файл не указан.');
            }
        }, emptyFunction, null, true);
    } else if (!empty(tpl) && !empty(report.form) && empty(report.D3Form)) // МИС
    {
        reportForm = report.form;
        var tbs = {};

        tbs['template'] = tpl;

        if (typeof (reportForm.getNamespace().prepareDataTBS) == 'function') {
            tbs['data'] = JSON.stringify(reportForm.getNamespace().prepareDataTBS());
        }

        requestServerModule(true, 'System/system&Module=tbs', tbs, function (xml) {
            var resultArray = parseXmlResponse(xml, 'module');

            if (resultArray.sys_error)
                return;

            if (resultArray['filename'] != '') {
                document.location = 'getfile.php?file=' + resultArray['filename'] + '&filename=' + filename;
            } else {
                showError('Файл не указан.');
            }
        }, emptyFunction, null, true);
    } else {
        var body = frames[0].contentDocument.body;
        var stylesArray = frames[0].contentWindow._SYS_REPORT_STYLES ? frames[0].contentWindow._SYS_REPORT_STYLES.split(';') : undefined;

        var moduleParams = {};
        var nativeFormatIndicator = report.querySelector('#NativeFormat');
        if (nativeFormatIndicator || isStatReport == true) {
            moduleParams['NATIVE'] = true;
            moduleParams['isStatReport'] = isStatReport;
            if(nativeFormatIndicator){
                moduleParams['RULES'] = nativeFormatIndicator.getAttribute('rules');
            }
        }
        if (use_old_module) {
            moduleParams['Module'] = 'saveToFileOld';
        }

        saveToFile(f, body, stylesArray, ext_name, moduleParams);
    }
}
function printReportByCode(_reportCode,_width,_height, _global, _caption, _settings) {
    if (_global == undefined) _global = 0;
    if (_settings == undefined) _settings = 0;
    return printReportByParam({_rep_code: _reportCode, _exp_id: +getVar('EXP_ID'), caption: _caption}, _width, _height, _global, _settings);
}
function printReportById(_reportId,_width,_height, _global, _caption, _settings) {
    if (_global == undefined) _global = 0;
    if (_settings == undefined) _settings = 0;
    return printReportByParam({_rep_id: _reportId, _exp_id: +getVar('EXP_ID'), caption: _caption}, _width, _height, _global, _settings);
}
function printReportByIdFromOtherLpu(_reportId, _lpu, _width,_height, _global, _caption, _settings) {
    if (_global == undefined) _global = 0;
    if (_settings == undefined) _settings = 0;
    return printReportByParam({
        _rep_id: _reportId,
		_exp_id: +getVar('EXP_ID'),
        caption: _caption,
        _rep_lpu: _lpu
    }, _width, _height, _global, _settings);
}
function printReportByParam(_reportData,_width,_height, _global,_settings) {
    if (_global == undefined) _global = 0;
    if (_settings == undefined) _settings = 0;
    var _page = new DNullPage();
    //Учитываем отчет
    addReportInGroup();
    requestServerAction(true,
        'System/system&Action=isNeedReportParam',
        _reportData,
        function (_xml) {
            if(!_xml){
                D3Api.debug_msg('данные не пришли.');
                return;
            }
            var _nodes = _xml.childNodes;
            if (!isObject(_nodes)) {
                showError('Ответ от сервера не удовлетворяет условиям целостности');
                return;
            }
            var _node;
            for (var index = 0; index < _nodes.length; index++) {
                if ((_node = _nodes[index]).nodeName.toLowerCase() == 'action') {
                    var resultArray = XmlDataToArray(_node, true);
                    if (resultArray.sys_error) return;
                    _reportData.REP_TYPE = resultArray['REP_TYPE'];
                    _reportData.FLAG = resultArray['FLAG'];
                    if ((+resultArray['REP_TYPE'] == 3)){
                        window.open('getreport.php?_rep_id=' + resultArray['REP_ID']);
                        return;
                    }
                    if(+resultArray['REP_TYPE'] == 10){
                        openD3Form('Lis/ReportConstruct/subforms/result', true, {
                            width : _width,
                            height: _height,
                            vars: {
                                      report_id : resultArray['REP_ID'],
                                      caption   : _reportData.caption
                                  }
                        });
                        return;
                    }
                    //Добавляем данные об отчете
                    if (addReportDataInGroup(_reportData, _global))
                        return;

                    if (resultArray['FLAG'] != '0' || +resultArray['REP_TYPE'] == 6) {
                        _reportData.name = 'Reports/run';
                        _reportData.vars = {SETTINGS: (_settings) ? true : false, _width: _width, _height: _height};
                        _page = openWindow(_reportData, true, 300, 300);
                    } else {
                        _reportData.name = 'Reports/showReport';
                        var l_Page = getPage();
                        if (l_Page.form)
                            for (var v_ind in l_Page.form.vars) {
                                if (!l_Page.form.vars.hasOwnProperty(v_ind)) {
                                    continue
                                }
                                if (v_ind.indexOf('rep_param') == 0) {
                                    _reportData[v_ind] = l_Page.form.vars[v_ind];
                                    if (_global == 1) {
                                        SYS_reportParams[v_ind] = l_Page.form.vars[v_ind];
                                    }
                                }
                            }

                        if (_global == 1) {
                            for (var v_ind_new in SYS_reportParams) {
                                if (SYS_reportParams.hasOwnProperty(v_ind_new)) {
                                    _reportData[v_ind_new] = SYS_reportParams[v_ind_new];
                                }
                            }
                        }

                        if (!empty(getVar('REP_ID'))) {
                            _reportData.REP_ID = getVar('REP_ID');
                        }

                        if (empty(_reportData._rep_code) && !empty(resultArray['REP_CODE'])) {
                            _reportData._rep_code = resultArray['REP_CODE'];
                        }

                        _reportData.vars = {SETTINGS: (_settings) ? true : false};
                        _reportData.onshow = function () {
                            if (getPage().getVar('modeIframe') == 'post' && getPage().submitIframe instanceof Function) {
                                getPage().submitIframe();
                            }
                        }
                        _page = openWindow(_reportData, true, _width, _height);

                    }
                }
            }
        },
        function (_xml, status) {
            showXmlError(_xml);
        },
        null, false);
    return _page;
}
function printSubReportByCode(dom,_reportCode,_width,_height, _global, _caption,_formData) {
    if (_global == undefined) _global = 0;
    return printSubReportByParam(dom, {_rep_code: _reportCode, caption: _caption}, _width, _height, _global, _formData);
}
function printSubReportById(dom,_reportId,_width,_height, _global, _caption,_formData) {
    if (_global == undefined) _global = 0;
    return printSubReportByParam(dom, {_rep_id: _reportId, caption: _caption}, _width, _height, _global, _formData);
}
function printSubReportByParam(dom,_reportData,_width,_height, _global,_formData) {
    if (_global == undefined) _global = 0;
    var _page = new DNullPage();
    requestServerAction(true,
        'System/system&Action=isNeedReportParam',
        _reportData,
        function (_xml) {
            if(!_xml){
                D3Api.debug_msg('данные не пришли.');
                return;
            }
            var _nodes = _xml.childNodes;
            if (!isObject(_nodes)) {
                showError('Ответ от сервера не удовлетворяет условиям целостности');
                return;
            }
            var _node;
            var resultArray = new Array();
            for (var index = 0; index < _nodes.length; index++) {
                if ((_node = _nodes[index]).nodeName.toLowerCase() == 'action') {
                    var resultArray = XmlDataToArray(_node, true);
                    if (resultArray.sys_error) return;

                    _reportData.REP_TYPE = resultArray['REP_TYPE'];
                    _reportData.FLAG = resultArray['FLAG'];

                    if (+resultArray['REP_TYPE'] == 3) {
                        window.open('getreport.php?_rep_id=' + resultArray['REP_ID']);
                        return;
                    }
                    if (resultArray['FLAG'] != '0') {
                        _reportData.name = 'Reports/run';
                        _page = openWindow(_reportData, true, 300, 300);
                    } else {
                        for (var fd in _formData) {
                            if (!_formData.hasOwnProperty(fd)) {
                                continue;
                            }
                            _reportData[fd] = _formData[fd];
                        }
                        _reportData.name = 'Reports/showSubReport';

                        _reportData.vars = {};
                        var l_Page = getPage();
                        if (l_Page.form)
                            for (var v_ind in l_Page.form.vars) {
                                if (!l_Page.form.vars.hasOwnProperty(v_ind)) {
                                    continue;
                                }
                                if (v_ind.indexOf('rep_param') == 0) {
                                    _reportData[v_ind] = function(){
                                        if(D3Api.empty(l_Page.form.vars[v_ind])){
                                            return '';
                                        }else{
                                            return l_Page.form.vars[v_ind];
                                        }
                                    }()
                                    if (_global == 1) {

                                        SYS_reportParams[v_ind] = function(){
                                            if(D3Api.empty(l_Page.form.vars[v_ind])){
                                                return '';
                                            }else{
                                                return l_Page.form.vars[v_ind];
                                            }
                                        }()
                                    }
                                }
                                _reportData.vars[v_ind] = function(){
                                    if(D3Api.empty(l_Page.form.vars[v_ind])){
                                        return '';
                                    }else{
                                        return l_Page.form.vars[v_ind];
                                    }
                                }()
                            }

                        if (_global == 1) {
                            for (var v_ind_new in SYS_reportParams) {
                                if (SYS_reportParams.hasOwnProperty(v_ind_new)) {
                                    _reportData[v_ind_new] = SYS_reportParams[v_ind_new];
                                }
                            }
                        }

                        if (!empty(getVar('REP_ID'))) {
                            _reportData.REP_ID = getVar('REP_ID');
                        }

                        if (empty(_reportData._rep_code) && !empty(resultArray['REP_CODE'])) {
                            _reportData._rep_code = resultArray['REP_CODE'];
                        }

                        _page = openWindow(_reportData, dom, _width, _height, undefined, true);

                    }
                }
            }
        },
        function (_xml, status) {
            showXmlError(_xml);
        },
        null, false);
    return _page;
}
var AcceptReport = false;
var ReportVarsPage = null;
var ReportsInGroup = 0;
var ReportsUid = 0;
var ReportsData = {};
var MultiReportSize = {};
function startMultiReportGroup(_width,_height,_skip) {
    AcceptReport = true;
    ReportVarsPage = getPage(_skip);
    MultiReportSize = {width: _width, height: _height, splice: false};
}
function addReportInGroup() {
    if (AcceptReport)
        ReportsInGroup++;
}
function addReportDataInGroup(_data,_global) {
    if ((!AcceptReport && ReportsInGroup == 0) || _data['FLAG'] != 0) {
        if (ReportsInGroup > 0) ReportsInGroup--;
        return false;
    }

    var ind = 'rep' + (ReportsUid++);
    ReportsData[ind] = {};
    for (var d in _data) {
        if (_data.hasOwnProperty(d)) {
            ReportsData[ind][d] = _data[d];
        }
    }

    //TODO: Возможно вынести в старт группы
    if (ReportVarsPage.form)
        for (var v_ind in ReportVarsPage.form.vars) {
            if (!ReportVarsPage.form.vars.hasOwnProperty(v_ind)) {
                continue;
            }
            if (v_ind.indexOf('rep_param') == 0) {
                ReportsData[ind][v_ind] = ReportVarsPage.form.vars[v_ind];
                if (_global == 1) {
                    SYS_reportParams[v_ind] = ReportVarsPage.form.vars[v_ind];
                }
            }
        }

    if (_global == 1) {
        for (var v_ind_new in SYS_reportParams) {
            if (SYS_reportParams.hasOwnProperty(v_ind_new)) {
                ReportsData[ind][v_ind_new] = SYS_reportParams[v_ind_new];
            }

        }
    }
    //////////

    if (!empty(ReportVarsPage.getVar('REP_ID'))) {
        ReportsData[ind].REP_ID = ReportVarsPage.getVar('REP_ID');
    }

    ReportsInGroup--;
    if (!AcceptReport && ReportsInGroup == 0)
        sendMultiReportGroup();

    return true;
}
function sendMultiReportGroup() {
    ReportsData.name = 'Reports/showMultiReport' + ((MultiReportSize.splice) ? 'Splice' : '');
    var win = openWindow(ReportsData, true, MultiReportSize.width, MultiReportSize.height);
    ReportVarsPage = null;
    ReportsData = {};
    MultiReportSize = {};
    return win;
}
function endMultiReportGroup(splice) {
    MultiReportSize.splice = splice;
    // 8-)
    if (ReportsUid > 9999999)
        ReportsUid = 0;
    if (AcceptReport) {
        AcceptReport = false;
        if (ReportsInGroup == 0)
            return sendMultiReportGroup();
    }
}
function execProcById(_ProcId, _Async) {
    if (_Async == undefined) _Async = true;
    execProcByParam({_up_id: _ProcId}, _Async);
}
function execProcByCode(_ProcCode, _Async) {
    if (_Async == undefined) _Async = true;
    execProcByParam({_up_code: _ProcCode}, _Async);
}
function execProcByParam(_Params, _Async) {
    _Params.name = 'UserProcs/run';
    _page = openWindow(_Params, true);
}
function printMultiReport(_reportsName,all) {

    if (!isExistsControlByName(_reportsName, false))
        return false;
    var _domObject = getControlByName(_reportsName);

    if (!all) {//печатать активную вкладку
        var tabname = getProperty(_domObject, 'activ_tabsheet', '');
        if (tabname != '') {
            printReport(tabname + '_TabSheet');
        }
    } else{//Все
        var tabbuttons = _domObject.querySelector('[cmptype="TabButtonContainer"]');
        var childs = tabbuttons.childNodes;
        var indx = 0;
        function setprint(){
            if(indx < childs.length){
                var tabname = getProperty(childs[indx], 'name', '');
                if(childs[indx].nodeType == 1){
                    printReport(tabname + '_TabSheet', true, function(){
                        ++indx;
                        setprint();
                    }, false, true);

                }else{
                    ++indx;
                    setprint();
                }
            }
        }
        setprint();
    }
}
function exportFromMultiReportToPdf(numReport) {
    exportReportToPdf("multireport", numReport - 1);
}
function exportFromReportToPdf(callback) {
    exportReportToPdf("report", 0, callback);
}
function exportReportToPdf(ctrlName, numReport, callback) {
    var filename = 'Отчет.pdf',
        frame = getControlByName(ctrlName).getElementsByTagName('iframe')[numReport],
        body = frame.contentDocument.body.cloneNode(true),
        images = body.querySelectorAll('img, image'),
        style = body.querySelectorAll('style'),
        options = body.querySelector('#PrintSetup');

    /*
     * atr.ps_shrinktofit - checkBox Сжать по ширине страницы
     * для стат отчетов
     * */
    if (options && options.attributes.ps_shrinktofit) {
        if (options.attributes.ps_shrinktofit.value == '1') {
            for (var i = 0; i < style.length; i++) {
                style[i].innerHTML = parseShrinktoFit(style[i].innerHTML);
            }
        }
    }
    removeNoPrint(body);
    base64EncodeImages(images);

    if (frame.contentWindow.$_REPORT_NAME)
        filename = frame.contentWindow.$_REPORT_NAME + '.pdf';

    exportRevertDomElementToHTML(body, 'pdf');

    getExportPdfFile(body.innerHTML, frame, ctrlName, filename, callback);
}

function base64EncodeImages(images) {
    if (images.length > 0) {
        var canvas = document.createElement("canvas");
        for (var i = 0; i < images.length; i++) {
            try {
                var img = images[i];
                if (img.naturalWidth === 0) {
                    continue; // image is not loaded yet
                }
                canvas.width = img.width;
                canvas.height = img.height;
                var ctx = canvas.getContext("2d");
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(img, 0, img.dataset.canvasY || 0, img.width, img.dataset.canvasHeight || img.height);
                img.src = canvas.toDataURL("image/png");
            } catch (e) {
                var formname = dom && dom.getAttribute && dom.getAttribute('formname');
                showScriptError(e, {formname: formname, script: 'base64EncodeImages'});
            }
        }
        canvas = null;
    }
}
function removeNoPrint(domEl) {
    var noPrintElements = domEl.querySelectorAll('.no-print');
    for (var i = 0; i < noPrintElements.length; i++ ) {
        var noPrintEl = noPrintElements[i];
        noPrintEl.parentNode.removeChild(noPrintEl);
    }
}

function exportRevertDomElementToHTML(body,format) {

    for (var j = 0; j < body.childNodes.length; j++) {
        var _item = body.childNodes[j];
        if (_item.nodeType == 1)
            _item = revertDomElementToHTML(_item, format);
    }
}
function getPrintSetupOptions(frame, ctrlName) {
    var ps = frame.contentDocument.getElementById('PrintSetup');
    var options = [];

    if (!ps)
        ps = getControlByName(ctrlName);

    for (var i = 0, attrs = ps.attributes, n = attrs.length; i < n; i++) {
        options.push(attrs.item(i).nodeName + ':' + attrs.item(i).nodeValue);
    }
    return options;
}
function getExportPdfFile(body, frame, ctrlName, filename, callback) {
    var reportStyles = frame.contentWindow._SYS_REPORT_STYLES ? frame.contentWindow._SYS_REPORT_STYLES : '';
    setVar('BODY', body);
    setVar('CSS', 'Styles/default;Components/Report/css/Report;' + reportStyles);
    setVar('OPTIONS', getPrintSetupOptions(frame, ctrlName).join(';'));
    executeModule('htmlToPdf', function () {
        if (getVar('FILE') != '') {
            if (callback) {
                callback(getVar('FILE'), filename, 'application/pdf');
            } else {
                open('getfile.php?file=' + getVar('FILE') + '&type=application/pdf&filename=' + encodeURIComponent(filename));
            }
        }
    });
    savePrintLogs(frame, 'PDF');
}
function exportMultiReportToXls(_reportsName, extension) {
    if (!isExistsControlByName(_reportsName, false))
        return false;
    var _domObject = getControlByName(_reportsName);
    var tabname = getProperty(_domObject, 'activ_tabsheet', '');
    if (tabname != '') {
        exportReportToXls(tabname + '_TabSheet', extension, 0);
    }
}
function printReport(_reportName,_silent,_callback,_closeAfterPrint, _isMultiPrint) {
    if (!isExistsControlByName(_reportName, false)){
        return (_callback) ? _callback(false) : false;
    }

        var _domObject = getControlByName(_reportName);
        var frames = _domObject.getElementsByTagName('iframe');
        var reportFrame = frames[0];
        var contentWindow = reportFrame.contentWindow;
        var contentDocument = reportFrame.contentWindow.document;
        var paperData = null;
        var marginTop = null;
        var marginBottom = null;
        var marginRight = null;
        var marginLeft = null;
        var orientation = null;
        /**
         * Формирую css
         **/
        var ps = contentDocument.getElementById('PrintSetup');
        if(!ps){
            /**
             * не указаны настройки печати.
             * создадим новый и укажем значение по умолчанию
             **/
            ps = contentDocument.createElement('div');
            ps.id = 'PrintSetup';
            ps.setAttribute('ps_paperData','9');//размер бумаги A4

        }

        if(!('printing' in contentDocument)){
            //данный отчет ранее не печатался
            var styleSheets = contentDocument.styleSheets;
            for(var i = 0; i < styleSheets.length ; i++){
                if(styleSheets[i].href){
                    var style = contentDocument.createElement('style');
                    var text = '';
                    //стили загружены с помощью href, тогда формию новый стиль с содержимым
                    if(typeof styleSheets[i].rules === 'undefined') {
                        //FF 52.9
                        for(var j = 0; j < styleSheets[i].cssRules.length ; j++){
                            text += styleSheets[i].cssRules[j].cssText+'\n';
                        }
                    } else {
                        for(var j = 0; j < styleSheets[i].rules.length ; j++){
                            text += styleSheets[i].rules[j].cssText+'\n';
                        }
                    }
                    style.innerHTML = text;
                    contentDocument.body.appendChild(style);
                }
            }

            if (!reportFrame) {
                showError('Во время печати произошла ошибка.');
                return (_callback) ? _callback(false) : false;
            }
            savePrintLogs(reportFrame, 'PRINT');


            contentDocument.printing = true;
        }
        if(ps){
            paperData = getProperty(ps,'ps_paperData','');//размер бумаги
            marginTop = getProperty(ps,'ps_marginTop','');//верхний отступ
            marginBottom = getProperty(ps,'ps_marginBottom','');//нижний отступ
            marginRight = getProperty(ps,'ps_marginRight','');//правый отступ
            marginLeft = getProperty(ps,'ps_marginLeft','');//левый отступ
            orientation = getProperty(ps,'ps_orientation','portrait');//ориентация
            //проверим устанавливали мы ранее размер в стиль
            var styleSetup = contentDocument.getElementById('styleSetup');
            if((styleSetup && styleSetup.tagName.toLocaleLowerCase() == 'style')){
                styleSetup.remove();
            }
            /**
             * css https://www.w3.org/TR/css-page-3/#page-size
             *
             * jsprintsetup https://github.com/edabg/jsprintsetup/wiki
             */
            var styletext = '@page {\nsize:';
            switch (paperData) {
                case 'A3':
                case '8'://настройка из jsprintsetup
                    styletext += ' A3 ';
                    break;
                case 'A4':
                case '9'://настройка из jsprintsetup
                case '10'://настройка из jsprintsetup
                    styletext += ' A4 ';
                    break;
                case 'A5':
                case '11'://настройка из jsprintsetup
                    styletext += ' A5 ';
                    break;
            }
            /**
             * css отступы https://www.w3.org/TR/css-page-3/#margin-boxes
             */
            styletext += orientation+';\n';
            if(marginTop){
                styletext += 'margin-top: '+marginTop+'mm;\n';
            }
            if(marginBottom){
                styletext += 'margin-bottom: '+marginBottom+'mm;\n';
            }
            if(marginRight){
                styletext += 'margin-right: '+marginRight+'mm;\n';
            }
            if(marginLeft){
                styletext += 'margin-left: '+marginLeft+'mm;\n';
            }
            styletext += '}\n';

            /** удаляю скрипты из документа **/
            for(var i = 0; i < contentDocument.scripts.length;i++){
                contentDocument.scripts[i].remove();
            }
        }
        if(D3Api.misDesktopApp.isConnect()){
            D3Api.misDesktopApp.addEvent('onclose',function(_uid){
                D3Api.misDesktopApp.removeEvent(_uid);
                if(_callback){
                    _callback(true)
                };
            })
            /* перебираем все iframe и переводит в div*/
            var clone = mergeCopyDOM(contentDocument);
            var childs = clone.head.childNodes;
            for(var i = childs.length - 1 ; 0 <= i ; i--){
                if(childs[i].nodeType == 1){
                    if(['script','link'].indexOf(childs[i].nodeName.toLocaleLowerCase()) > -1){
                        childs[i].remove();
                    }
                }
            }
            var doc = new XMLSerializer().serializeToString(clone);
            //соединение к локальному приложению удалась. передаем отчет.
            D3Api.misDesktopApp.sendCustomMessage(JSON.stringify({
                doc:doc,
                paperdata: paperData,//размер бумаги
                orientation: orientation,//ориентация
                margintop:marginTop,//верхний отступ
                marginbottom:marginBottom,//нижний отступ
                marginright:marginRight,//правый отступ
                marginleft:marginLeft,//левый отступ
                param:'webprocess'
            }));
        }else{
            //соединение к локальному приложению не удалось. устанавливаем параметры печати и печатаем через браузер.
            styleSetup = contentDocument.createElement('style');
            styleSetup.id = 'styleSetup';
            styleSetup .innerHTML = styletext;
            /** Добавим в конец. настройки в приоритете. **/
            contentDocument.body.appendChild(styleSetup);
            /* перебираем все iframe и переводит в div*/
            var clone = mergeCopyDOM(contentDocument);
            var childs = clone.head.childNodes;
            for(var i = childs.length - 1 ; 0 <= i ; i--){
                if(childs[i].nodeType == 1){
                    if(['script','link'].indexOf(childs[i].nodeName.toLocaleLowerCase()) > -1){
                        childs[i].remove();
                    }
                }
            }
            var frame1 = document.createElement('iframe');
            frame1.setAttribute('style','background-Color:#FFFFFF;');
            frame1.name = 'frameReport';
            document.body.appendChild(frame1);
            var frameDoc = frame1.contentWindow || frame1.contentDocument.document || frame1.contentDocument;
            frameDoc.document.write('<!DOCTYPE html><html>'+clone.documentElement.innerHTML+'</html>');
            setTimeout(function(){
                frameDoc.print();
                frameDoc.document.close();
                frame1.remove();
            },500);

            if(_callback){
                _callback(true)
            };
        }
}


function revertDomElementToHTML(_domObject, format) {
    var val;
    if (empty(_domObject)) return;
    if (format && _domObject.hasAttribute('export_style')) {
        try {
            var exportStyle = JSON.parse(_domObject.getAttribute('export_style'));
            if (isObject(exportStyle)) {
                var formatExportStyle = exportStyle[format] || exportStyle['all'];
                formatExportStyle && _domObject.setAttribute('style', _domObject.getAttribute('style') + ';' + formatExportStyle, false);
            }
        } catch (e) {
            console.error("Ошибка при разборе export_style. Элемент: " + _domObject + ", ошибка:", e.message + ".");
        }
    }

    if (getProperty(_domObject, 'sample', null) == "true") {
        removeDomObject(_domObject);
        return document.createTextNode('');
    }

    if (_domObject.style) {
        if (_domObject.style.display == 'none') {
            return removeDomObject(_domObject);
        }
    }

    switch (getProperty(_domObject, 'cmptype', null)) {
        case 'Edit': {
            val = document.createTextNode(getControlValue(_domObject));
            break;
        }
        case 'DateEdit': {
            val = document.createTextNode(getControlValue(_domObject));
            break;
        }
        case 'CheckBox': {
            if (getControlValue(_domObject) == 0 || getControlValue(_domObject) == '0' || empty(getControlValue(_domObject))) {
                val = document.createTextNode('Нет');
            } else {
                val = document.createTextNode('Да');
            }
            break;
        }
        case 'Label': {
            val = document.createTextNode(getControlCaption(_domObject));
            break;
        }
        case 'Button': {
            val = document.createTextNode(getControlCaption(_domObject));
            break;
        }
        case 'HyperLink': {
            val = document.createTextNode(getControlCaption(_domObject));
            break;
        }
        case 'PopupMenu': {
            _domObject.style.display = "none";
            break;
        }
        default: {
            if (_domObject.nodeType === 1) {
                var current = _domObject.firstChild;
                while (current) {
                    if (current.nodeType !== 1) {
                        current = current.nextSibling;
                    } else {
                        var next = current.nextSibling;
                        revertDomElementToHTML(current, format);
                        current = next;
                    }
                }
            }
            val = _domObject;
        }
    }
    return val;
}

function removeScriptTag(html) {
    if (html.nodeType !== 1) return html;
    if (html.tagName.toLowerCase() === 'script') {
        html.remove();
        return null;
    }

    if (html.childNodes) {
        for (var i = 0; i < html.childNodes.length; i++) {
            html.childNodes[i] = removeScriptTag(html.childNodes[i]);
        }
    }

    return html;
}
//TODO: костыль до лучших времен.
function mergeCopyDOM(_source){
    var doc = _source;
    if(_source.nodeType != 9){
        doc = _source.ownerDocument;
    }
    /**
     * переводим картинки на  ссылки base64
     */
    var images = doc.images;
    for(var j = 0; j < images.length ; j++){
        var img = images[j];
        if(!/data:([^>])+;base64/.test(img.src) && img.naturalWidth) {
            var c = doc.createElement('canvas');
            img.onload = function () {
                c.height = img.naturalHeight;
                c.width = img.naturalWidth;
                var ctx = c.getContext('2d');

                ctx.drawImage(img,0,0,c.width,c.height);
                var base64String = c.toDataURL();
                img.src = base64String;
            };
        }
    }

    var clone = doc.cloneNode(true);
    function frameContent(_originSource,_cloneSource){
        var originIframe = _originSource.querySelectorAll('iframe');
        var cloneIframe = _cloneSource.querySelectorAll('iframe');
        for(var i = 0 ; i < originIframe.length ; i++){
            var winCln = originIframe[i].contentWindow;
            var documentCln = originIframe[i].contentDocument;
            /**
             * переводим картинки на  ссылки base64
             */
            var images = documentCln.images;
            for(var j = 0; j < images.length ; j++){
                var img = images[j];
                if(!/data:([^>])+;base64/.test(img.src) && img.naturalWidth){
                    var c = documentCln.createElement('canvas');
                    c.height = img.naturalHeight;
                    c.width = img.naturalWidth;
                    var ctx = c.getContext('2d');

                    ctx.drawImage(img,0,0,c.width,c.height);
                    var base64String = c.toDataURL();
                    img.src = base64String;
                }

            }
            var clnIframe = documentCln.body.cloneNode(true);
            if('$_REPORT_CODE' in winCln){
                clnIframe.setAttribute('report_code', winCln['$_REPORT_CODE'])
            }
            if('$_REPORT_NAME' in winCln){
                clnIframe.setAttribute('report_name', winCln['$_REPORT_NAME'])
            }
            cloneIframe[i].parentNode.insertBefore(clnIframe,cloneIframe[i])
            frameContent(documentCln.body,clnIframe);
            cloneIframe[i].remove();
        }
    }
    frameContent(doc,clone);
    //делаю ползунки невидимыми в компонентах Report
    var styleOverHidd = 'overflow: hidden;';
    var rprts = clone.querySelectorAll('*[cmptype="Report"]');
    for(var i = 0; i < rprts.length ; i++){
        var report = rprts[i];
        var height = parseInt(rprts[0].style.height)+50;

        if(!report.hasAttribute('style')){
            report.setAttribute('style',styleOverHidd+'height:'+height+'px;');
        }else{
            report.setAttribute('style',report.getAttribute('style')+';'+styleOverHidd+'height:'+height+'px;');
        }
    }
    //элемент body должен быть единственным. пробежимся по всем объектам и заменим с body на div
    var searchBody = false;//нашелся первый body
    function replaceBodyToDiv(_dom){
        if(_dom.nodeType == 9){
            _dom = _dom.body;
        }
        if(_dom.nodeType == 1){
            if(_dom.tagName.toLocaleLowerCase() == 'body'){
                if(searchBody){
                    //body ранее уже нашлось пора заменять.
                    var div = document.createElement('div');
                    for(var i = 0 ; i < _dom.childNodes.length ; i++){
                        div.appendChild(_dom.childNodes[i].cloneNode(true));
                    }
                    if(_dom.hasAttribute('report_code')){
                        div.setAttribute('report_code',_dom.getAttribute('report_code'));
                    }
                    if(_dom.hasAttribute('report_name')){
                        div.setAttribute('report_name',_dom.getAttribute('report_name'));
                    }
                    div.setAttribute('reportcontent','true');
                    _dom.parentNode.insertBefore(div,_dom);
                    _dom.remove();
                    _dom = div;
                }else{
                    searchBody = true;
                }
            }
            if(_dom.tagName.toLocaleLowerCase() != 'script'){
                var scripts = [];
                for(var i = 0 ; i < _dom.childNodes.length ; i++){
                    replaceBodyToDiv(_dom.childNodes[i]);
                    if(_dom.childNodes[i].nodeType == 1 && _dom.childNodes[i].tagName.toLocaleLowerCase() == 'script'){
                        scripts.push(_dom.childNodes[i]);
                    }
                }
                for(var i = 0 ; i < scripts.length ; i++){
                    scripts[i].remove();
                }
            }

        }
    }
    replaceBodyToDiv(clone);
    return clone;
}

function saveToFile(_filename,_source,_cssFiles,_format, moduleParams) {
    var styleSrc = '';
    var pageParam = {
        fitToHeight: true
    };
    _source = removeScriptTag(_source);
    var form = typeof _source === "object" && 'querySelector' in _source ? _source.querySelector('*[cmptype="Form"]') : false;
    var isMultiple = form ? form.getAttribute('pagecontrol') : false;
    if(moduleParams && 'isStatReport' in moduleParams && moduleParams['isStatReport'] == true || isMultiple){
        //статистический отчет
        var clone = D3Api.createClone({
            originSource: _source,
            sync: true,
            isDisplayNoneRemove: !isMultiple
        });
        _source = [];
        //удаляем все скрипты
        var scripts = clone.querySelectorAll('*[cmptype="Script"]');

        for (var i = scripts.length - 1; 0 <= i; i--) {
            scripts[i].remove();
        }
        var printSetups = clone.querySelectorAll('#PrintSetup');
        if(printSetups.length > 0){
            if(hasProperty(printSetups[0],'ps_paperData')){
                pageParam['paperSize'] = getProperty(printSetups[0],'ps_paperData','9')
            }
            if(hasProperty(printSetups[0],'ps_orientation')){
                pageParam['orientation'] = getProperty(printSetups[0],'ps_orientation','portrait');
            }
            if(hasProperty(printSetups[0],'ps_marginTop')){
                pageParam['top'] = getProperty(printSetups[0],'ps_marginTop','1');
            }
            if(hasProperty(printSetups[0],'marginBottom')){
                pageParam['bottom'] = getProperty(printSetups[0],'marginBottom','1');
            }
            if(hasProperty(printSetups[0],'marginLeft')){
                pageParam['left'] = getProperty(printSetups[0],'marginLeft','0.75');
            }
            if(hasProperty(printSetups[0],'marginRight')){
                pageParam['right'] = getProperty(printSetups[0],'marginRight','0.75');
            }
        }
        for (var i = printSetups.length - 1; 0 <= i; i--) {
            printSetups[i].remove();
        }
        var printSetups = clone.querySelectorAll('#print-settings');
        for (var i = printSetups.length - 1; 0 <= i; i--) {
            printSetups[i].remove();
        }
        var splitcontents = clone.querySelectorAll('*[splitcontent="true"]');
        var splt_content = [];
        var splt_other = [];/* блок для не найденных по родителю */
        for(var i = 0; i < splitcontents.length ; i++){
            if(splitcontents[i].hasAttribute('isd3repeater')){
                continue;
            }
            var content = null;
            if(splitcontents[i].children.length == 1 && splitcontents[0].children[0].getAttribute('cmptype') == 'subreport'){
                content = splitcontents[i].children[0].querySelector('*[report="true"]');
                if(!content){
                    /* видимо отчет не найден и вывел сообщение "Форма не найдена." */
                    content = splitcontents[i].children[0].querySelector('*[cmptype="Report"]');
                }
            }else if(splitcontents[i].children.length > 1){
                content = splitcontents[i];
            }
            if(content){
                var id = splitcontents[i].getAttribute('content_id');
                var hid = splitcontents[i].getAttribute('content_hid');
                if(!hid){
                    splt_content.push({
                        id: id,
                        content:document.createDocumentFragment()
                    })
                    var dv = document.createElement('div');
                    dv.appendChild(D3Api.createClone({
                        originSource: content,
                        sync: true,
                        isDisplayNoneRemove: true
                    }));
                    splt_content[splt_content.length - 1].content.appendChild(dv);

                    for(var j = splt_other.length - 1; 0 <= j  ; j--){
                        for(var l = splt_content.length - 1; 0 <= l  ; l--){
                            if(splt_other[j].hid == splt_content[l].id){
                                splt_content[l].content.childNodes[0].appendChild( D3Api.createClone({
                                    originSource: splt_other[j].content,
                                    sync: true,
                                    isDisplayNoneRemove: true
                                }));
                                splt_other.splice(j, 1);
                                break;
                            }
                        }
                    }
                }else{
                    var isJoin = false;
                    for(var j = 0 ; j < splt_content.length ; j++){
                        if(splt_content[j].id == hid){
                            isJoin = true;
                            splt_content[j].content.childNodes[0].appendChild(D3Api.createClone({
                                originSource: content,
                                sync: true,
                                isDisplayNoneRemove: true
                            }));
                            break;
                        }
                    }
                    if(!isJoin){
                        splt_other.push({
                            id:id,
                            hid:hid,
                            content:content
                        })
                    }
                }
            }
        }
        var excel = new D3Api.Office.Spreadsheet.export('xlsx');
        for(var i = 0; i < splt_content.length ; i++){
            var content = splt_content[i].content.childNodes[0];
            var reportTable = typeof content === "object" && 'querySelector' in content ? content.querySelector('.report-table') : false;
            var caption = reportTable ? reportTable.getAttribute('excelcaption') : '';
            var param = {
                sheetname: caption ? caption : 'Лист' + (i),
                dom:content,
                autoWidth:true,
                pageSetup:pageParam
            }
            if('STAT_EXCEL_CELL_WIDTH' in D3Api){
                param['maxWidthCell'] = D3Api.STAT_EXCEL_CELL_WIDTH;
            }
            excel.setContent(param);

        }
        excel.save(!!isMultiple ? _filename.split('.')[0] : 'export');
        return true;
    }
    if (!Array.isArray(_source) && !empty(_source.childNodes)) {
        var clone = D3Api.createClone({
            originSource: _source,
            sync: true,
            isDisplayNoneRemove: true
        })
        clone.jsParent = getPage().form;

        removeNoPrint(clone);

        for (var j = 0; j < clone.childNodes.length; j++) {
            var _item = clone.childNodes[j];
            if (_item.nodeType == 1) {
                _item = revertDomElementToHTML(_item, _format);
            }
        }
        var stls = clone.getElementsByTagName('style');
        if (stls)
            stls = Array.prototype.slice.call(stls);
        var stl;
        while (stls && (stl = stls.shift())) {
            styleSrc += stl.textContent || stl.innerHTML;
            stl.parentNode.removeChild(stl)
        }
        _source = clone.firstElementChild.innerHTML;
    }
    var fileData = _filename.split('.');
    var _data = {
        DATA: _source,
        STYLE: styleSrc,
        FORMAT: fileData.pop().toUpperCase(),
        FILENAME: fileData.pop()
    };
    if (typeof (_cssFiles) != 'undefined') {
        for (var index = 0; index < _cssFiles.length; index++) {
            _data['CSS[' + index + ']'] = _cssFiles[index];
        }
    }
    _data['Module'] = 'saveToFile';
    if (moduleParams !== undefined) {
        Object.assign(_data, moduleParams);
    }
    if(!moduleParams || (!('NATIVE' in moduleParams)) || moduleParams['NATIVE'] !== true){
        if(_format == 'doc'){
            var msword = new D3Api.Office.WordProcessing.export('html');
            msword.setContent({
                'dom': _data['DATA'],
                'title':_filename
            })
            msword.save(_data.FILENAME);
        }else{
            var excel = new D3Api.Office.Spreadsheet.export('html');
            excel.setContent({
                'sheetname':'Первый лист',
                'dom':_data['DATA'],
                'style':_data['STYLE']
            });
            excel.save(_data.FILENAME);
        }
    }else{
        requestServerModule(true, 'System/system', _data, function (_xml) {
            if(!_xml){
                D3Api.debug_msg('данные не пришли.');
                return;
            }
            var _nodes = _xml.childNodes;
            if (!isNodeList(_nodes)) {
                showError('Ответ от сервера не удовлетворяет условиям целостности');
                return;
            }
            var _node;
            var resultArray = new Array();
            for (var index = 0; index < _nodes.length; index++) {
                if ((_node = _nodes[index]).nodeName.toLowerCase() == 'module') {
                    resultArray = XmlDataToArray(_node, true);
                    if (resultArray.sys_error) {
                        return;
                    }
                    if (resultArray['ID'] != '') {
                        open('getfile.php?file=' + resultArray['ID'] + '&type=application/vnd.ms-excel&filename=' + encodeURIComponent(_filename));
                    }
                    return;
                }
            }

        }, function (_xml, _status) {
            showXmlError(_xml);
        }, null, true, true);
    }
}

var supportedStyles = [
    'background-color',
    'border',
    'border-top',
    'border-bottom',
    'border-left',
    'border-right',
    'color',
    'number-format',
    'mso-number-format',
    'text-align',
    'vertical-align',
    'width',
    'overflow-wrap',
    'word-wrap',
];
var supportedTags = [
    'TH', 'TD', 'TABLE',
]
function inlineStyle(element) {
    if (supportedTags.indexOf(element.tagName) !== -1) {
        var styles = getComputedStyle(element);
        for (var styleName of supportedStyles) {
            if (styles.getPropertyValue(styleName)){
                element.style[styleName] = styles.getPropertyValue(styleName);
            }
        }
    }

    for (var j = 0; j < element.childNodes.length; j++) {
        var child = element.childNodes[j];
        if (child.nodeType === 1) {
            inlineStyle(child);
        }
    }
}

function parseShrinktoFit(s) {
    return s.replace(/padding:.+;/g, '') + '.stat_table {font-size: 8px;}';
}
function parseXmlResponse(_xml,_nameNode) {
    if (!isNodeList(_xml.childNodes) && !_xml.hasChildNodes()) {
        showError('Ответ от сервера не удовлетворяет условиям целостности');
        return;
    }
    var _nodes = _xml.childNodes;
    var _node;
    var resultArray = new Array();
    for (var index = 0; index < _nodes.length; index++) {
        if ((_node = _nodes[index]).nodeName.toLowerCase() == _nameNode) {
            resultArray = XmlDataToArray(_node, true);
            if (resultArray.sys_error) {
                break;
            }
            return resultArray;
        }
    }
    return resultArray;
}
/** функционал для выгрузки в эксел **/
function exportDataSetToExcel(_dataSetName,userFields,filename,_headerName,skip, _customFilter, _dataSetAsRange, _selectData) {
    var _page = getPage(skip);
    if (typeof (_page.form) == 'undefined') return;
    if (typeof (_headerName) == 'undefined') _headerName = '';
    var data = _page.form.getSysInfoByName(_dataSetName);
    if(!userFields){
        return false;
    }
    var postData = {};
    postData.name = _headerName;
    postData.Form = _page.form.name;
    if (_selectData && !empty(_selectData.data)) {
        data.selectData = _selectData;
    }
    if('mode' in data && (data['mode'] == 'Range' || _dataSetAsRange == true)){
        delete data['mode'];
    }
    if('_c' in data){
        delete data['_c'];
    }
    if('_s' in data){
        delete data['_s'];
    }
    data.DataSet = _dataSetName;
    requestDataSetThread(postData.Form + _page.form.getUrlFormData(), data, function(_nodesArr){
        if (!_page) {
            //форму успели закрыть
            return;
        }
        if(!_nodesArr){
            D3Api.debug_msg('данные не пришли.');
            return;
        }

        var excel = new D3Api.Office.Spreadsheet.export('xlsx');
        var sheet1 = excel.addSheet(filename||'Лист 1');
        /* устанавливаем значение в ячейку */
        function setCellValue(_coord, _value, _style){
            sheet1.setCellValue(_coord,_value).setStyleArray(_style||{
                border:{
                    'all': {
                        borderWidth: 1 ,
                        borderStyle: 'thin'
                    }
                },
                text:{
                    wraptext:true
                }
            });
        }
        var currentRow = 0;
        /* установим все кастом фильтры */
        if(_customFilter && Array.isArray(_customFilter)){
            for(var i = 0 ; i < _customFilter.length ; i++){

                setCellValue.apply(this, [
                    'A'+D3Api.Office.Spreadsheet.getRow(i),
                    _customFilter[i].name+':',
                    function(){
                        if('style' in _customFilter[i]){
                            if('name' in _customFilter[i].style){
                                return  _customFilter[i].style.name;
                            }
                        }
                        return undefined;
                    }()
                ]);
                setCellValue.apply(this, [
                    'B'+D3Api.Office.Spreadsheet.getRow(i),
                    _customFilter[i].value,
                    function(){
                        if('style' in _customFilter[i]){
                            if('value' in _customFilter[i].style){
                                return  _customFilter[i].style.value;
                            }
                        }
                        return undefined;
                    }()
                ]);
                ++currentRow;
            }
            setCellValue('A'+D3Api.Office.Spreadsheet.getRow(_customFilter.length + 1),'');
            setCellValue('B'+D3Api.Office.Spreadsheet.getRow(_customFilter.length + 1),'');
            ++currentRow;
        }
        /* установить заголовки к таблице*/
        var _cell = 0;
        if(Array.isArray(userFields)){
            for(var i = 0; i < userFields.length ; i++){


            }
            ++currentRow;
        }else if(typeof userFields == 'object'){

            for (var property in userFields) {
                if (userFields.hasOwnProperty(property)) {
                    if(typeof userFields[property] == 'string'){
                        setCellValue(D3Api.Office.Spreadsheet.getColumn(_cell)+D3Api.Office.Spreadsheet.getRow(currentRow),userFields[property]);
                    }else{
                        setCellValue(D3Api.Office.Spreadsheet.getColumn(_cell)+D3Api.Office.Spreadsheet.getRow(currentRow),userFields[property].caption);
                    }
                    ++_cell;
                }
            }
            ++currentRow;
        }
        /* установим автофильтр */
        var sum = 0;
        sheet1.setAutoFilter('A'+(currentRow)+":"+D3Api.Office.Spreadsheet.getColumn(_cell - 1)+(currentRow));
        _nodesArr.forEach(function(_rootNode) {
            if (!_rootNode) return;

            var _nodes = _rootNode.childNodes;
            for (var index = 0; index < _nodes.length; index++) {
                var _node = _nodes[index];
                switch (_node.nodeName.toLowerCase()) {
                    case 'dataset': {
                        for (var jndex = 0; jndex < _node.attributes.length; jndex++) {
                            if (_node.attributes[jndex].name == 'name') {
                                var _dataArray = DataSetXmlDataToArray(_node, 0, false);
                                sum += _dataArray.length;
                                for(var i = 0; i < _dataArray.length ; i++){
                                    _cell = 0;
                                    for (var property in userFields) {
                                        if (userFields.hasOwnProperty(property)) {
                                            if(!(property in _dataArray[i])){
                                                _dataArray[i][property] = '';
                                            }
                                            setCellValue(D3Api.Office.Spreadsheet.getColumn(_cell)+D3Api.Office.Spreadsheet.getRow(currentRow + +_dataArray[i]['X_ROWNUM_'] - 1),_dataArray[i][property]||'');
                                            ++_cell;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        });
        var _sum = 'Всего: ' + sum + ' записей.';
        sheet1.setCellValue(D3Api.Office.Spreadsheet.getColumn(0)+D3Api.Office.Spreadsheet.getRow(sum + currentRow),_sum);


        var indx = +sheet1.getMinColumn();
        var max = +sheet1.getMaxColumn();

        if('EXCEL_CELL_WIDTH' in D3Api){
            for(; indx <= max ; indx++){
                sheet1.setMaxColumnWidth(D3Api.Office.Spreadsheet.getColumn(indx),D3Api.EXCEL_CELL_WIDTH);
                /* установим авто высоту */
                var indx1 = +sheet1.getMinRow();
                var maxRow = +sheet1.getMaxRow();
                for(; indx1 <= maxRow ; indx1++){
                    sheet1.setAutoHeight({
                        row: D3Api.Office.Spreadsheet.getRow(indx1)
                    });
                }

            }
        } else {
            for(; indx <= max ; indx++){
                sheet1.setAutoWidth({
                    'column': D3Api.Office.Spreadsheet.getColumn(indx)
                })
            }
        }

        sheet1.setSetupPage({
            fitToHeight:true
        })
        !empty(filename) ? excel.save(filename) : excel.save();
    }, null, _page);
}

function exportMultiDataSetToExcel(dataSetsArray, filename, skip) {
    var _page = getPage(skip);
    if (typeof (_page.form) === 'undefined') return;
    if (typeof (_headerName) === 'undefined') _headerName = '';
    var url = '';
    var postData = {};
    var load = false;
    for (var ds in dataSetsArray) {
        if (!dataSetsArray.hasOwnProperty(ds)) {
            continue;
        }
        var data = _page.form.getSysInfoByName(ds);
        for (var property in dataSetsArray[ds]) {
            if (!dataSetsArray[ds].hasOwnProperty(property)) {
                continue;
            }
            if (property == "_returnCount") {
                postData['userFields[' + ds + '][sysinfo][returnCount]'] = true;
                delete (property);
            } else {
                postData['userFields[' + ds + '][' + property + ']'] = dataSetsArray[ds][property];
            }
        }
        for (var property in data) {
            if (data.hasOwnProperty(property)) {
                if (property !== 'mode') postData['userFields[' + ds + '][sysinfo][' + property + ']'] = data[property];
            }
        }
    }
    postData.name = filename;
    postData.Form = _page.form.name;
    requestServerModule(true, 'System/system&Module=excel&multi=true' + _page.form.getUrlFormData() + url, postData, function (xml) {
        var resultArray = parseXmlResponse(xml, 'module');
        var loadFlag = false;
        if (resultArray.sys_error) return;
        if (resultArray['filename'] !== '' && resultArray['filename'] !== undefined) {
            if (!resultArray['returnCount']) {
                loadFlag = true;
            } else if (confirm('Выгружено ' + resultArray['returnCount'] + ' записей. Сохранить файл?')) {
                loadFlag = true;
            }
            if (loadFlag) {
                document.location = 'getfile.php?file=' + resultArray['filename'] + '&filename=' + encodeURIComponent(filename) + '.xls';
            }
        } else {
            showError('Файл не указан.');
        }
    }, emptyFunction, null, true);
}
/** ***************************************** **/
function HideMainMenu() {
    var h = document.getElementById('_mainHeader');
    if (h) {
        removeClass(h, 'OpenHeader');
        removeClass(h, 'CloseHeader');
        addClass(h, 'HideHeader');
    }
    wndResize();
}
function ShowMainMenu() {
    var h = document.getElementById('_mainHeader');
    if (h) {
        removeClass(h, 'CloseHeader');
        removeClass(h, 'HideHeader');
        addClass(h, 'OpenHeader');
    }
    wndResize();
}

function runCalcSize(calc_dom,size_dom) {
    if (!calc_dom) calc_dom = document;
    if (!size_dom) size_dom = document;

    if (!calc_dom.querySelector || !calc_dom.querySelectorAll)
        return;

    if (!BROWSER.ff) {
        runCalcOnResize();
        return;
    }

    var cH = calc_dom.querySelectorAll('[calc_height]');
    var cW = calc_dom.querySelectorAll('[calc_width]');

    if (!cH.length && !cW.length) {
        runCalcOnResize();
        return;
    }
    var cacheSelect = {};

    function getS(cssSel, wh) {
        cacheSelect[cssSel] = (cacheSelect[cssSel]) ? cacheSelect[cssSel] : size_dom.querySelector(cssSel);
        return (!cacheSelect[cssSel]) ? 0 : ((wh == 'w') ? cacheSelect[cssSel].offsetWidth : cacheSelect[cssSel].offsetHeight);
    }

    for (var i = 0; i < cW.length; i++)
        cW[i].style.display = 'none';
    for (var i = 0; i < cH.length; i++)
        cH[i].style.display = 'none';

    for (var i = 0; i < cH.length; i++) {
        var h = cH[i].getAttribute('calc_height');
        var parent = cH[i].parentNode.offsetHeight;
        if (h != '')
            cH[i].style.height = eval(h.replace(/#(.+?)#/gi, 'getS("$1","h")')) + 'px';
    }
    for (var i = 0; i < cW.length; i++) {
        var w = cW[i].getAttribute('calc_width');
        var parent = cW[i].parentNode.offsetWidth;
        if (w != '')
            cW[i].style.width = eval(w.replace(/#(.+?)#/gi, 'getS("$1","w")')) + 'px';
    }

    for (var i = 0; i < cW.length; i++)
        cW[i].style.display = '';
    for (var i = 0; i < cH.length; i++)
        cH[i].style.display = '';

    runCalcOnResize();
}

function runCalcOnResize() {
    var cR = document.body.querySelectorAll('[calc_onresize]');

    for (var i = 0; i < cR.length; i++) {
        // если элемент не видим то смысла ресайзить его нет
        if (cR[i].offsetHeight === 0 || cR[i].offsetWidth === 0) {
            continue;
        }
        if (!cR[i].calcOnResize) {
            var cRE = getProperty(cR[i], 'calc_onresize', false);

            if (cRE) {
                cR[i].calcOnResize = new Function('dom', cRE);
            }
        }
        if (cR[i].calcOnResize instanceof Function) {
            try {
                cR[i].calcOnResize.call(cR[i]);
            } catch (e) {
            }
        }
    }
}

window._GLOBAL_VARS = {};

function getGlobalVar(name) {
    return window._GLOBAL_VARS[name];
}
function setGlobalVar(name,value) {
    window._GLOBAL_VARS[name] = value;
}
function deleteGlobalVar(name) {
    delete window._GLOBAL_VARS[name];
}

function openWindow(formData,modal,_width,_height,otladka,notAddPage) {
    if (!modal || isObject(modal)) {
        var infolink = document.querySelector('.infoLink');

        if (infolink) {
            infolink.style.display = '';
        };
        if(window.SYS_current_theme == 'bars'){
            if (!modal) {
                SYS_pages = [];
                while (+SYS_pages_window.length) {
                    closeWindow(null, getPage());
                }
            } else {
                /** вызывает printSubReportByParam передает саб.отчет, удалять страницу не нужно**/
                var f = getMainForm(modal);
                if (f) {
                    f.beforeClose();
                }
            }
        }
    }
    wndResize();
    var _formName = '';
    var _data = {};
    var _formVars = '';
    var parentPage = null;
    if (!isObject(formData)) {
        _formName = formData;
    } else {
        if(D3Api.empty(_width) && ('width' in formData)){
            _width = formData['width'];
            delete formData['width'];
        }
        if(D3Api.empty(_height) && ('width' in formData)){
            _height = formData['height'];
            delete formData['height'];
        }
        if(D3Api.empty(otladka) && ('width' in formData)){
            otladka = formData['otladka'];
            delete formData['otladka'];
        }
        if(D3Api.empty(notAddPage) && ('notAddPage' in formData)){
            notAddPage = formData['notAddPage'];
            delete formData['notAddPage'];
        }
        _formName = formData.name;
        delete formData['name'];
        _formVars = formData.vars;
        delete formData['vars'];
        if(('parentPage' in formData)){
            /* форма была открыта */
            parentPage = formData['parentPage'];
            delete formData['parentPage'];

        }
        _data = formData;

    }
    if (!otladka) {
        otladka = 0;
    }

    _data['_openWindowData'] = {
        modal: modal,
        width: _width,
        height: _height,
        otladka: otladka,
        notAddPage: notAddPage,
        isComposition: false
    };
    if (_formName == 'UniversalComposition/UniversalComposition') {
        _data['_openWindowData']['otladka'] = 2;
        _data['_openWindowData']['isComposition'] = true;
    }
    incSYS_countShowState();
    var page = new DPage(_formName);

    if(parentPage && ('setChildPage' in parentPage)){
        parentPage.setChildPage(page);
    }
    if (_data.oncreate) {
        page.addListener('oncreate', function (_func) {
            return function () {
                addStackPage(page);
                var result = _func.apply(page.form, arguments);
                removeStackPage();
                return result;
            }
        }(_data.oncreate));
        delete _data.oncreate;
    }
    if (_data.onshow) {
        page.addListener('onshow', function (_func) {
            return function () {
                addStackPage(page);
                var result = _func.apply(page.form, arguments);
                removeStackPage();
                return result;
            }
        }(_data.onshow));
        delete _data.onshow;
    }
    if (modal === true) {
        document.body.style.overflow = 'hidden';
        page.addListener('onclose', function () {
            document.body.style.overflow = 'auto';
        });
    }
    page.setFormData(_data);
    page.form.formVarsOpen = {};
    if (isObject(_formVars)) {
        for (var key in _formVars) {
            if (!_formVars.hasOwnProperty(key)) {
                continue;
            }
            page.setVar(key, _formVars[key]);
            page.form.formVarsOpen[key] = _formVars[key];
        }
    }
    page.show({'vars': _formVars});
    page.addListener('onshow', function () { });
    page.addListener('onclose', function () {

    });
    //  setTimeout(function(){
    //    /* попытаться выполнить последним */
    //    page.addListener('onafterclose', function () {
    //        requestServerModule(false, 'System/system', {
    //            Module: 'CacheSessDelete',
    //            formCache: page.form.formCache,
    //            silent: true
    //        });
    //    });
    //  },0);
    return page;
}

function checkErrorRequest(r,file) {

    var errorRequest = {};
    var er = (r.responseXML) ? r.responseXML.getElementsByTagName('ERROR_REQUEST')[0] : false;
    if (!er){
        return true;
    }
    function openWinLog(){
        var formLogin = 'System/login';
        if(window.SYS_current_theme == 'new'){
            formLogin += '_new';
        }
        //проверить была ли ранее открыта окно авторизации. если ранее уже открылась то повторно не открывать.
        // подобные ситуция происходит когда делают несколько паралельно или последовательно обращение к Action, DataSet, Module
        if(!('isOpenWinLogin' in D3Api) || D3Api.isOpenWinLogin === false){
            D3Api.isOpenWinLogin = true;
            openWindow(formLogin, true).addListener('onafterclose',function () {
                D3Api.isOpenWinLogin = false;
            });
        }

    }
    function openWinLPU() {
        if(window.SYS_current_theme == 'new'){
            openWindow({ name: 'System/login_new',vars: {LPU: true}},true);
        }else if(window.SYS_current_theme == 'bars'){
            openWindow('System/lpu', true);
        }
    }

    var st = er.textContent;

    var er_txt = r.responseXML.getElementsByTagName('Error')[0];

    //Отмена загрузки формы
    if (file == 'getform')
        decSYS_countShowState();


    switch (st) {
        case 'ERROR_LOGIN_DB':
            errorRequest['ERROR_LOGIN_DB'] = 1;
            setGlobalVar('errorRequest', errorRequest);
            if (er_txt) {
                showError(er_txt.textContent).addListener('onclose', function () {
                    openWinLog();
                }, this, true);
            } else
                openWinLog();
            break;
        case 'WARNING_PASSWORD_EXPIRE_DB':
            errorRequest['WARNING_PASSWORD_EXPIRE_DB'] = 1;
            setGlobalVar('errorRequest', errorRequest);
            if (er_txt) {
                showError(er_txt.textContent).addListener('onclose',
                    function () {
                        if(confirm('Сменить пароль сейчас?')) {
                            openWindow('System/change_password', true).addListener('onclose',
                                function () {
                                    openWinLog();
                                });
                        } else {
                            openWinLPU();
                        }
                    }, this, true);
            } else {
                if(confirm('Сменить пароль сейчас?')) {
                    openWindow('System/change_password', true);
                }
            }
            break;
        case 'WARNING_PASSWORD_UPDATE_DB':
            errorRequest['WARNING_PASSWORD_UPDATE_DB'] = 1;
            setGlobalVar('errorRequest', errorRequest);
            if (er_txt) {
                showError(er_txt.textContent).addListener('onclose',
                    function () {
                        if(confirm('Сменить пароль сейчас?')) {
                            openWindow('System/change_password', true).addListener('onclose',
                                function () {
                                    openWinLog();
                                });
                        } else {
                            openWinLPU();
                        }
                    }, this, true);
            } else {
                if(confirm('Сменить пароль сейчас?')) {
                    openWindow('System/change_password', true);
                }
            }
            break;
        case 'ERROR_LOGIN_LPU':
            errorRequest['ERROR_LOGIN_LPU'] = 1;
            setGlobalVar('errorRequest', errorRequest);
            if (er_txt) {
                showError(er_txt.textContent);
            } else {
                if(window.SYS_current_theme == 'new'){
                    openWindow({ name: 'System/login_new',vars: {LPU: true}},true);
                }else if(window.SYS_current_theme == 'bars'){
                    openWindow('System/lpu', true);
                }

            }
            break;
        case 'ERROR_USER_LOCKED':
            errorRequest['ERROR_USER_LOCKED'] = 1;
            setGlobalVar('errorRequest', errorRequest);
            if (er_txt) {
                showError(er_txt.textContent);
            } else
                openWinLog();
            break;
        case 'ERROR_USER_DISABLED':
            errorRequest['ERROR_USER_DISABLED'] = 1;
            setGlobalVar('errorRequest', errorRequest);
            if (er_txt) {
                showError(er_txt.textContent).addListener('onclose', function () {
                    openWinLog();
                }, this, true);
            } else
                openWinLog();
            break;
        case 'ERROR_OTHER_USER_LOGIN':
            errorRequest['ERROR_OTHER_USER_LOGIN'] = 1;
            setGlobalVar('errorRequest', errorRequest);
            if (er_txt) {
                showError(er_txt.textContent).addListener('onclose', function () {
                    openWinLog();
                }, this, true);
            } else
                openWinLog();
            break;
        case 'WARNING_DDL_STRUCT_UPDATE':
            openD3Form('System/say_hello', true);
            break;
        default:
            errorRequest['OTHER_ERROR'] = 1;
            setGlobalVar('errorRequest', errorRequest);
            showError('Ошибка при запросе:\n' + er_txt.textContent + '\nНеизвестный код ошибки ответа: ' + st);
            break;
    }
    return false;
}
function getConfigValue(name,defaultValue) {
    if (window.SYS_CONFIG === null)
        return defaultValue;
    if (name === undefined)
        return window.SYS_CONFIG;
    var path = name.split('/');
    var res = window.SYS_CONFIG;
    for (var i = 0, c = path.length; i < c; i++) {
        if (res[path[i]] !== undefined)
            res = res[path[i]];
        else
            return defaultValue;
    }
    return res;
}

/**
 * @deprecated use D3Api.showAlert
 * @param message
 * @param title
 * @param width
 * @param height
 * @param callback
 */
function showAlert(message, title, width, height, callback) {
    D3Api.showAlert(message, callback, {title: title});
}

/**
 * @deprecated use D3Api.showConfirm
 * @param message
 * @param title
 * @param width
 * @param height
 * @param confirmedCallback
 * @param cancelledCallback
 * @param type
 */
function showConfirm(message, title, width, height, confirmedCallback, cancelledCallback, type) {
    D3Api.showConfirm(message, confirmedCallback, cancelledCallback,
        {
            title: title,
            button_confirm_caption: type === "yesno" ? "Да" : null,
            button_cancel_caption: type === "yesno" ? "Нет" : null
        });
}

function openD3Form(name,modal,data) {
    // Основная логика (почистить дубликаты функций app/Components/Window/system.js )
    if (!window['D3Api']) {
        alert('Не установлен D3.');
        return;
    }
    var _page = null;
    data = data || {};
    var cont = null;
    var oncreate = null;
    var onshow = null;
    if (name.indexOf('.') != -1) {
         let fragArr = name.split('.');
         if ((fragArr[fragArr.length-1]).toLowerCase() == 'html') {
             localStorage.setItem("D3(tmp):/"+name+":history_state", JSON.stringify({"form":name, "data":data}));
             if ((!modal)) {
                document.location.href = name;
             }
         }
         if ((fragArr[fragArr.length-1]).toLowerCase() == 'frm') {
            name = name.substring(0, name.length - 4);
         }
    }
    var funcCloseD3Form = function () {
        if (!empty(_page.d3Form)) {
            if (!_page.d3Form.destroyed) {
                _page.d3Form.close()
            }
        }
        if(!empty(_page.form) && !empty(_page.form.page)){
            if(!_page.form.page.destroyed){
                _page.form.page.close()
            }
        }
    }
    if (modal) {
        if (!data['request']) {
            data['request'] = {}
        }
        data['request']['modal'] = 1;
        data.modal_form = false;
        cont = new DWindow();
        _page = new DPage(name);
        _page.modal = modal;
        if (!modal) {
            var infolink = document.querySelector('.infoLink');

            if (infolink) {
                infolink.style.display = '';
            };
        };

        oncreate = function (form) {
            _page.form.vars = form.vars;
            _page.d3Form = form;
            _page.form.page = _page;
            _page.form.helpShow = true;
            _page.form.containerForm = form.DOM
            _page.form.helpUid = 'Form=' + name;
             // form.execScript("var hlpAct = createAction('getHelpInfo');\n" +
             //     "hlpAct.requestParams['form'] = 'System/get_help_info';\n" +
             //     "hlpAct.addSysInfoParam({put: 'helpurl', srctype: 'var', src: 'helpurl'});\n" +
             //     "hlpAct.addSysInfoParam({put: 'helpabspath', srctype: 'var', src: 'helpabspath'});\n" +
             //     "var _d = arguments[0];\n" +
             //     "hlpAct.execute(function(){_d.form.helpUrl = getVar('helpurl');_d.form.helpAbsPath = getVar('helpabspath');_d.form.showHelp();});\n"
             //     , [_page]);
            _page.d3Form.DWindow = cont;
            _page.form.callEvents('oncreate');
            _page.form.formCreate();
            cont.addListener('onclose', function () {
                funcCloseD3Form();
            }, null, false);
            cont.addListener('onresize', function () {
                D3Api.resize(true);
            }, null, false);

            _page.dispatchEvent('oncreate',form);
        };
        cont.getWinContent().D3FormCaption = {
            _setCaption: function (caption) {
                cont.setCaption(caption);
            },
            _setIcon: function () {
            },
            _show: function () {
            },
            _hide: function () {
            }
        }

        onshow = function (MainForm) {

            MainForm.setSizePos = function (onlySize, new_size) {
                if (new_size) {
                    data.width = new_size.width || data.width;
                    data.height = new_size.height || data.height;
                }

                var size = getDocumentSize();
                var pagesize = data.width || data.height;
                if (pagesize) {
                    var _hneed = false;
                    var _wneed = false;
                    if (data.width != 'auto' && (!data.width.indexOf || data.width.indexOf('%') == -1))
                        var l_Width = Math.min(data.width, size.width);
                    else {
                        var l_Width = data.width;
                        _wneed = true;
                    }
                    if (data.height != 'auto' && (!data.height.indexOf || data.height.indexOf('%') == -1))
                        var l_Height = Math.min(data.height, size.height);
                    else {
                        var l_Height = data.height;
                        _hneed = true;
                    }

                    cont.setSize(l_Width, l_Height);

                    if (_wneed || _hneed) {
                        cont.clearMaxSizeStyle();
                        var rws = getAbsoluteSize(cont.GetMainDOM());
                        l_Width = (_wneed) ? rws.width : l_Width;
                        l_Height = (_hneed) ? rws.height : l_Height;
                        pagesize = false;
                    }
                    if (!onlySize)
                        cont.setPosition(size.width / 2 - l_Width / 2, size.height / 2 - l_Height / 2);
                }
                MainForm.DOM.style.overflow = '';
                setDomSizeNoPx(MainForm.DOM, '', '100%');
                if (pagesize)
                    cont.clearMaxSizeStyle();
                var ws = getAbsoluteSize(cont.GetMainDOM());
                var s = getAbsoluteRect(MainForm.DOM);

                var dh = MainForm.DOM.scrollHeight - s.height;
                var dw = MainForm.DOM.scrollWidth - s.width;
                var dw = MainForm.DOM.scrollWidth - s.width;
                if (dw > 0) dw += 7;
                //if (dh > 0) dh+=2;
                cont.setSize(size.width, size.height);

                var l_Width = (_page.window_size && _page.window_size.width) || Math.min(ws.width + dw, size.width);
                var l_Height = (_page.window_size && _page.window_size.height) || Math.min(ws.height + dh, size.height);
                cont.clearMaxSizeStyle();
                cont.setSize(l_Width, l_Height);
                if (!onlySize)
                    cont.setPosition(size.width / 2 - l_Width / 2, size.height / 2 - l_Height / 2);
                MainForm.DOM.style.overflow = 'auto';

                cont.setVisible(true);
            }
            MainForm.setSizePos();
            D3Api.resize(true);
            _page.dispatchEvent('onshow');
        };
        SYS_lastPage = _page;
        addPage(_page);
    } else {
        if(window.SYS_current_theme == 'bars'){
            SYS_pages = [];
            while (+SYS_pages_window.length) {
                closeWindow(null, getPage());
            }
        }

        cont = new DDocument();
        incSYS_countShowState();
        _page = new DPage(name);
        //var _page=getPage();
        addPage(_page);
        SYS_lastPage = _page;
        var index = 0;
        while (index < SYS_pages.length) {
            if (SYS_pages[index] != _page) {
                SYS_pages.splice(index, 1);
            } else {
                index++;
            }
        }
        oncreate = function (form) {
            _page.form.vars = form.vars;
            _page.d3Form = form;
            _page.form.page = _page;
            _page.form.helpShow = true;
            _page.form.containerForm = form.DOM
            _page.form.helpUid = 'Form=' + name;
            /*
            form.execScript("var hlpAct = createAction('getHelpInfo');\n" +
                "hlpAct.requestParams['form'] = 'System/get_help_info';\n" +
                "hlpAct.addSysInfoParam({put: 'helpurl', srctype: 'var', src: 'helpurl'});\n" +
                "hlpAct.addSysInfoParam({put: 'helpabspath', srctype: 'var', src: 'helpabspath'});\n" +
                "var _d = arguments[0];\n" +
                "hlpAct.execute(function(){_d.form.helpUrl = getVar('helpurl');_d.form.helpAbsPath = getVar('helpabspath');_d.form.showHelp();});\n"
                , [_page]);
            */
            _page.form.callEvents('oncreate');
            _page.form.formCreate();
            _page.dispatchEvent('oncreate',form);
        };
        onshow = function (MainForm) {

            MainForm.setSizePos = function () {
                setDomSizeNoPx(cont.GetMainDOM(), '', '');
                /*немодальное окно по умолчанию открыаем как 100%*/
                var hpx = data.height || MainForm.DOM.defaultHeight || '100%';

                if (hpx != 'auto' && (!hpx.indexOf || hpx.indexOf('%') == -1)) {
                    hpx = hpx + 'px';
                    setDomSizeNoPx(MainForm.DOM, '', hpx);
                } else {
                    if (hpx == '100%')
                        setDomSizeNoPx(cont.GetMainDOM(), '', '100%');
                    else
                        setDomSizeNoPx(cont.GetMainDOM(), '', '');
                    setDomSizeNoPx(MainForm.DOM, '', hpx);
                }

                cont.setVisible(true);
                runCalcSize(cont.GetMainDOM(), cont.GetMainDOM());
            }
            MainForm.setSizePos();
            D3Api.resize(true);
            _page.dispatchEvent('onshow')
        };
        _page.reload = function () {
            if (SYS_current_theme !== 'bars') {
                var data = _page.form.data
                closeWindow(null, _page)
                var newPage = openD3Form(name, modal, data)
                newPage.form.data = data
            } else {
                openD3Form(name, modal, data)
            }
        }
    }

    if (!data.oncreate) {
        data.oncreate = oncreate;
    } else if (data.oncreate instanceof Function) {
        data.oncreate = [data.oncreate, oncreate];
    } else if (data.oncreate instanceof Array) {
        data.oncreate.push(oncreate);
    }
    if (!data.onshow) {
        data.onshow = onshow;
    } else if (data.onshow instanceof Function) {
        data.onshow = [data.onshow, onshow];
    } else if (data.onshow instanceof Array) {
        data.onshow.push(onshow);
    }
    var onclose = function () {
        if (!_page.destroyed) {
            closeWindow(0, _page);
        }
    };
    if (!data.onclose) {
        data.onclose = onclose;
    } else if (data.onclose instanceof Function) {
        data.onclose = [onclose, data.onclose];
    } else if (data.onclose instanceof Array) {
        data.onclose.unshift(onclose);
    }
    cont.show();
    data.notthread = true;
    _page.addListener('onshow', function () { });
    _page.addListener('onclose', function () {
        funcCloseD3Form();
        cont.close();
    });
    if (modal) {
        D3Api.showForm(name, cont.getContainer(), data);
    } else {
        // D3Api.showForm(name, undefined, data);
        // D3Api.showForm(name, document.body, data);
        // D3Api.showForm(name, document.getElementById('D3MainContainer'), data);
        document.body.innerHTML = '';
        D3Api.showForm(name, document.body, data);
    }
    return _page;
}
function savePrintLogs(iframe, type) {
    var reportWrapper = iframe.contentDocument.querySelector('[cmptype]');
    if (!isUndefined(reportWrapper) && reportWrapper != null && !isUndefined(reportWrapper.form)) {
        var get = reportWrapper.form.formVarsOpen;
        if (!empty(get['_REP_ID'])) {
            var reportId = get['_REP_ID'];
            delete get['_REP_ID'];
            requestServerModule(true, 'System/system&Module=savePrintLogs', {
                getArray: JSON.stringify(get),
                _REP_ID: reportId,
                _ACTION: type
            }, null, null, this, false, false);
        }
    }
}
function showLegend(title, rows, width, height) {
    openD3Form("UniversalForms/legend", true, {vars: {title: title, rows: rows}, width: width, height: height});
}
function clearControl(/*ctrl1, ctrl2, ... , ctrlN*/) {
    var args, i, n,
        ctrl, cmptype, input;

    args = Array.prototype.slice.call(arguments);
    n = args.length;

    for (i = 0; i < n; i++) {
        ctrl = args[i];
        if (typeof ctrl === 'string') {
            ctrl = getControlByName(ctrl);
        }

        cmptype = getProperty(ctrl, 'cmptype', 'unknownControl');
        switch (cmptype) {
            case 'CheckBox':
                CheckBox_SetValue(ctrl, getProperty(ctrl, 'valueunchecked', ''));
                break;
            default:
                if (cmptype === 'ComboBox') {
                    if (empty(ctrl.options)) {
                        continue;
                    }
                }
                _setControlProperty(ctrl, 'value', '');
                if (SYS_ControlActions[cmptype] && SYS_ControlActions[cmptype]['caption']) {
                    _setControlProperty(ctrl, 'caption', '');
                }
        }

        /* fix для масок, навешанных событий */
        input = getDomBy(ctrl, 'input');
        if (input) {
            if (input.focus) {
                input.focus();
            }
            if (input.blur) {
                input.blur();
            }
        }
    }
}
function printLicInfo() {
    var lic_info_control = document.getElementById('sys_lic_info');
    if (!isObject(lic_info_control)) {
        showError('Не найден контейнер для информации о лицензии');
        return;
    }
   // requestServerModule(false,
   //     'System/system',
   //     {Module: 'licinfo'},
   //     function (_licInfo) {
   //         var td = lic_info_control.parentNode;
   //         td.removeChild(lic_info_control);
   //         td.innerHTML = '<table id=sys_lic_info>' + _licInfo + '</table>' + td.innerHTML;
   //     },
   //     function () {
   //     }, null, false, false);
}
function printNotify(selector) {
    if (!D3Api) {
        return;
    }
    var formNotify = 'System/notify';
    if(window.SYS_current_theme == 'new'){
        formNotify += '_new';
    }
    setTimeout(function () {
        var container = document.querySelector(selector);
        if (container && !container.D3Container) {
            D3Api.showForm(formNotify, container);
        }
    }, 100);
}

function getParentDomByName(dom, name) {
    var dom = dom;
    while (dom.getAttribute('name') != name) {
        if (dom.tagName.toLowerCase() == 'html')
            return false;
        dom = dom.parentNode;
    }
    return dom;
}

function mergeAllReportsIntoOneFrame(_rootDomObject) {
    var listOfReportFrames = _rootDomObject.querySelectorAll('iframe[name ^= "report"]');
    listOfReportFrames = [].map.call(listOfReportFrames, function (item) {
        return item.contentDocument.activeElement;
    });

    return function (isFinishedPrint) {
        if (!isFinishedPrint) {
            //для начала создадим отдельный div для отсальных отчетов и запихаем его в первый frame
            var div = document.createElement('div');
            div.className = 'other-report';
            listOfReportFrames[0].appendChild(div);

            var otherReportsBlock = listOfReportFrames[0].querySelector('.other-report');
            var reportsContent = '';
            for (var i = 1; i < listOfReportFrames.length; ++i) {
                reportsContent += "<span style='page-break-after: always;'></span>";
                reportsContent += listOfReportFrames[i].firstElementChild.outerHTML;
            }

            otherReportsBlock.innerHTML += reportsContent;
        } else {
            listOfReportFrames[0].getElementsByClassName('other-report')[0].remove();
        }
    }
}

function cacheFile() {
    var forms = {};
    var _callObjects = [];
    function calcFormHash(data) {
        return data.Form + '.' + MD5.hex_md5(D3Api.JSONstringify(data));
    }
    function openForm(){

        for(var j = 0;_callObjects.length - 1 >=  j;){
            if(forms[_callObjects[j].path].status != 'ready'){
                ++j;
                continue;
            }
            if(!empty(_callObjects[j].data)){
                for (var i in _callObjects[j].data) {
                    if (_callObjects[j].data.hasOwnProperty(i)) {
                        forms[_callObjects[j].path].onReadyObj[0].formData[i] = _callObjects[j].data[i];
                    }
                }
            }
            var hname = calcFormHash(forms[_callObjects[j].path].onReadyObj[0].formData.request);

            D3Api.Base.callEvent('onShowForm', _callObjects[j].path, _callObjects[j].dom, forms[_callObjects[j].path].onReadyObj[0].formData, hname);
            forms[_callObjects[j].path].onReadyObj[0].showDom = _callObjects[j].dom;
            forms[_callObjects[j].path].form = new D3Api.D3Form(_callObjects[j].path, forms[_callObjects[j].path].content);
            forms[_callObjects[j].path].form.callEvent('onload');

            var form = forms[_callObjects[j].path].form;
            for (var i = 0, c = forms[_callObjects[j].path].onReadyObj.length; i < c; i++) {
                if (i > 0) {
                    form = new D3Api.D3Form(_callObjects[j].path, forms[_callObjects[j].path].content);
                }
                form.show(forms[_callObjects[j].path].onReadyObj[i].formData, forms[_callObjects[j].path].onReadyObj[i].showDom);
            }
            _callObjects.splice(j, 1);
        }
    }
    this.set = function (_filePath,_callBack) {
        var data = {
            'request': {
                'Form': _filePath
            },
            '_contextForm_': undefined,
            '_currentContext_': null
        }
        var hname = calcFormHash(data.request);
        if((_filePath in forms)){
            if(typeof _callBack == 'function'){
                _callBack();
            }
            return false;
        }
        forms[_filePath] = {
            content: null,
            status: null,
            onReadyObj: [{
                formData: data
            }]
        }
        D3Api.requestServer({
            url: 'getform.php',
            method: 'POST',
            urlData: {
                'Form': _filePath
            },
            onSuccess: function (xml) {
                forms[_filePath]['status'] = 'ready';
                forms[_filePath]['content'] = xml;
                if(typeof _callBack == 'function'){
                    _callBack();
                }
            },
            onError: function () {},
            contextObj: {
                name: _filePath,
                hash: hname,
                thread: undefined
            },
            responseXml: false
        });
        return true;
    }
    this.open = function (_filePath, _dom, _data) {
        _callObjects.push({
            path: _filePath,
            dom: _dom,
            data: _data
        })
        this.set(_filePath,function(){

            openForm();
        });
    }
}

/* New theme */
function pagesReducer(state, action) {
  switch (action.type) {
    case '__INIT__':
      state = {
        pages: [],
        active: -1,
      }
      break
    case 'SET_ACTIVE':
      if (action.value) {
        movePages(
          SYS_pages_window.indexOf(action.value),
          SYS_pages_window.length - 1
        )
      }
      state.active = state.pages.indexOf(action.value)
      break
    case 'ADD':
      state.pages.push(action.value)
      if (!action.value.hasOwnProperty('modal') || !action.value.modal) {
        state.active = state.pages.length - 1
      }
      break
    case 'REMOVE':
      var index = state.pages.indexOf(action.value)
      if (!action.value.hasOwnProperty('modal') || !action.value.modal) {
        state.active = state.active === index ? -1 : index
      }
      state.pages.splice(index, 1)
      break
  }

  return state
}
function createPagesStore(pagesReducer, initialState) {
  var state = pagesReducer(initialState, { type: '__INIT__' })
  var subscribers = []

  return {
    dispatch(action) {
      state = pagesReducer(state, action)
      subscribers.forEach((sub) => sub(action.type))
    },
    subscribe(callback) {
      subscribers.push(callback)
    },
    getState() {
      return state
    },
    getActive() {
      return state.active >= 0 ? state.pages[state.active] : null
    },
  }
}
var SYS_pages_store = undefined
if (SYS_current_theme !== 'bars') {
  SYS_pages_store = createPagesStore(pagesReducer, SYS_pages_window)
}

function getFormTheme() {
  var params =
    getPage().form.getFormSettings && getPage().form.getFormSettings('_WINDOW_')
  return params && params['theme']
}
function applyFormTheme(theme) {
  var page = this.page,
    d3form = page.d3Form;
  (d3form ? d3form.DOM : page.form.containerForm).setAttribute(
    'theme',
    theme || SYS_current_theme
  )
}
function changeFormTheme(theme) {
  var page = getPage(),
    form = page.form,
    d3form = getPage().d3Form,
    params = form.getFormSettings('_WINDOW_');
  (d3form ? d3form.DOM : form.containerForm).setAttribute(
    'theme',
    theme || SYS_current_theme
  )
  params['theme'] = theme
  form.saveFormSettings()
}

// принимает на вход инстанс Error и объект с данными для подсказки
function showScriptError(e, data = {}) {
    var lineNumber = e.lineNumber || (e.getLineNumber && e.getLineNumber()) || '';
    var columnNumber = e.columnNumber || (e.getColumnNumber && e.getColumnNumber()) || '';
    var helperInfo = data.formname ? 'На форме: ' + data.formname + '\n' : '';
    helperInfo += data.templates_code ? 'Код шаблона приема: ' + data.templates_code + '\n' : '';
    helperInfo += data.visit_tab ? 'Вкладка приема: ' + data.visit_tab + '\n' : '';
    helperInfo += data.container ? 'Контейнер вкладки приема: ' + data.container + '\n' : '';
    if (data.tabsheet) {
        var tabsheet_index = data.tabsheet.getAttribute('pageindex');
        var tabsheet_parent = data.tabsheet.closest('table');
        var tabsheet_ctrl = tabsheet_parent && tabsheet_parent.querySelectorAll('[cmptype="TabButton"]')[tabsheet_index - 1];
        var tabsheet_name = tabsheet_ctrl && tabsheet_ctrl.querySelector('.TabCenter').innerHTML;
        helperInfo += data.tabsheet ? 'Вкладка TabSheet: ' + tabsheet_name + ', "pageindex" вкладки:' + tabsheet_index + '\n' : '';
    }
    helperInfo += lineNumber ? 'Строка: ' + lineNumber + '\n' : '';
    helperInfo += columnNumber ? 'Столбец: ' + columnNumber + '\n' : '';
    showError('Ошибка' + '\n' + e.name +': ' + e.message + '\n' + helperInfo + 'При выполнении: ' + '\n' + data.script);
    console.error(e.stack || e.stacktrace || '');
};
function sanitize(string) {
    var map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        "/": '&#x2F;',
    };
    var reg = /[&<>"'/]/ig;
    return string.replace(reg, function(match) {
        return map[match]
    });
}

function copyToClipboard(text) {
    if (window.clipboardData && window.clipboardData.setData) {
        return clipboardData.setData("Text", text);
    } else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
        var textarea = document.createElement("textarea");
        textarea.textContent = text;
        textarea.style.position = "fixed";  // Prevent scrolling to bottom of page in MS Edge.
        document.body.appendChild(textarea);
        textarea.select();
        try {
            return document.execCommand("copy");  // Security exception may be thrown by some browsers.
        } catch (ex) {
            window.prompt("Скопировать текст: Ctrl+C, Enter", text);
            return false;
        } finally {
            document.body.removeChild(textarea);
        }
    }
}

function openReactApp(selector) {
    var iframe = document.querySelector(selector);
    if (iframe) {
        var urlSearch = new URLSearchParams(window.location.search);
        var isDev = urlSearch.has('webpackDevServer');
        var hasApi = urlSearch.has('reactApiHost');
        var apiUrl = hasApi ? urlSearch.get('reactApiHost') : '';
        var urls = {
            dev: 'dist',
            prod: 'build'
        };
        iframe.src = 'lis-app/' + (isDev ? urls.dev : urls.prod) + '/?' + (apiUrl ? 'reactApiHost=' + apiUrl : '');
    }
}

function rememberWindowSize(_type){
	var d=getPage().getContainer().rememberSize(_type);
}

function getWindowXml(_otladka){
   if(!_otladka || empty(document.getElementById('roleComposition').value) || empty(document.getElementById('roleShow').value)) _otladka=0;
   var s = `  <div name="overlow" class="win_overlow"></div>
              <table class="window WinContent" name="modal_win" style="left:0;top:0; height:80%; width:90% ;border-collapse: collapse; ext-indent: initial; border-spacing: 2px; background-color: rgb(210, 210, 210); border-radius: 10px;" oncontextmenu="return D3Api.onContextMenuBody(event);" >
                    <tbody>
                        <tr style="display: table-row; vertical-align: inherit; border-color: inherit;">
                            <td class="WinContentLeftTop"></td>
                            <td class="WinContentTop"></td>
                            <td class="WinContentRightTop"></td>
                        </tr>
                        <tr name="header" class="headerTitle" style="display: table-row; vertical-align: inherit; border-color: inherit;">
                            <td class="WinContentLeft"></td>
                            <td style="background: url(./Components/Window/images/ModWinT_bg.png);">
                                <div class="WinTitleLeft"></div>
                                <div class="WinTitleRight"></div>
                                <div class="WinTitle Title" name="label" draggable="false"></div>
                                <div class="win_btn_container" style="margin-right: 15px">
                                    <img name="loader" class="w-loading" src="./Components/Window/images/s.gif" onclick="abortLoading();"/>
                                    <div name="maximizedButton" class="window-control win_maximize"></div>
                                    <div name="closeButton" class="window-control win_close"></div>
                                    <div name="rememberWinSize" class="win_remembersize" onclick="rememberWindowSize(event);" title="Запомнить новый размер окна" style="display:none"></div>
                                    <div name="helpButton" class="win_help" title="Справка"></div>
                                </div>
                            </td>
                            <td class="WinContentRight"></td>
                        </tr>
                        <tr style="display: table-row; vertical-align: inherit; border-color: inherit;">
                            <td class="WinContentLeft" name="w_middle"></td>
                            <td class="WinContent" style="vertical-align: top;  background: url(Components/Window/images/Background.png); background-size: 100% 100%;">
                                <div class="WinContentBody" name="win_content" style="-webkit-box-sizing: border-box;background-color: RGB(210, 210, 210);"></div>
                            </td>
                            <td class="WinContentRight" name="e_middle" style="cursor:e-resize;">
                            </td>
                        </tr>
                        <tr style="display: table-row; vertical-align: inherit; border-color: inherit;">
                            <td class="WinContentLeftBottom" name="sw_bottom"></td>
                            <td class="WinContentBottom" name="s_bottom"></td>
                            <td class="WinContentRightBottom" name="sizer"></td>
                        </tr>
                  </tbody>
             </table>
    `;
	return s;
}
//class DWindow
function DWindow(_otladka){
	DListener.call(this);
	//contatants
	if(!_otladka) _otladka=0;
	this.IsComposition = false;
	var h_header = 0; //высота заголовка окна
	var h_statusbar = 0; //высота статусной строки окна
	var w_content = 0; //ширина рамки основного контейнера
	var close_type = 0;
	var modal_win, header, label, loader, maximizedbutton, closebutton, helpbutton, win_content, sw_bottom, s_bottom, /*statusbar,*/ sizer,w_middle,e_middle;
	//убрано reloadbutton,  т.к. сбивает Listener'ы с модальных окон
	this.setCaption = function(_caption){
		label.innerHTML=_caption;
	}
	this.getCaption = function(_caption){
		return label.innerHTML;
	}
	this.setConfirmOnClose = function(_type){
		if(_type == 1) close_type = 1;
	}
    this.setMaxSizeStyle = function(){
        addClass(modal_win,'window_max_size');
    }
    this.clearMaxSizeStyle = function(){
        removeClass(modal_win,'window_max_size');
    }
	var CloseButtonOnClick = function(){
		if (close_type == 1) {
			if(!confirm('Закрыть окно без сохранения данных?')) return;
		}
		removeEvent(document, 'keydown',docEscPushEvent);
        	this.dispatchEvent('onclose');
    	}
	    var EscapeButtonOnClick=function() {
	       removeEvent(document, 'keydown',docEscPushEvent);
	       closeWindow();
	    }
        var body;
        this.getWinContent = function() {
            return win_content;
        }
        this.GetMainDOM = function() {
            return modal_win;
        }
        this.parse=function(_dom) {
            if(hasProperty(_dom,'name')){
                eval(quickGetProperty(_dom,'name').toLowerCase()+'=_dom;');
            }
            for(var index=0;index<_dom.childNodes.length;index++){
                this.parse(_dom.childNodes[index]);
            }
        }
        var left=0;var top=0;
        this.setPosition=function (_left,_top){_left=Math.max(_left,0);_top=Math.max(_top,0);_setPosition.call(this,_left,_top);left=_left;top=_top;}
        var _setPosition=function (_left,_top){setDomPos(modal_win,_left,_top);}
        this.setCenterPosition = function() {
            var size = getDocumentSize();
            var w = getAbsoluteClientRect(modal_win);
            this.setPosition(size.width / 2 - w.width / 2, size.height / 2 - w.height / 2);
        }
    	this.minWidth=250;this.minHeight=100;
    	var width=this.minWidth;var height=this.minHeight;
        this.size = {width: width, height: height};
        this.setSize=function (_width,_height){
            _setSize.call(this,_width,_height);
        }
	    var _setSize=function (_width,_height){
	    	if (_width == null)
                        _width = this.size.width;
                    if (_height == null)
                        _height = this.size.height;
                    var wpx = _width, hpx = _height, wpx_c = _width,hpx_c = _height;
                    if (_width != 'auto' && (!_width.indexOf || _width.indexOf('%') == -1))
                    {
                        _width=Math.max(_width,this.minWidth);
                        wpx = _width+'px';
                        wpx_c = (_width-20)+'px';
                    }
                    if (_height != 'auto' && (!_height.indexOf || _height.indexOf('%') == -1))
                    {
                        _height=Math.max(_height,this.minHeight);
                        hpx = _height+'px';
                        hpx_c = (_height-47)+'px';
                    }
                    this.size.width = _width;
                    this.size.height = _height;

	    	setDomSizeNoPx(modal_win,wpx,hpx);
                    setDomSizeNoPx(win_content,wpx_c,hpx_c);
                    runCalcSize(modal_win,modal_win);
                    this.dispatchEvent('onresize');
	    }
	    var container=document.createElement('div');
	    var docMoveEvent, docUpEvent, docResizeEvent, docResizeUpEvent, docEscPushEvent;
	    var docMoveEventTouch, docUpEventTouch, docResizeEventTouch, docResizeUpEventTouch;
	    var oldLeft=new Number(0);
	    var oldTop=new Number(0);
	    var captureX=new Number(0);
	    var captureY=new Number(0);

            var _setDragOnMouseDown=function (evt){
                var _windowObject=this;
                if ( D3Api.platform == 'android') {
                    if (evt.target.getAttribute("name")=="maximizedButton") {
                      _setMaximaizeOnDblClick.call(_windowObject,evt||window.event);
                      evt.preventDefault && evt.preventDefault();
                      return
                    }
                    if (evt.target.getAttribute("name")=="closeButton") {
                      CloseButtonOnClick.call(_windowObject);
                      evt.preventDefault && evt.preventDefault();
                      return
                    }
                }
                var pos=getAbsolutePos(modal_win);
                oldLeft=pos.x;oldTop=pos.y;
                captureX=evt.pageX||evt.x;captureY=evt.pageY||evt.y;
                this._removeDocEvent();
                addClass(document.body,'noselect');
                addClass(modal_win,'noselect');
                addEvent(document,'mousemove',docMoveEvent=function (e){_windowObject._onMove(e||window.event);});
                addEvent(document,'mouseup',docUpEvent=function (e){_windowObject._onMouseUp(e||window.event);});
                if ( D3Api.platform == 'android') {
                   addEvent(document,'touchmove',docMoveEventTouch=function (event){_windowObject._onMove(event.changedTouches[0]||window.event); });
                   addEvent(document,'touchend',docUpEventTouch=function (event){_windowObject._onMouseUp(event.changedTouches[0]||window.event); });
                }
            }
            this._onMove = function(evt) {this.setPosition(oldLeft-captureX+parseInt(evt.pageX||evt.x),oldTop-captureY+parseInt(evt.pageY||evt.y));}
            this._onMouseUp = function() {  this._removeDocEvent();}

            this._removeDocEvent=function (){
                if(docMoveEventTouch && docUpEventTouch){
                   removeClass(document.body,'noselect');
                   removeClass(modal_win,'noselect');
                   removeEvent(document,'touchmove',docMoveEventTouch);
                   removeEvent(document,'touchend',docUpEventTouch);
                }
                if(docMoveEvent && docUpEvent){
                    removeClass(document.body,'noselect');
                    removeClass(modal_win,'noselect');
                    removeEvent(document,'mousemove',docMoveEvent);
                    removeEvent(document,'mouseup',docUpEvent);
                }
            }
            this.fixedSize=false;
            var maximized=false;
            var _setMaximaizeOnDblClick = function() {
                if(this.fixedSize)return;
                var _h,_w;
                if(maximized){
                    this.setPosition(left,top);
                    this.setSize(width,height);
                    _w = width;
                    _h = height;
                }else{
                    this.rec = getAbsoluteRect(modal_win);
                    width=Math.max(this.rec.width,this.minWidth);
                    height=Math.max(this.rec.height,this.minHeight);
                    var docSize=getDocumentSize();
                    _setPosition.call(this,0,0);
                    _setSize.call(this,docSize.width,docSize.height);
                    _w = docSize.width;
                    _h = docSize.height;
                }
                maximized=!maximized;
            }
            this._getDistance=function(e) {
                var _windowObject=this;
                var _w = _windowObject.rec.width, _h = _windowObject.rec.height;
                if(!this.type) this.type = 'se';
                if(this.type== 'se' || this.type == 'e')_w = Math.max(_windowObject.rec.width+(e.clientX - this.mX),this.minWidth);
                if(this.type== 'se' || this.type == 's') _h = Math.max(_windowObject.rec.height+(e.clientY - this.mY),this.minHeight);
                _setSize.call(this,_w,_h);
            }
            var _setResizeOnMouseDown=function (e) {
                var _windowObject=this;
                if(_windowObject.fixedSize)return;
                _windowObject.mX = e.clientX;
                _windowObject.mY = e.clientY;
                _windowObject.rec = getAbsoluteRect(modal_win);
                _windowObject._stopDistance();
                addClass(document.body,'noselect');
                addClass(modal_win,'noselect');
                addEvent(document,'mousemove',docResizeEvent=function (e){_windowObject._getDistance(e||window.event);});
                addEvent(document,'mouseup',docResizeUpEvent=function (e){maximized=false;_windowObject._stopDistance();});
                if ( D3Api.platform == 'android') {
                    addEvent(document,'touchmove',docResizeEventTouch=function (event){_windowObject._getDistance(event.changedTouches[0]);});
                    addEvent(document,'touchend',docResizeUpEventTouch=function (event){maximized=false;_windowObject._stopDistance();});
                }
            }
            this._stopDistance = function() {
                removeClass(document.body,'noselect');
                removeClass(modal_win,'noselect');
                if(docResizeEventTouch && docResizeUpEventTouch){
                    removeEvent(document,'touchmove',docResizeEventTouch);
                    removeEvent(document,'touchend',docResizeUpEventTouch);
                }
                if(docResizeEvent && docResizeUpEvent){
                    removeEvent(document,'mousemove',docResizeEvent);
                    removeEvent(document,'mouseup',docResizeUpEvent);
                }
            }
	    this.Loading=function (_loading){
	    	/*if(_loading)statusbar.innerHTML = "Подождите идет загрузка... ";
	    	else statusbar.innerHTML = "";*/
	    	setDomVisible(loader,_loading);
	    }
	    this.getContainer=function (){
	    	return win_content;
	    }
	    var ReloadButtonOnClick=function (){
	    	this.dispatchEvent('onreload');
	    	getPage().form.FilterItems=new Array();
	    }
	    this.init = function() {
	    	container.innerHTML=getWindowXml(_otladka);
	    	this.parse(container);
	    	//events
	    	var _windowObject=this;
            this.setVisible(false);
	    	// addEvent(document,'keydown', docEscPushEvent=function(e){if(e.keyCode == 27 || window.event == 27) EscapeButtonOnClick.call(_windowObject);});// обработка клавиши Esc

            setDomVisible(helpbutton, false);
	    	closebutton.onclick=function (e){CloseButtonOnClick.call(_windowObject);}
            maximizedbutton.onclick=function (e){_setMaximaizeOnDblClick.call(_windowObject,e||window.event);};
            // добавляем обработчик событий  для android
	        if ( D3Api.platform == 'android') {
                header.ontouchstart=function (event){_setDragOnMouseDown.call(_windowObject,event.changedTouches[0]||window.event);}
                s_bottom.ontouchstart=function (event){_windowObject.type='s';_setResizeOnMouseDown.call(_windowObject,event.changedTouches[0]||window.event);}
                e_middle.ontouchstart=function (event){_windowObject.type='e';_setResizeOnMouseDown.call(_windowObject,event.changedTouches[0]||window.event);};
                sizer.ontouchstart=function (event){_windowObject.type='se';_setResizeOnMouseDown.call(_windowObject,event.changedTouches[0]||window.event);}
                w_middle.ontouchstart=header.ontouchstart;
                header.ondblclick=function (event){_setMaximaizeOnDblClick.call(_windowObject,event||window.event);};
            }
            // добавляем обработчик событий для windows
            if ( D3Api.platform == 'windows') {
                header.onmousedown=function (e){_setDragOnMouseDown.call(_windowObject,e||window.event);}
                header.ondblclick=function (e){_setMaximaizeOnDblClick.call(_windowObject,e||window.event);};
                sw_bottom.onmousedown=function (e){_windowObject.type='s';_setResizeOnMouseDown.call(_windowObject,e||window.event);}
                s_bottom.onmousedown=function (e){_windowObject.type='s';_setResizeOnMouseDown.call(_windowObject,e||window.event);}
                w_middle.onmousedown=header.onmousedown;w_middle.ondblclick=header.ondblclick;
                e_middle.onmousedown=function (e){_windowObject.type='e';_setResizeOnMouseDown.call(_windowObject,e||window.event);};
                maximizedbutton.onclick=header.ondblclick;
                sizer.onmousedown=function (e){_windowObject.type='se';_setResizeOnMouseDown.call(_windowObject,e||window.event);}
            }
	    	//reloadbutton.onclick=function (e){ReloadButtonOnClick.call(_windowObject);} т.к. сбивает Listener'ы с модальных окон
            this.setMaxSizeStyle();
        }
	    var isShowing=false;
	    this.show=function() {
	    	var _div=document.createElement('div');
	    	document.body.appendChild(_div);
	    	var size=getAbsolutePos(_div);
	    	document.body.removeChild(_div);
	    	document.body.appendChild(container);
	    }
	    this.hide=function() {
            removeDomObject(container);
        }
        this.setVisible = function(v) {
            if(v) {
                removeClass(modal_win,'hidden');
                addClass(modal_win,'showed');
            } else {
                removeClass(modal_win,'showed');
                addClass(modal_win,'hidden');
            }
        }
        //call
        this.init();
        this.close=function (){
            this.hide();
        }
	    this.refresh=function (){
	    	body.align='left';setTimeout(function (){body.align='';},0);
	    }
	    //Для отладки:
	    this.rememberSize = function(event) {
                var f = getPage().form;
                if(!f.canSaveFormSettings()) {
                    alert('Окно не поддерживает сохранение размера.');
                    return false;
                }
                var ws = getAbsoluteSize(modal_win);

                if(f.isComposition) {
                    executeAction(getVar('ComponentName')+'_comp_select',
                                function() {
                                        setVar('Composition_WIDTH',ws.width);
                                        setVar('Composition_HEIGHT',ws.height);
                                        executeAction(getVar('ComponentName')+'_comp_update');
                                });
                }
                var wSt = f.getFormSettings('_WINDOW_');
                if (event.shiftKey && confirm("Сбросить сохраненные настройки окна?")) {
                        f.deleteFormSettings('_WINDOW_');
                        return;
                }
                var ws = getAbsoluteSize(modal_win);
                wSt['width'] = ws.width;
                wSt['height'] = ws.height;
	    }
        this.showHelpEvent = function(ev) {
            setDomVisible(helpbutton, true);
            helpbutton.onclick = ev;
        }
}

function DOracleErrorWindow(_error){	
	var _data='Error/OracleErrorWindow';		
	this.Separator='ORA-20103:';
	this.SQLSeparator='\nSQL:';
	this.OFFSETSeparator='OFFSET:';
	this.ParamsSeparator='PARAMS:';
	this.getErrorString=function (_oraMessage){
		var _caption='Неизвестная ошибка.';
		if(typeof(_oraMessage)!='string') return _caption;
		var Strings=_oraMessage.split('\n');
		var index=new Number();
		var len=new Number(Strings.length);
		var pos=new Number();
		for(index=0;index<len;index++){
			pos=Strings[index].indexOf(this.Separator);
			if(pos!=-1){
				_caption=Strings[index].substring(pos+this.Separator.length);
			}
		}
		return _caption;
	}
	this.getSQLErrorString=function (_oraMessage)
	{
		var _SQLString = 'null';
		if(typeof(_oraMessage)!='string') return _SQLString;
		var _startStr = _oraMessage.indexOf(this.SQLSeparator) + 5;
		var _endStr   = _oraMessage.indexOf(this.OFFSETSeparator);
		_SQLString    = _oraMessage.substring(_startStr, _endStr);
		return _SQLString;
	}
	this.getParamsErrorString=function (_oraMessage)
	{
		var _ParamsString = 'null';		
		if(typeof(_oraMessage)!='string') return _SQLString;
		var _startStr = _oraMessage.indexOf(this.ParamsSeparator) + 7;
		_ParamsString = _oraMessage.substring(_startStr);
		//_ParamsString = _ParamsString.replace(/[rn]/g,'');
		return _ParamsString;
	}
	this.show=function(){
                var params = this.getParamsErrorString(_error)
		if(typeof(_error)!='string') _error='Неизвестная ошибка';
                var fn = 'UNDEFINED';
                if(getPage().form)
                    fn = getPage().form.name;
                
                return openWindow({name:_data,vars:{
                                                paramsError:params,
                                                textError:this.getErrorString(_error),
                                                sqlError:this.getSQLErrorString(_error),
                                                msgError:_error+"\nНа форме "+fn}}
                                  ,true);
	}
}

function getErrorWindowBodyXML(){
    return '<table style="width:100%;height:100%;" cellpadding="5" cellspacing="5" border="0"><tbody><tr><td valign="top" style="height:200px;"><textarea style="padding:0px 0px 0px 0px;width:100%;height:100%;" readOnly="true" name="errorMemo"></textarea></td></tr><tr><td align="center"><input type="Button" value="OK" name="closebutton"/></td></tr></tbody></table>'
};
function DErrorWindow(_error){
	var win=new DWindow();
	var errormemo;
	var closebutton;
	this.parse=function (_dom){if(hasProperty(_dom,'name')){eval(quickGetProperty(_dom,'name').toLowerCase()+'=_dom;');}for(var index=0;index<_dom.childNodes.length;index++){this.parse(_dom.childNodes[index]);}}
	this.show=function (){
		win.setSize(400,280);
		win.fixedSize=true;
		win.setCaption('Информация');
		win.addListener('onclose',function (){win.close();},this,false);
		win.getContainer().innerHTML=getErrorWindowBodyXML();
		win.show();
		this.parse(win.getContainer());
		closebutton.focus();
		closebutton.onclick=function (){
                    win.dispatchEvent('onclose');
                    win.close();
                }
		errormemo.value=_error;
                win.setVisible(true);
                win.setCenterPosition();
                return win;
	}
}
//<input type="button" name="saveerrbutton"/>
/*
function getOracleErrorWindowBodyXML(){return '<table width="100%" style="height:100%"><tr><td style="padding:20px 20px 20px 20px;height:50px;width:100%;"><div name="caption" style="overflow:auto;height:50px;width:100%;"></div></td></tr><tr><td align="right" style="padding:5px 5px 5px 5px;" valign="top"><input type="button" name="saveerrbutton"/><input type="button" name="viewdetailbutton"/><input type="button" name="gobutton" value="Продолжить"/></td></tr><tr name="errormemocontainer" style="display:none;height:180px;"><td valign="top" style="height:180px;"><textarea readonly="true" name="errormemo" style="height:180px;width:480px"></textarea></td></tr></table>';}
function DOracleErrorWindow(_error){
	var win=new DWindow();
	var errormemo;
	var viewdetailbutton;
	var saveerr;
	var gobutton;
	var caption;
	var errormemocontainer;
	this.SQLErrStr;
	this.ParamsErrStr;
	this.parse=function (_dom){if(hasProperty(_dom,'name')){eval(quickGetProperty(_dom,'name').toLowerCase()+'=_dom;');}for(var index=0;index<_dom.childNodes.length;index++){this.parse(_dom.childNodes[index]);}}
	this.Separator='ORA-20103:';
	this.SQLSeparator='\nSQL:';
	this.OFFSETSeparator='OFFSET:';
	this.ParamsSeparator='PARAMS:';
	this.getErrorString=function (_oraMessage){
		        var _caption='Неизвестная ошибка.';
				if(typeof(_oraMessage)!='string') return _caption;
				var Strings=_oraMessage.split('\n');
		        var index=new Number();
		        var len=new Number(Strings.length);
		        var pos=new Number();
		        for(index=0;index<len;index++){
		            pos=Strings[index].indexOf(this.Separator);
		            if(pos!=-1){
		            	_caption=Strings[index].substring(pos+this.Separator.length);
		            }
		        }
		        return _caption;
	}
	this.getSQLErrorString=function (_oraMessage)
	{
		var _SQLString = 'null';
		if(typeof(_oraMessage)!='string') return _SQLString;
		var _startStr = _oraMessage.indexOf(this.SQLSeparator) + 5;
		var _endStr   = _oraMessage.indexOf(this.OFFSETSeparator);
		_SQLString    = _oraMessage.substring(_startStr, _endStr);
		return _SQLString;
	}
	this.getParamsErrorString=function (_oraMessage)
	{
		var _ParamsString = 'null';
		if(typeof(_oraMessage)!='string') return _SQLString;
		var _startStr = _oraMessage.indexOf(this.ParamsSeparator) + 7;
		_ParamsString    = _oraMessage.substring(_startStr);
		return _ParamsString;
	}
	var isShowDetail=false;
	this.ViewDetail=function (){
		if(isShowDetail){
			errormemocontainer.style.display='none';
			viewdetailbutton.value='Подробнее';
			win.setSize(530,160);
		}else{
			errormemocontainer.style.display='';
			viewdetailbutton.value='Скрыть';
			win.setSize(530,400);
		}
		isShowDetail=!isShowDetail;
	}
	this.SaveErr = function()
	{
		this.SQLErrStr = this.getSQLErrorString(_error);
		this.ParamsErrStr = this.getParamsErrorString(_error);
		setVar('msgError', errormemo.value);
		setVar('sqlError', this.SQLErrStr);
		setVar('paramsError', this.ParamsErrStr);
		setVar('textError', caption.innerHTML);
		executeAction('saveErrorToDB', null,null,null,true,0);
	}
	this.show=function (){
		win.setSize(500,160);
		win.fixedSize=true;
		win.setCaption('Ошибка сервера');
		win.addListener('onclose',function (){win.close();},this,false);
		win.getContainer().innerHTML=getOracleErrorWindowBodyXML();
		win.show();
		this.parse(win.getContainer());
		caption.innerHTML=this.getErrorString(_error);
		gobutton.onclick=function (){win.close();}
		var _objectWindow=this;
		saveerrbutton.value='Сохранить';
		saveerrbutton.onclick=function (){_objectWindow.SaveErr();}
		viewdetailbutton.value='Подробнее';
		viewdetailbutton.onclick=function (){_objectWindow.ViewDetail();}
		if(typeof(_error)!='string') _error='Неизвестная ошибка';
		_error = _error.replace(/<br\/>/g, '\n');
		errormemo.value=_error+"\nНа форме "+getPage().form.name;
	}
}*/
function getConfirmWindowBodyXML(){return '<table style="width:100%;height:100%;" class="form-table" cellpadding="5" cellspacing="5" border="0"><tbody><tr><td valign="top" colspan="2"><span name="alerttext"></span></td></tr><tr><td><input type="Button" value="OK" name="okbutton"/></td><td><input type="Button" value="Отмена" name="closebutton"/></td></tr></tbody></table>'};
function DConfirmWindow(_alert,_okfunction,_cancelfunction){
	var win=new DWindow();
	var closebutton;
	var alerttext;
	var okbutton;
	this.parse=function (_dom){if(hasProperty(_dom,'name')){eval(quickGetProperty(_dom,'name').toLowerCase()+'=_dom;');}for(var index=0;index<_dom.childNodes.length;index++){this.parse(_dom.childNodes[index]);}}
	this.show=function (){
		win.setSize(280,160);
		win.fixedSize=true;
		//win.setCaption('');
		win.addListener('onclose',function (){win.close();},this,false);
		win.getContainer().innerHTML=getConfirmWindowBodyXML();
		win.show();
		this.parse(win.getContainer());
		closebutton.onclick = function (){if(_cancelfunction!=false){_cancelfunction.call(this);}win.close();}
		okbutton.onclick    = function (){if(_okfunction!=false){_okfunction.call(this);}win.close();}
		alerttext.innerHTML = _alert;
                win.setVisible(true);
                win.setCenterPosition();
	}
}

function getAlertWindowBodyXML(){return '<table style="width:100%;height:100%;" cellpadding="5" cellspacing="5" border="0"><tbody><tr><td valign="top"><span name="alerttext"></span></td></tr><tr><td align="center"><input type="Button" value="OK" name="okbutton"/></td></tr></tbody></table>'};
function DAlertWindow(_message,_okfunction,_object){
	var win=new DWindow();
	var alerttext;
	var okbutton;
	this.parse=function (_dom){if(hasProperty(_dom,'name')){eval(quickGetProperty(_dom,'name').toLowerCase()+'=_dom;');}for(var index=0;index<_dom.childNodes.length;index++){this.parse(_dom.childNodes[index]);}}
	this.show=function (){
		win.setSize(280,160);
		win.fixedSize=true;
		//win.setCaption('');
		win.addListener('onclose',function (){win.close();},this,false);
		win.getContainer().innerHTML=getAlertWindowBodyXML();
		win.show();
		this.parse(win.getContainer());
		okbutton.onclick    = function (){win.close();win.dispatchEvent('onclose');}
		alerttext.innerHTML = _message;
                win.setVisible(true);
                win.setCenterPosition();
		if(_okfunction)
			win.addListener('onclose',_okfunction,_object,false);
	}
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------


var GLOBAL_CURRENT_FORM = '';
//class DListener
function DListener() {
    //Когда создается форма(парс), устанавливается переменная GLOBAL_CURRENT_FORM
    this.formUID = GLOBAL_CURRENT_FORM;

    if (typeof (this.Events) != 'undefined') {
        // очищаем все события, кроме onafterclose
        for (var i in this.Events) {
            if (!this.Events.hasOwnProperty(i)) {
                continue;
            }
            if (i != 'onafterclose')
                delete this.Events[i];
        }
    } else {
        this.Events = new Array();
    }

    var getGroupEvents = function (_eventName) {
        var groupEvents = this.Events[_eventName];
        return (groupEvents instanceof Array) ? groupEvents : this.Events[_eventName] = new Array();
    }
    var getGroup = function (_eventName) {
        var groupEvents = this.Events[_eventName];
        if (!(groupEvents instanceof Array)) groupEvents = new Array();
        return groupEvents;
    }
    //public:
    this.addListener = function (_eventName, _method, _object, _capture) {
        var groupEvents = getGroup.call(this, _eventName);
        for (var _index = 0; _index < groupEvents.length; _index++) {
            if (groupEvents[_index].isThis(_object, _method, _capture)) {
                return false;
            }
        }
        return getGroupEvents.call(this, _eventName).splice((_capture) ? 0 : this.Events[_eventName].length, 0, new DListenerObject(_object, _method, _capture));
    }
    this.removeListener = function (_eventName, _method, _object, _capture) {
        var groupEvents = getGroup.call(this, _eventName);
        for (var _index = new Number(0); _index < groupEvents.length; _index++) {
            if (groupEvents[_index].isThis(_object, _method, _capture)) {
                //RemoveObjectPropertyes(groupEvents[_index]);
                groupEvents.splice(_index, 1);
            }
        }
    }
    this.dispatchEvent = function (_eventName) {
        var _eventArguments = new Array();
        for (var _index = new Number(1); _index < arguments.length; _index++) {
            _eventArguments[_index - 1] = arguments[_index];
        }
        var groupEvents = getGroup.call(this, _eventName);
        for (var _index = new Number(); _index < groupEvents.length; _index++) {
            if (groupEvents[_index]._call(_eventArguments)) return;
        }
    }
}/**
 *
 * @component
 */
D3Api.BaseCtrl = new function()
{
    var baseMethods = {};
    var self = this;
     //Переопределить в каждом контроле, вызывается при парсе компонента
    /**
     *
     * @param _dom
     * @returns {boolean}
     */
    this.init = function(_dom)
    {
        this.init_focus(_dom);
        return true;
    }

    /**
     *
     * @param _dom
     */
    this.init_focus = function(_dom)
    {
        D3Api.addEvent(_dom,'focus',this.ctrl_focus, true);
        D3Api.addEvent(_dom,'blur',this.ctrl_blur, true);
    }

    /**
     *
     * @param e
     */
    this.ctrl_focus = function(e)
    {
        var inp=D3Api.getEventTarget(e);
        var focus_control = D3Api.getControlByDom(inp);

        if(focus_control )
        {
            if(D3Api.getProperty(focus_control,'name') == "lastControl" && !D3Api.getVar('KeyDown_shiftKey')) {
                D3Api.stopEvent(e);
                D3Api.BaseCtrl.focusNextElement(focus_control, 2);
                D3Api.setVar('KeyDown_shiftKey', null);
                return;
            }
            else if(D3Api.getProperty(focus_control,'name') == "firstControl")
            {
                D3Api.stopEvent(e);
                if(D3Api.getVar('KeyDown_shiftKey') === true)
                    D3Api.BaseCtrl.focusNextElement(focus_control, -2);
                else
                    D3Api.BaseCtrl.focusNextElement(focus_control, 1);
                D3Api.setVar('KeyDown_shiftKey', null);
                return;
            }

            D3Api.setVar('focus_control', focus_control);
            D3Api.addClass(focus_control, 'focus');
        }
    }

    /**
     *
     * @param e
     */
    this.ctrl_blur = function(e)
    {
        var focus_control = D3Api.getVar('focus_control');
        if(!focus_control)
            return;

        D3Api.removeClass(focus_control, 'focus');
        D3Api.setVar('focus_control', null);
    }

    /**
     *
     * @param dom
     * @param delta
     */
    this.focusNextElement = function(dom, delta){
        var focussableElements = 'input:not([disabled]), [tabindex]:not([disabled]):not([tabindex="-1"])';
        if (!dom)
            return;

        var focussable = Array.prototype.filter.call(dom.D3Form.DOM.querySelectorAll(focussableElements),
            function(element){
                return element.offsetWidth > 0 || element.offsetHeight > 0
            });

        var index = focussable.indexOf(dom);

        if((index+delta) < 0)
            var inp = focussable[focussable.length + delta];
        else if((index+delta)> (focussable.length -1))
            var inp = focussable[index + delta - focussable.length];
        else
            var inp = focussable[index + delta];

        var focus_control = D3Api.getControlByDom(inp);

        if(inp == focus_control)
            focus_control.focus();
        else
            D3Api.setControlPropertyByDom(focus_control, 'focus', true);
    }
    //Переопределить в каждом контроле, вызывается при запросе данных и получении ответа

    /**
     *
     * @param _dom
     * @returns {boolean}
     */
    this.startWait = function(_dom)
    {
        return true;
    }

    /**
     *
     * @param _dom
     * @returns {boolean}
     */
    this.stopWait = function(_dom)
    {
        return true;
    }

    /**
     *
     * @param _dom
     * @param method
     * @returns {*}
     */
    this.callMethod = function(_dom,method)
    {
        var ct = D3Api.getProperty(_dom,'cmptype');
        if (!ct)
        {
            //D3Api.debug_msg('У объекта нет API');
            return;
        }
        var baseMethod = false;
        if (!D3Api.controlsApi[ct] || !D3Api.controlsApi[ct]._API_ || !D3Api.controlsApi[ct]._API_[method])
        {
            if(!baseMethods[method] || !D3Api.BaseCtrl[method])
            {    
                //D3Api.debug_msg('Нет метода "'+method+'" для компонента с типом: '+ct);
                return;
            }
            baseMethod = true;
        }
        var args = Array.prototype.slice.call(arguments);
        args.splice(1,1);
        return (baseMethod)?D3Api.BaseCtrl[method].apply(this,args):D3Api.controlsApi[ct]._API_[method].apply(this, args);
    }

    /**
     *
     * @param domSrc
     * @param eventName
     * @param argsName
     * @param defaultEventFunc
     * @param domDest
     */
    this.initEvent = function Base_InitEvent(domSrc,eventName,argsName,defaultEventFunc,domDest)
    {
        domDest = domDest || domSrc;
        var ev = D3Api.getProperty(domSrc, eventName, defaultEventFunc);
        if(ev)
            domDest.D3Base.addEvent(eventName,domDest.D3Form.execDomEventFunc(domDest, (argsName)?{func: ev, args: argsName}:ev,undefined,domDest.D3Form.currentContext));
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getName = function Base_getName(_dom)
    {
        return D3Api.getProperty(_dom,'name',null);
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setName = function Base_setName(_dom,_value)
    {
        D3Api.setProperty(_dom,'name',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getWidth = function Base_getWidth(_dom)
    {
        return _dom.style.width;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setWidth = function Base_setWidth(_dom,_value)
    {
        var v = +_value;
        if (isNaN(v))
            _dom.style.width = _value;
        else
            _dom.style.width = _value+'px';
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getHeight = function Base_getHeight(_dom)
    {
        return _dom.style.height;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setHeight = function Base_setHeight(_dom,_value)
    {
        var v = +_value;
        if (isNaN(v))
            _dom.style.height = _value;
        else
            _dom.style.height = _value+'px';
    }

    /**
     *
     * @param _dom
     * @returns {number}
     */
    this.getRealWidth = function Base_getRealWidth(_dom)
    {
        return _dom.offsetWidth;
    }

    /**
     *
     * @param _dom
     * @returns {number}
     */
    this.getRealHeight = function Base_getRealHeight(_dom)
    {
        return _dom.offsetHeight;
    }

    /**
     *
     * @param _dom
     * @returns {boolean}
     */
    this.getEnabled = function Base_getEnabled(_dom)
    {
        return !D3Api.hasClass(_dom,'ctrl_disable');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setEnabled = function Base_setEnabled(_dom,_value)
    {
        if (D3Api.getBoolean(_value))
            D3Api.removeClass(_dom,'ctrl_disable');
        else
            D3Api.addClass(_dom,'ctrl_disable');
    }

    /**
     *
     * @param _dom
     * @returns {boolean}
     */
    this.getVisible = function Base_getVisible(_dom)
    {
        return !D3Api.hasClass(_dom,'ctrl_hidden');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setVisible = function Base_setVisible(_dom,_value)
    {
        if (D3Api.getBoolean(_value))
            D3Api.removeClass(_dom,'ctrl_hidden');
        else
            D3Api.addClass(_dom,'ctrl_hidden');
        
        var form = _dom.D3Form;
        if(!_dom.D3Form)
        {
            form = D3Api.getControlByDom(_dom).D3Form;
        }
        form.resize();
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getHint = function Base_getHint(_dom)
    {
        return _dom.title;
    }

    /**
     *
     * @param _dom
     * @param _value
     * @returns {*}
     */
    this.setHint = function Base_setHint(_dom,_value)
    {
        return _dom.title = _value;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setFocus = function Base_setFocus(_dom,_value)
    {
        var inpEl = D3Api.getChildTag(_dom, 'input', 0);
        if (!inpEl)
            inpEl = D3Api.getChildTag(_dom, 'textarea', 0);
        if (!inpEl)
        {
            _dom.focus();
            return;
        }
        
        if (D3Api.getBoolean(_value))
            setTimeout(function(){inpEl.focus();},10);
        else
            setTimeout(function(){inpEl.blur();},10);
    }

    /**
     *
     * @param _dom
     * @param _value
     * @returns {*|boolean}
     */
    this.getWarning = function(_dom,_value)
    {
        return D3Api.hasClass(_dom,'ctrl_warning');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setWarning = function(_dom,_value)
    {
        if (D3Api.getBoolean(_value))
            D3Api.addClass(_dom,'ctrl_warning');
        else
            D3Api.removeClass(_dom,'ctrl_warning');
    }    
    
    /**
     *
     * @param _dom
     * @param _value
     * @returns {*|boolean}
     */
    this.getError = function(_dom,_value)
    {
        return D3Api.hasClass(_dom,'ctrl_error');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setError = function(_dom,_value)
    {
        if (D3Api.getBoolean(_value))
            D3Api.addClass(_dom,'ctrl_error');
        else
            D3Api.removeClass(_dom,'ctrl_error');
    }   

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getValue = function(dom)
    {
        if(D3Api.getProperty(dom,'cmptype') != 'Base') return;
        var inp = D3Api.getChildTag(dom,'input',0)||D3Api.getChildTag(dom,'textarea',0);
        if(inp)
            return (inp.value == null)?'':inp.value;
        else
            return D3Api.getProperty(dom,'keyvalue','');
    }

    /***
     *
     * @param dom
     * @param value
     */
    this.setValue = function(dom,value)
    {
        if(D3Api.getProperty(dom,'cmptype') != 'Base') return;
        var inp = D3Api.getChildTag(dom,'input',0)||D3Api.getChildTag(dom,'textarea',0);
        if(inp)
            inp.value = value;
        else
            D3Api.setProperty(dom,'keyvalue',value);
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getInput = function(dom)
    {
        if(D3Api.getProperty(dom,'cmptype') != 'Base') return;
        var inp = D3Api.getChildTag(dom,'input',0)||D3Api.getChildTag(dom,'textarea',0);
        return inp;
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getCaption = function(dom)
    {
        if(D3Api.getProperty(dom,'cmptype') != 'Base') return;
        var inp = D3Api.getChildTag(dom,'input',0)||D3Api.getChildTag(dom,'textarea',0);
        if(inp)
            return (inp.value == null)?'':inp.value;
        else
            return D3Api.getTextContent(dom);
    }

    /**
     *
     * @param dom
     * @param value
     */
    this.setCaption = function(dom,value)
    {
        if(D3Api.getProperty(dom,'cmptype') != 'Base') return;
        var inp = D3Api.getChildTag(dom,'input',0)||D3Api.getChildTag(dom,'textarea',0);
        if(inp)
            inp.value = value;
        else
            dom.innerHTML = D3Api.htmlSpecialChars(value);
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getHtml = function(dom)
    {
        return dom.innerHTML;
    }

    /**
     *
     * @param dom
     * @param value
     */
    this.setHtml = function(dom,value)
    {
        dom.innerHTML = value;
    }
}

/**
 * Свойство
 * get - функция получения значения свойства, если null то берется атрибут
 * set - функция установки значения свойства, если null то устанавливается атрибут
 * type - тип свойства: property, event
 * value_type - тип значения свойства: string(поумолчанию),number,boolean,list
 * value_list - массив значений, если value_type: list
 * value_default - значение по умолчанию
 */
D3Api.ControlBaseProperties = function(controlAPI)
{
    this._API_ = controlAPI || D3Api.BaseCtrl;
    this.name = {get: D3Api.BaseCtrl.getName, set: D3Api.BaseCtrl.setName, type: 'string'};
    this.value = {get: D3Api.BaseCtrl.getValue, set: D3Api.BaseCtrl.setValue, type: 'string'};
    this.caption = {get: D3Api.BaseCtrl.getCaption, set: D3Api.BaseCtrl.setCaption, type: 'string'};
    this.width = {get: D3Api.BaseCtrl.getWidth, set: D3Api.BaseCtrl.setWidth, type: 'string'};
    this.height = {get: D3Api.BaseCtrl.getHeight, set: D3Api.BaseCtrl.setHeight, type: 'string'};
    this.real_width = {get: D3Api.BaseCtrl.getRealWidth, type: 'number'};
    this.real_height = {get: D3Api.BaseCtrl.getRealHeight, type: 'number'};
    this.enabled = {get: D3Api.BaseCtrl.getEnabled, set: D3Api.BaseCtrl.setEnabled, type: 'boolean'};
    this.visible = {get: D3Api.BaseCtrl.getVisible, set: D3Api.BaseCtrl.setVisible, type: 'boolean'};
    this.hint = {get: D3Api.BaseCtrl.getHint, set: D3Api.BaseCtrl.setHint, type: 'string'};
    this.focus = {set: D3Api.BaseCtrl.setFocus, type: 'boolean'};
    this.warning = {set: D3Api.BaseCtrl.setWarning, get: D3Api.BaseCtrl.getWarning, type: 'boolean'};
    this.error = {set: D3Api.BaseCtrl.setError, get: D3Api.BaseCtrl.getError, type: 'boolean'};
    this.html = {get: D3Api.BaseCtrl.getHtml, set: D3Api.BaseCtrl.setHtml, type: 'string'};
    this.input = {get: D3Api.BaseCtrl.getInput, type: 'dom'};
}


D3Api.controlsApi['Base'] = new D3Api.ControlBaseProperties();
/**
 *
 * @component
 */
D3Api.EditCtrl = new function ()
{
    this.decimalSeparator = (1.1).toLocaleString().substring(1, 2);
    this.thousandSeparator = (1000).toLocaleString().substring(1, 2);

    /**
     *
     * @param _dom
     */
    this.init = function(_dom)
    {
        var inp = D3Api.EditCtrl.getInput(_dom);
        this.init_focus(inp);

        D3Api.addEvent(inp, 'change', function(event){
            D3Api.stopEvent(event);

        }, true);

        D3Api.BaseCtrl.initEvent(_dom,'onchange');
        D3Api.BaseCtrl.initEvent(_dom,'onformat');

        _dom.D3Base.addEvent('onchange_property',function(property,value){
            if (property == 'caption')
            {
                _dom.D3Base.callEvent('onchange');
                //D3Api.execDomEvent(_dom,'onchange');
            }
        });
        
        _dom.D3Store.trim = D3Api.getProperty(_dom,'trim',false) == 'true';

        D3Api.addEvent(inp, 'focus', function()
        {
            /* если есть форматирование, то отображаем с учетом этого форматирования */
            if (_dom.D3Base.events['onformat']) {
                if (_dom.D3Store._properties_ && _dom.D3Store._properties_.value) {
                    _dom.D3Base.callEvent('onformat', _dom.D3Store._properties_.value);
                    if (_dom._internalFormatted !== undefined) {
                        inp.value = _dom._internalFormatted;
                    }
                }
            }
        }, true);

        D3Api.addEvent(inp, 'blur', function(event)
        {
            /* если есть форматирование */
            if (_dom.D3Base.events['onformat']){

                /* Если есть маска, то проверяем ее на валидность. Если невалидна - обнуляем значение */
                if (_dom.D3Store.D3MaskParams) {
                    if (!_dom.D3Store.D3MaskParams.valid()) {
                        _dom.D3Store._properties_.value = null;
                        return;
                    }
                }

                /* Обновляем внутреннее значение */
                _dom.D3Base.callEvent('onformat', inp.value);
                _dom.D3Store._properties_ = _dom.D3Store._properties_ || {};
                if (_dom._internalValue !== undefined) {
                    _dom.D3Store._properties_.value = _dom._internalValue;
                }
            }

            /* Если есть маска, то событие отрабатывает там */
            if (_dom.D3Store.D3MaskParams) return;

            D3Api.setControlPropertyByDom(_dom,'caption', _dom._internalValue || inp.value,undefined,true);
            D3Api.stopEvent(event);

        }, true);

        D3Api.EditCtrl.setPlaceHolder(_dom);
    }

    /**
     * Преобразует число к строке, используя локаль
     * @param dom
     * @param settings 
     * @param {settings} toType - number | date | hours
     * @param {settings} hideZero - скрывать ли нулевые значения (по умолчанию показываются)
     * @param {settings} showNull - показывать ли значения null (если true, то приводятся к числу. По умолчанию скрываются)
     * @param {settings} mask - (для даты) - маска, например, 'd.m.Y'
     * @param {settings} options - описание тут: https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString
     * @param value
     *
     * @example <cmpEdit onformat="D3Api.EditCtrl.format(this, {toType : 'number',  showNull:true, options : {minimumFractionDigits:2}}, arguments[0]);"/>
     *
     */
    this.format = function (dom, settings, value){
        dom._formatted = true; // для случаев когда не успевает сработать onblur
        var ev  = D3Api.getEvent();
        var eventType = ev && ev.type ? ev.type : 'other';

        if (settings.toType === 'number'){
            if (value){
                /* преобразуем строку к числу с плавающей точкой */
                value = String(value).replace(/\s*/g,''); // убираем пробелы
                value = String(value).replace(new RegExp('\\'+this.thousandSeparator,'g'),''); // убираем разделители групп разрядов
                value = String(value).replace(new RegExp('\\'+this.decimalSeparator,'g'),'.'); // заменяем разделитель дробной части на православный

                if (settings.hideZero && Number(value) == 0){
                    dom._internalValue = 0;
                    dom._formattedValue = '';
                    dom._internalFormatted = String(Number(value)).replace(new RegExp('\\.', 'g'), this.decimalSeparator);
                }
                else{
                    dom._internalValue = Number.isFinite(Number(value)) ? value : null;
                    dom._formattedValue =  Number.isFinite(Number(value)) ? Number(value).toLocaleString(settings.locales, settings.options) : undefined;
                    dom._internalFormatted =  Number.isFinite(Number(value)) ? value.replace(new RegExp('\\.', 'g'), this.decimalSeparator) : undefined;
                }
            }
            else{ // null or 0
                dom._internalValue = Number.isFinite(value) ? value : null;
                if (!Number.isFinite(value) && settings.showNull || Number.isFinite(value) && !settings.hideZero){ // нужно преобразовать к нулю
                    dom._formattedValue = Number(0).toLocaleString(settings.locales, settings.options);
                }
                else{
                    dom._formattedValue = '';
                }
                dom._internalFormatted =  Number.isFinite(value) ? String(Number(value)).replace(new RegExp('\\.', 'g'), this.decimalSeparator) : undefined;
            }
        }else if (settings.toType === 'date'){
            if (value){
                value = String(value).trim();
                var regex = /^(\d{2})\.(\d{2})\.(\d{4})(?:\s(\d{2})(?::(\d{2})(?::(\d{2})(?:\.(\d{6}))?)?)?)?$/;
                var valueDate, dateMatch;

                try{
                    if (!regex.test(value)) throw 'Неверный формат даты/времени: '+value;
                    dateMatch = value.match(/^(\d{2})\.(\d{2})\.(\d{4})(?=\s(\d{2}):(\d{2}):(\d{2})|)/);
                    valueDate = new Date(dateMatch[3], dateMatch[2] - 1, dateMatch[1], dateMatch[4] || 0, dateMatch[5] || 0, dateMatch[6] || 0);
                    if (!dateMatch[4] && !settings.mask && !settings.options) settings.options = {year:'numeric', month:'numeric', day:'numeric'}; // не показываем время для обычной даты
                }
                catch(e){
                    D3Api.debug_msg(e);
                    value = dom._internalValue; // оставляем значение как было

                    if (value){
                        dateMatch = value.match(/^(\d{2})\.(\d{2})\.(\d{4})(?=\s(\d{2}):(\d{2}):(\d{2})|)/);
                        valueDate = new Date(dateMatch[3], dateMatch[2] - 1, dateMatch[1], dateMatch[4] || 0, dateMatch[5] || 0, dateMatch[6] || 0);
                        if (!dateMatch[4] && !settings.mask && !settings.options) settings.options = {year:'numeric', month:'numeric', day:'numeric'}; // не показываем время для обычной даты
                    }
                    else{
                        dom._internalValue = undefined;
                        dom._formattedValue = '';
                        dom._internalFormatted = '';
                        return;
                    }
                }

                if (value && settings.mask){
                    dom._internalValue = value;
                    dom._formattedValue = D3Api.parseDate(settings.mask, valueDate/1000);
                    dom._internalFormatted = value;
                }
                else{
                    if (value && value.toLocaleString) {
                        dom._internalValue = value;
                        dom._formattedValue = valueDate.toLocaleString(settings.locales, settings.options);
                        dom._internalFormatted = value;
                    }
                }
            }
            else{
                dom._internalValue = undefined;
                dom._formattedValue = '';
                dom._internalFormatted = '';
            }
        }
        else if (settings.toType === 'hours'){
            if (value){
                if (eventType == 'focus'){
                    dom._internalFormatted = D3Api.hours2time(dom._internalValue, settings.withSeconds);
                    return;
                }
                else if (eventType == 'blur'){
                    value = String(value).trim();
                    var regex = /^(\d{1,})(?::(\d{1,})(?::(\d{1,}))?)?$/;

                    try{
                        if (!regex.test(value)) throw 'Неверный формат временного интервала: '+value;
                        match = value.match(/^(\d{1,})(?::(\d{1,})(?::(\d{1,}))?)?/);

                        dom._internalValue =  +(match[1] | 0) + (match[2] | 0) / 60 + (match[3] | 0) / 3600;
                        dom._formattedValue = D3Api.hours2time(dom._internalValue, settings.withSeconds);
                        dom._internalFormatted =  dom._formattedValue;
                    }
                    catch(e){
                        D3Api.debug_msg(e);

                        // оставляем значение как было
                        if (dom._internalValue){
                            dom._formattedValue = D3Api.hours2time(dom._internalValue, settings.withSeconds);
                            dom._internalFormatted = dom._formattedValue;
                        }
                        else{
                            dom._internalValue = undefined;
                            dom._formattedValue = '';
                            dom._internalFormatted = '';
                        }
                    }
                }
                else { // setValue/setCaption - не иначе...
                    dom._internalValue = value;
                    dom._formattedValue = D3Api.hours2time(value, settings.withSeconds);
                    dom._internalFormatted = dom._formattedValue;
                }
            }
            else{
                dom._internalValue = undefined;
                dom._formattedValue = '';
                dom._internalFormatted = '';
            }
        }
    };

    /**
     *
     * @param dom
     * @param value
     */
    this.setPlaceHolder = function(dom,value)
    {
        var inp = D3Api.EditCtrl.getInput(dom);
        if(value !== undefined)
        {
            D3Api.setProperty(dom, 'placeholder', value);
            D3Api.setProperty(inp, 'placeholder', value);
        }
        if(inp.initPH)
        {
            setPh(inp);
            return;
        }
        inp._ph_ = false;
        if(D3Api.hasProperty(dom, 'placeholder') && !("placeholder" in document.createElement( "input" )))
        {
            inp.initPH = true;
            inp._ph_ = D3Api.getProperty(dom, 'placeholder');
            inp._pswd_ = D3Api.getProperty(inp,'type') == 'password';
            if (D3Api.BROWSER.msie && inp._pswd_ && inp.outerHTML) {
                inp._fp_ = D3Api.createDom(inp.outerHTML.replace(/type=(['"])?password\1/gi, 'type=$1text$1'));
                D3Api.hideDom(inp._fp_);
                D3Api.addDom(inp.parentNode,inp._fp_);
                inp._fp_.value = inp._ph_;
                D3Api.addEvent(inp._fp_, 'focus', function(){D3Api.hideDom(inp._fp_);D3Api.setDomDisplayDefault(inp);inp.focus();}, true);
            }
            setPh(inp);
            D3Api.addEvent(inp, 'blur', phBlur, true);
            D3Api.addEvent(inp, 'focus', phFocus, true);
            if(inp.form)
                D3Api.addEvent(inp.form, 'submit', phFormSubmit, true);
        }
    }
    function phBlur(e)
    {
        var inp = D3Api.getEventTarget(e);
        setPh(inp);
    }
    function setPh(inp)
    {
        if(inp._ph_ === false)
            return;
        if(inp.value == '')
        {
            if(inp._pswd_)
            {
                try
                {
                    D3Api.setProperty(inp,'type','text');
                }catch(e)
                {
                    D3Api.hideDom(inp);
                    D3Api.setDomDisplayDefault(inp._fp_);
                    return;
                }
            }
            inp.value = inp._ph_;
        }
    }
    function phFocus(e)
    {
        var inp = D3Api.getEventTarget(e);
        unSetPh(inp);
    }
    function unSetPh(inp)
    {
        if(inp._ph_ === false)
            return;
        if(inp.value == inp._ph_)
        {
            if(inp._pswd_)
            {
                try
                {
                    D3Api.setProperty(inp,'type','password');
                }catch(e)
                {
                    
                }
            }
            inp.value = '';
        }
    }
    function phFormSubmit(e)
    {
        
    }

     /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getInput = function Edit_getInput(_dom)
    {
        return D3Api.getChildTag(_dom,'input',0);
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setEnabled = function Edit_setEnabled(_dom, _value)
    {
        var input = D3Api.EditCtrl.getInput(_dom);
        //делаем активным
        if (D3Api.getBoolean(_value))
        {
            input.removeAttribute('disabled');
        }//делаем неактивным
        else
        {
            input.setAttribute('disabled','disabled');
        }
        D3Api.BaseCtrl.setEnabled(_dom,_value);
    }

    /**
     * @return { string } caption
     */
    this.getMaskProperty = function()
    {
        return 'caption';
    }
    
    /**
     * @return { string } caption
     */
    this.getDependencesProperty = function()
    {
        return 'caption';
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getValue = function Edit_getValue(_dom)
    {
        var inp = D3Api.EditCtrl.getInput(_dom);
        var res = inp.value;

        /* если есть форматирование, то берем значение из свойства */
        if (_dom.D3Base.events['onformat']){
            if (_dom.D3Store._properties_)
                res = _dom.D3Store._properties_.value;
        }

        if (_dom.D3Store.trim) {
            res = D3Api.stringTrim(res);
        }

        return res;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setValue = function Edit_setValue(_dom,_value)
    {
        if (_value === undefined) _value = null;

        _dom.D3Store._properties_ = _dom.D3Store._properties_ || {};
        _dom.D3Store._properties_.value == _value;

        /* необходимо, чтобы срабатывало событие onchange_property */
        D3Api.setControlPropertyByDom(_dom,'caption',_value);

        if (D3Api.hasClass(_dom, 'focus')){
            var inp = D3Api.EditCtrl.getInput(_dom);

            if (_dom._internalFormatted !== undefined) {
                inp.value = _dom._internalFormatted;
            }
        }
    }

    /* Берем значение поля ввода с учетом того, что там может быть PlaceHolder */
    /**
     *
     * @param _dom
     * @returns {string}
     */
    this.getCaption = function Edit_getCaption(_dom)
    {
        var inp = D3Api.EditCtrl.getInput(_dom);
        var res = (inp._ph_ && inp.value == inp._ph_)?'':((inp.value == null)?'':inp.value);

        return res;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setCaption = function Edit_setCaption(_dom,_value)
    {
        var inp = D3Api.EditCtrl.getInput(_dom);
        unSetPh(inp);

        /* если есть форматирование - обновляем внутреннее значение и отображение */
        if (_dom.D3Base.events['onformat']) {

            _dom.D3Base.callEvent('onformat', _value);

            _dom.D3Store._properties_ = _dom.D3Store._properties_ || {};
            if (_dom._internalValue !== undefined) {
                _dom.D3Store._properties_.value = _dom._internalValue;
            }
            else {
                _dom.D3Store._properties_.value = _value;
            }

            if (_dom._formattedValue !== undefined) {
                _value = _dom._formattedValue;
            }
        }

        inp.value=_value;
        setPh(inp);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getReadonly = function Edit_getReadonly(_dom)
    {
        return D3Api.hasProperty(D3Api.EditCtrl.getInput(_dom),'readonly');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setReadonly = function Edit_setReadonly(_dom,_value)
    {
        if (_value)
        {
            D3Api.EditCtrl.getInput(_dom).setAttribute('readonly','readonly');
        }else
        {
            D3Api.EditCtrl.getInput(_dom).removeAttribute('readonly','readonly');
        }
    }
}

D3Api.controlsApi['Edit'] = new D3Api.ControlBaseProperties(D3Api.EditCtrl);
D3Api.controlsApi['Edit']['height'] = undefined;
D3Api.controlsApi['Edit']['value']={get:D3Api.EditCtrl.getValue,set: D3Api.EditCtrl.setValue};
D3Api.controlsApi['Edit']['caption']={get:D3Api.EditCtrl.getCaption,set:D3Api.EditCtrl.setCaption}
D3Api.controlsApi['Edit']['enabled'].set = D3Api.EditCtrl.setEnabled;
D3Api.controlsApi['Edit']['input']={get: D3Api.EditCtrl.getInput, type: 'dom'};
D3Api.controlsApi['Edit']['readonly']={get:D3Api.EditCtrl.getReadonly,set: D3Api.EditCtrl.setReadonly};
D3Api.controlsApi['Edit']['placeholder']={set: D3Api.EditCtrl.setPlaceHolder};
/**
 *
 * @component
 */
D3Api.ButtonCtrl = new function()
{
     /**
     *
     * @param dom
     */
    this.init = function(dom)
    {
        this.init_focus(dom);
    }

    /**
     *
     * @param _dom
     * @param _value
     * @returns {boolean}
     */
    this.setCaption = function Button_setCaption(_dom,_value)
    {
        var c = _dom.querySelector('.btn_caption');

        if (c)
        {
            c.innerHTML = _value;
            return true;
        }
        return false;
    }

    /**
     *
     * @param _dom
     * @returns {string}
     */
    this.getCaption = function Button_getCaption(_dom)
    {
        var c = _dom.querySelector('.btn_caption');
        if (c)
            return c.innerHTML;
        return '';
    }

    /**
     *
     * @param dom
     * @param e
     */
    this.CtrlKeyDown = function(dom, e)
    {
        switch (e.keyCode)
        {
            case 32: //Пробел
            case 13: //Enter
                dom.click();
                D3Api.stopEvent(e);
                break;
        }
    }
    /* Функция прорисовки popupmenu, координаты контрола берутся
     * из dom с помощью функции getBoundingClientRect  */
    /**
     *
     * @param anyDom
     * @param menuName
     */
    this.showPopupMenu = function(anyDom,menuName)
    {
        var ctrl = D3Api.getControlByDom(anyDom);
        var menu = ctrl.D3Form.getControl(menuName);
        if (menu)
        {
            var coords = {
                left: ctrl.getBoundingClientRect().left +6,
                top:  ctrl.getBoundingClientRect().bottom + 6
            };
            menu.D3Store.popupObject = ctrl || menu.D3Store.popupObject;
            D3Api.PopupMenuCtrl.show(menu,coords);
        }
    }

    this.touchstartClick = function(event,_onClickFun){
        // Необходимо решить проблему запуска кнопки на заднем фоне, если закрывают модальное окно
        // console.log(event)
        // console.log(event.changedTouches[0].target.getAttribute("name"))
        // event.changedTouches[0]
        _onClickFun && _onClickFun();
    }
}

D3Api.controlsApi['Button'] = new D3Api.ControlBaseProperties(D3Api.ButtonCtrl);
D3Api.controlsApi['Button']['caption']={get:D3Api.ButtonCtrl.getCaption,set:D3Api.ButtonCtrl.setCaption};
D3Api.controlsApi['Button']['height'] = undefined;
/**
 *
 * @component
 */
D3Api.FormCtrl = new function(){

    /**
     *
     * @param dom
     */
    this.init = function(dom)
    {
        var fd = dom.D3Form.formData.sized;
        var sized = D3Api.getBoolean(D3Api.getProperty(dom,'sized',!!fd));
        if(fd)
        {
            fd.height && D3Api.setControlPropertyByDom(dom,'height',fd.height);
            fd.width && D3Api.setControlPropertyByDom(dom,'width',fd.width);
        }
        D3Api.FormCtrl.setSized(dom,sized);
    }
    function domInsertEvent(formDom)
    {
        D3Api.FormCtrl.setSized(formDom,formDom.D3Store.sized);
    }
    function domRemoveEvent(formDom)
    {
        if(formDom.D3Store.sized)
        {
            D3Api.removeClass(formDom.D3Form.container.DOM,'formSizedContainer');
        }
        formDom.D3Store.frameDom && D3Api.removeDom(formDom.D3Store.frameDom);
    }
    function domDestroyEvent(formDom)
    {
        var cf = formDom.D3Form.container.currentForm;
        if(cf && cf.DOM && cf.DOM.D3Store && !cf.DOM.D3Store.sized)
        {
            D3Api.removeClass(formDom.D3Form.container.DOM,'formSizedContainer');
        }
        formDom.D3Store.frameDom && D3Api.removeDom(formDom.D3Store.frameDom);
    }

    /**
     *
     * @param dom
     * @returns {boolean}
     */
    this.getSized = function(dom)
    {
        return !!dom.D3Store.sized;
    }
    function setFormCaption(caption)
    {
        var cDom = D3Api.getDomByAttr(this.DOM.D3Store.frameDom,'cont','caption');

        if(cDom) {
            D3Api.addTextNode(cDom, caption, true);
            D3Api.setProperty(cDom,'title',caption);
        }

    }

    /**
     *
     * @param dom
     * @param value
     */
    this.setSized = function(dom,value)
    {
        dom.D3Store.sized = value;
        if(dom.D3Store.sized)
        {
            D3Api.addClass(dom,'formSized');
            D3Api.addClass(dom.D3Form.container.DOM,'formSizedContainer');
            !dom.D3Store.sizedUidIns && (dom.D3Store.sizedUidIns = dom.D3Form.addEvent('onform_dominsert',domInsertEvent));
            !dom.D3Store.sizedUidRem && (dom.D3Store.sizedUidRem = dom.D3Form.addEvent('onform_domremove',domRemoveEvent));
            !dom.D3Store.sizedUidDes && (dom.D3Store.sizedUidDes = dom.D3Form.addEvent('onform_destroy',domDestroyEvent));
            !dom.D3Store.sizedUidResize && (dom.D3Store.sizedUidResize = dom.D3Form.addEvent('onResize',function(){calcPos(dom)}));
            !dom.D3Store.sizedUidCaption && (dom.D3Store.sizedUidCaption = dom.D3Form.addEvent('onformcaption',setFormCaption));
            if(!dom.D3Store.frameDom)
            {
                dom.D3Store.frameDom = D3Api.createDom('<div class="formFrame"><div class="frameCaption" cont="caption"></div><div class="frameClose" cmpparse="true" onclick="close();">X</div></div>');
                dom.D3Form.parse(dom.D3Store.frameDom);
                setFormCaption.call(dom.D3Form,dom.D3Form.getFormCaption());
            }
            D3Api.insertBeforeDom(dom,dom.D3Store.frameDom);
            calcPos(dom);
        }else
        {
            D3Api.removeClass(dom,'formSized');
            D3Api.removeClass(dom.D3Form.container.DOM,'formSizedContainer');
            dom.D3Form.removeEvent('onform_dominsert',dom.D3Store.sizedUidIns);
            dom.D3Store.sizedUidIns = null;
            dom.D3Form.removeEvent('onform_domremove',dom.D3Store.sizedUidRem);
            dom.D3Store.sizedUidRem = null;
            dom.D3Form.removeEvent('onform_destroy',dom.D3Store.sizedUidDes);
            dom.D3Store.sizedUidDes = null;
            dom.D3Form.removeEvent('onResize',dom.D3Store.sizedUidResize);
            dom.D3Store.sizedUidResize = null;
            D3Api.setStyle(dom,'margin-top','0');
            dom.D3Store.frameDom && D3Api.removeDom(dom.D3Store.frameDom);
        }
    }
    function calcPos(dom)
    {
        var contSize = D3Api.getAbsoluteClientRect(dom.D3Form.container.DOM);
        var frmSize = D3Api.getAbsoluteClientRect(dom);
        var frameBorderTop = +D3Api.getStyle(dom.D3Store.frameDom,'padding-top').replace('px','');
        var frameBorderLeft = +D3Api.getStyle(dom.D3Store.frameDom,'padding-left').replace('px','');
        var mTop = (contSize.height- frmSize.height+ frameBorderTop )/2;

        D3Api.setStyle(dom,'margin-top',(mTop<frameBorderTop?frameBorderTop:mTop)+'px');

        dom.D3Store.frameDom.style.height = frmSize.height+"px";
        dom.D3Store.frameDom.style.width = frmSize.width+"px";
        dom.D3Store.frameDom.style.top = (mTop<frameBorderTop?0:(mTop-frameBorderTop))+"px";
        dom.D3Store.frameDom.style.left = (frmSize.x-frameBorderLeft)+"px";
    }

    /**
     * Проверка прав на просмотр и редактирование записи раздела
     * @param dom - форма
     * @param unit - раздел
     * @param primary - значение primary записи раздела
     * @param isView - значение режима просмотра на форме
     * @param onSuccess - callback-функция
     */
    this.checkPrivs = function(dom, unit, primary, isView, onSuccess){
        var req = {
            checkPrivs: {type: 'Form', params: {
                unitcode: unit,
                id: primary,
                is_view: isView ? true : null
            }}
        };

        D3Api.requestServer({
            url: 'request.php',
            method: 'POST',
            urlData:{action: 'privs'},
            data: {request: D3Api.JSONstringify(req)},
            contextObj:dom,
            onSuccess: function(resp) {
                r = JSON.parse(resp);
                if (r.view != "1") {
                    D3Api.notify('Сообщение сервера', 'Нет права на просмотр записи', {modal: true});
                    dom.close();
                    return false;
                }
                dom.formEditMode = r.edit == "1" ? true : false;
                if (typeof onSuccess === 'function') onSuccess.call(dom, r);
            }
        });
    }

    /* Помечаем пользовательское событие onCreate как завершенное */
        /**
     *
     * @param dom
     */
    this.setCreated = function(dom){
        dom.isCreated = true;
    }
}

D3Api.controlsApi['Form'] = new D3Api.ControlBaseProperties(D3Api.FormCtrl);
D3Api.controlsApi['Form']['sized'] = {get:D3Api.FormCtrl.getSized, set:D3Api.FormCtrl.setSized};/**
 *
 * @component
 */
D3Api.LabelCtrl = new function () {
     /**
     *
     * @param dom
     */
    this.init = function (dom) {
        D3Api.BaseCtrl.initEvent(dom, 'onformat');
    };
    /**
     *
     * @param dom
     * @param {object} settings
     * @param {settings} toType - 'number' | 'date' | 'hours'
     * @param {settings} hideZero - скрывать ли нулевые значения (по умолчанию показываются)
     * @param {settings} showNull - показывать ли значения null (если true, то приводятся к числу. По умолчанию скрываются)
     * @param {settings} mask - (для даты) - маска, например, 'd.m.Y'
     * @param {settings} options - описание тут: https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString
     * @param value
     */
    this.format = function (dom, settings, value) {

        if (settings.toType === 'number'){
            if (value){
                value = settings.hideZero && Number(value) == 0 ? '' : Number(value);
            }
            else{ // null or 0
                value = !Number.isFinite(value) && settings.showNull || Number.isFinite(value) && !settings.hideZero ? Number(value) : '';
            }

        } else if (settings.toType === 'date' && value) {
            var dateMatch = value.match(/^(\d{2})\.(\d{2})\.(\d{4})(?=\s(\d{2}):(\d{2}):(\d{2})|)/);
            value = new Date(dateMatch[3], dateMatch[2] - 1, dateMatch[1], dateMatch[4] || 0, dateMatch[5] || 0, dateMatch[6] || 0);
            if (!dateMatch[4] && !settings.mask && !settings.options) settings.options = {year:'numeric', month:'numeric', day:'numeric'}; // не показываем время для обычной даты

            if (settings.mask){
                dom._formattedValue = D3Api.parseDate(settings.mask, value/1000);
                return;
            }
        }
        else if (settings.toType === 'hours' && value) {
            dom._formattedValue = D3Api.hours2time(value, settings.withSeconds);
            return;
        }

        if (value != null && value.toLocaleString) {
            dom._formattedValue = value.toLocaleString(settings.locales, settings.options);
        }
    };

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setCaption = function (_dom, _value) {
        _dom.D3Base.callEvent('onformat', _value);

        if (_dom._formattedValue !== undefined) {
            _value = _dom._formattedValue;
        }

        if (_value && D3Api.getProperty(_dom,'specialchars','true') == 'true')
        {
            var t = document.createElement('span');
            if(D3Api.hasProperty(_dom,'cmpparse') && !D3Api.hasProperty(_dom,'repeatername')){
                t.innerHTML = _value;
            }else{
                t.appendChild(document.createTextNode(_value));
            }
            _value = t.innerHTML;
            t = null;
        }
        //Кешируем
        _dom['label_before_caption'] = (_dom['label_before_caption'] != null)?_dom['label_before_caption']:D3Api.getProperty(_dom,'before_caption','');
        _dom['label_after_caption'] = (_dom['label_after_caption'] != null)?_dom['label_after_caption']:D3Api.getProperty(_dom,'after_caption','');
        if (!_dom['label_note'] && D3Api.hasProperty(_dom,'note'))
        {
            _dom['label_note'] = D3Api.getChildTag(_dom, 'span', 0);
        }
        var new_value = _value;
        if (!isNaN(_value))
            new_value = (_value === null) ? '' : String(_value);
        else
            if (typeof(_value) != 'string') new_value = '';

        var set_val = new_value;
        if (D3Api.getProperty(_dom,'formated',false) && new_value)
        {
            set_val = new_value.replace(/\r\n|\r|\n/g,'<br/>');
            if (!D3Api.hasProperty(_dom,'nonbsp'))
            {
                var m = set_val.match(/[ ]{2,}/g);
                if (m && m.length > 0)
                {
                    var mnbsp = m;

                    mnbsp = mnbsp.join(':').replace(/[ ]/g,"&nbsp;").split(":");
                    for (var p = 0; p < m.length; p++)
                    {
                        set_val = set_val.replace(m[p],mnbsp[p]);
                    }
                }
            }
        }
        set_val = _dom['label_before_caption']+set_val+_dom['label_after_caption'];
	    _dom.innerHTML=(new_value)?set_val:new_value='';
        if (_dom['label_note'])
        {
           if (set_val == '')
               _dom.innerHTML='&nbsp;';
           _dom.appendChild(_dom['label_note']);
        }
        if (D3Api.hasProperty(_dom,'hide_empty'))
        {
            D3Api.showDom(_dom,new_value!='');
        }
        _dom['label_caption'] = new_value;
        if(D3Api.hasProperty(_dom,'cmpparse') && !D3Api.hasProperty(_dom,'repeatername')){
            var uni = D3Api.getUniqId();
            var childs = _dom.childNodes;
            for(var i = 0 ; i < childs.length ; i++){
                if(childs[i].nodeType == 1){
                    _dom.D3Form.default_parse(childs[i],true, undefined,uni);
                }
            }
        }
    };
    
    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getCaption = function(_dom)
    {
        if (_dom['label_caption'])
        {
            return _dom['label_caption'];
        }
        return _dom.innerHTML;
    };
    this.setTitle = function(dom,value)
    {
        D3Api.setProperty(dom, 'title', value);
    };
};

D3Api.controlsApi['Label'] = new D3Api.ControlBaseProperties(D3Api.LabelCtrl);
D3Api.controlsApi['Label']['caption']={get:D3Api.LabelCtrl.getCaption,set:D3Api.LabelCtrl.setCaption};
D3Api.controlsApi['Label']['title'] = {set:D3Api.LabelCtrl.setTitle};
D3Api.controlsApi['Label']['height'] = undefined;
/**
 *
 * @component
 */
D3Api.LayoutSplitCtrl = new function ()
{
    //this.decimalSeparator = (1.1).toLocaleString().substring(1, 2);
    //this.thousandSeparator = (1000).toLocaleString().substring(1, 2);
    /**
     *
     * @param _dom
     */
    this.init = function(_dom) {
        var inp = D3Api.EditCtrl.getInput(_dom);
        this.init_focus(inp);
        //D3Api.addEvent(inp, 'change', function(event){ D3Api.stopEvent(event); }, true);
        //D3Api.BaseCtrl.initEvent(_dom,'onchange');
        //D3Api.BaseCtrl.initEvent(_dom,'onformat');
    }

    ///**********************************************************************************
    var oldLeft=new Number(0);
    var oldTop=new Number(0);
    var captureX=new Number(0);
    var captureY=new Number(0);
    var docMoveEvent=function(){};
    var docUpEvent=function(){};
    var modal_win;

    var blockEdit =null;
    var new_x = 0;
    var new_y = 0;

    this.touchSplit=function(evt,direction) {
          log("touchSplit",evt.changedTouches[0].target);



           if ((typeof direction === 'undefined')||( direction == '')) {
              direction = "left";
           }
           if (direction == "top") {
              blockEdit = evt.changedTouches[0].target.parentElement.previousSibling.firstChild;
           }
           if (direction == "bottom") {
               blockEdit = evt.changedTouches[0].target.parentElement.nextElementSibling.firstChild;
           }
           if (direction == "left"){
               blockEdit =evt.changedTouches[0].target.previousElementSibling;
           }
           if (direction == "right"){
               blockEdit =evt.changedTouches[0].target.nextElementSibling;
           }
           block = evt.changedTouches[0].target;
           rect = blockEdit.getBoundingClientRect()
           blockEdit.style.width = rect.width + "px";
           blockEdit.style.height = rect.height + "px";
           blockEdit.style.left =  rect.left + "px";
           blockEdit.style.top =  rect.top + "px";
           var ie = 0;
           var op = 0;
           var ff = 0;
           var browser = navigator.userAgent;
           if (browser.indexOf("Opera") != -1) op = 1;
           else {
             if (browser.indexOf("MSIE") != -1) ie = 1;
             else {
               if (browser.indexOf("Firefox") != -1) ff = 1;
             }
           }
           delta_x = 0;
           delta_y = 0;
           /* Ставим обработчики событий на нажатие и отпускание клавиши мыши */
           saveXY();
           // document.addEventListener('mouseup', clearXY, false);
           // document.addEventListener('mouseout', clearXY, false);
      	   addEvent(document,'touchend',clearXY);
      	   addEvent(document,'mouseout',clearXY);

           /* При нажатии кнопки мыши попадаем в эту функцию */
           function saveXY(obj_event) {
             /* Получаем текущие координаты курсора */
             x = window.event.clientX;
             y = window.event.clientY;
             x_block = rect.width;
             y_block = rect.height;
             delta_x = x_block - x;
             delta_y = y_block - y;
             if (op || ff) {
   	    	     addEvent(document,'touchmove',moveBlock,false);
   	    	     // document.addEventListener('mousemove', saveXY, false);
                 // block.addEventListener("onmousemove", moveBlock, false);
             } else {
                 document.onmousemove = moveBlock;
             }
           }
           function clearXY() {
             removeEvent(document,'touchmove',moveBlock);
             removeEvent(document,'touchend',clearXY);
           }
           function moveBlock(obj_event) {
              log("obj_event",obj_event.buttons)
              if (obj_event.buttons !== 1){
                 if (op || ff) {
                    removeEvent(document,'touchmove',moveBlock);
                 } else {
                    document.onmousemove = null; // При отпускании мыши убираем обработку события движения мыши
                 }
                 return false
              }
              /* Получаем новые координаты курсора мыши */
              // x = window.event.clientX;
              // y = window.event.clientY;
              x = window.event.changedTouches[0].clientX;
              y = window.event.changedTouches[0].clientY;
              /* Вычисляем новые координаты блока */
              if ((direction == "left")||(direction == "right")) {
                 new_x = delta_x + x;
                 //obj_event.target.style.width = new_x + "px";
                 blockEdit.style.width = new_x + "px";
              }
              if (direction == "top") {
                 new_y = delta_y + y;
                 //obj_event.target.style.height = new_y + "px";
                 blockEdit.style.height = new_y + "px";
              }
              if (direction == "bottom") {
                 // В контейнере окно необходимо инвертировать  перемещение  нижнего блока
                 new_y =  delta_y + y;
                 //obj_event.target.style.height = new_y + "px";
                 blockEdit.style.height = new_y + "px";
              }
           }
           return false;
    }
    this.moveSplit=function(evt,direction) {
           if ((typeof direction === 'undefined')||( direction == '')) {
              direction = "left";
           }
           if (direction == "top") {
              blockEdit = evt.target.parentElement.previousSibling.firstChild;
           }
           if (direction == "bottom") {
               blockEdit = evt.target.parentElement.nextElementSibling.firstChild;
           }
           if (direction == "left"){
               blockEdit =evt.target.previousElementSibling;
           }
           if (direction == "right"){
               blockEdit =evt.target.nextElementSibling;
           }
           block = evt.target;
           rect = blockEdit.getBoundingClientRect()
           blockEdit.style.width = rect.width + "px";
           blockEdit.style.height = rect.height + "px";
           blockEdit.style.left =  rect.left + "px";
           blockEdit.style.top =  rect.top + "px";
           var ie = 0;
           var op = 0;
           var ff = 0;
           var browser = navigator.userAgent;
           if (browser.indexOf("Opera") != -1) op = 1;
           else {
             if (browser.indexOf("MSIE") != -1) ie = 1;
             else {
               if (browser.indexOf("Firefox") != -1) ff = 1;
             }
           }
           delta_x = 0;
           delta_y = 0;
           /* Ставим обработчики событий на нажатие и отпускание клавиши мыши */
           saveXY();
           // document.addEventListener('mouseup', clearXY, false);
           // document.addEventListener('mouseout', clearXY, false);
      	   addEvent(document,'mouseup',clearXY);
      	   addEvent(document,'mouseout',clearXY);

           /* При нажатии кнопки мыши попадаем в эту функцию */
           function saveXY(obj_event) {
             /* Получаем текущие координаты курсора */
             x = window.event.clientX;
             y = window.event.clientY;
             x_block = rect.width;
             y_block = rect.height;
             delta_x = x_block - x;
             delta_y = y_block - y;
             if (op || ff) {
   	    	     addEvent(document,'mousemove',moveBlock,false);
   	    	     // document.addEventListener('mousemove', saveXY, false);
                 // block.addEventListener("onmousemove", moveBlock, false);
             } else {
                 document.onmousemove = moveBlock;
             }
           }
           function clearXY() {
             if (op || ff) {
                //block.removeEventListener("onmousedown", saveXY, false);
                //removeEvent(document,'mousemove',moveBlock);
             } else {
               // document.onmousemove = null; // При отпускании мыши убираем обработку события движения мыши
             }
           }
           function moveBlock(obj_event) {
              if (obj_event.buttons !== 1){
                 if (op || ff) {
                    removeEvent(document,'mousemove',moveBlock);
                 } else {
                    document.onmousemove = null; // При отпускании мыши убираем обработку события движения мыши
                 }
                 return false
              }
              /* Получаем новые координаты курсора мыши */
              x = window.event.clientX;
              y = window.event.clientY;
              /* Вычисляем новые координаты блока */
              if ((direction == "left")||(direction == "right")) {
                 new_x = delta_x + x;
                 //obj_event.target.style.width = new_x + "px";
                 blockEdit.style.width = new_x + "px";
              }
              if (direction == "top") {
                 new_y = delta_y + y;
                 //obj_event.target.style.height = new_y + "px";
                 blockEdit.style.height = new_y + "px";
              }
              if (direction == "bottom") {
                 // В контейнере окно необходимо инвертировать  перемещение  нижнего блока
                 new_y =  delta_y + y;
                 //obj_event.target.style.height = new_y + "px";
                 blockEdit.style.height = new_y + "px";
              }
           }
           return false;
        }
    ///**********************************************************************************

}
D3Api.controlsApi['LayoutSplit'] = new D3Api.ControlBaseProperties(D3Api.LayoutSplitCtrl);
//D3Api.controlsApi['Button']['caption']={get:D3Api.ButtonCtrl.getCaption,set:D3Api.ButtonCtrl.setCaption};
//D3Api.controlsApi['Button']['height'] = undefined;
/**
 *
 * @component
 */
D3Api.ComboBoxCtrl = new function ()
{
    /**
     *
     * @param _dom
     */
    this.init = function(_dom)
    {
        var inp = D3Api.ComboBoxCtrl.getInput(_dom);
        this.init_focus(inp);
        D3Api.addEvent(inp, 'change', function(event){
            D3Api.stopEvent(event);
        }, true);
        _dom.D3Base.addEvent('onchange_property',function(property,value,oldValue){
           if(property == 'value' || (_dom.D3Store.anychange && D3Api.getProperty(_dom,'anyvalue','false') != 'false' && property == 'caption'))
               //D3Api.execDomEvent(_dom,'onchange');
               _dom.D3Base.callEvent('onchange',value,oldValue);
        });
        _dom.D3Store.anychange = D3Api.getProperty(_dom,'anychange','false') == 'true';
        _dom.D3Store.multiselect = D3Api.getProperty(_dom,'multiselect','false') == 'true';
        _dom.D3Store.notRootNode = [];//несвязанные элементы у которых нет родителского элемента(для иерархического отображение.)
        D3Api.BaseCtrl.initEvent(_dom,'onchange','value,oldValue');
        D3Api.BaseCtrl.initEvent(_dom,'onshowlist','list');
        D3Api.ComboBoxCtrl.create(_dom);
        var dl = D3Api.getDomByAttr(_dom, 'cont', 'cmbbdroplist');
        dl._parentDOM_ = dl.parentNode;
        var itemsR = D3Api.getProperty(_dom, 'items_repeatername');
        if(itemsR)
        {
             /*
            _dom.D3Form.getRepeater(itemsR).addEvent('onbefore_repeat',function(container){
                if(D3Api.isChildOf(_dom, container))
                    D3Api.ComboItemCtrl.onRefresh(_dom);
            });
            */

            /*
            _dom.D3Form.getRepeater(itemsR).addEvent('onafter_repeat',function(container){
                if(D3Api.isChildOf(_dom, container))
                    D3Api.ComboItemCtrl.afterRefresh(_dom);
            });
            */
        }
        D3Api.ComboBoxCtrl.prepareInputMode(_dom);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getInput = function ComboBoxCtrl_getInput(_dom)
    {
        return D3Api.getChildTag(_dom,'input',0);
    }
    /**
     *
     * @param _dom
     */
    this.create = function ComboBoxCtrl_create(_dom)
    {   _dom.options = null;
        _dom._droplistDom = null;
        _dom.dynItems = D3Api.hasProperty(_dom, 'dynitems');
        D3Api.ComboBoxCtrl.setOptions(_dom);
        D3Api.ComboBoxCtrl.refreshEmptyItem(_dom);
        var input = D3Api.ComboBoxCtrl.getInput(_dom);
        input._combo_box = _dom;
        var item = D3Api.ComboBoxCtrl.getItemDataset(_dom);
        if (item != null) return;
        item = D3Api.ComboBoxCtrl.getItemStaticSelected(_dom);
        if (item == null) return;
        D3Api.ComboBoxCtrl.setItemSelected(_dom,item.option);
    }

    /**
     *
     * @param _dom
     */
    this.postClone = function ComboBoxCtrl_postClone(_dom)
    {
        D3Api.ComboBoxCtrl.setOptions();

        var item = D3Api.ComboBoxCtrl.getItemByValue(_dom, D3Api.ComboBoxCtrl.getValue(_dom));

        if (item == null)
                return;

        D3Api.ComboBoxCtrl.refreshEmptyItem(_dom);

        D3Api.ComboBoxCtrl.setItemSelected(_dom,item.option);
    }

    /**
     *
     * @param _dom
     */
    this.setOptions = function ComboBoxCtrl_setOptions(_dom)
    {
        if (!_dom.options || _dom.options.length == 0)
        {
            var drop_list = D3Api.ComboBoxCtrl.getDropList(_dom);
            var child = drop_list.children;
            for (var i=0, child; item_container = child[i]; i++) {
                if(item_container.nodeType === 1){
                    _dom.optionsCont = item_container;
                    _dom.options = item_container.rows;
                    break;
                }
            }

        }
    }

    /**
     *
     * @param _dom
     */
    this.getDropList = function ComboBoxCtrl_getDropList(_dom)
    {
        if (_dom._droplistDom)
        {
            return _dom._droplistDom;
        }
        var dl = D3Api.getDomByAttr(_dom, 'cont', 'cmbbdroplist');

        _dom._droplistDom = dl;//D3Api.getChildTag(dl, 'div', 0);
        _dom._dropListCont = _dom._droplistDom.parentNode;
        _dom._droplistDom._ComboBoxDom = _dom;
        return _dom._droplistDom;
    }

    /**
     *
     * @param _dom
     * @returns {null|{caption, value: string, option: *}}
     */
    this.getItemStaticSelected = function ComboBoxCtrl_getItemStaticSelected(_dom)
    {
        var first_item = null;
        for (var i = 0, co = _dom.options.length; i < co; i++)
        {
            var item = _dom.options[i];

            if (i == 0 && !D3Api.hasProperty(item,'clone') && D3Api.getProperty(_dom,'anyvalue','false'))
                    first_item = returnItem(item);

            if (D3Api.hasProperty(item,'selected'))
                    return returnItem(item);
        }
        return _dom.D3Store.multiselect?null:first_item;
    }

    /**
     *
     * @param _dom
     * @returns {null|*}
     */
    this.getItemSelected = function ComboBoxCtrl_getItemStaticSelected(_dom)
    {
        if(_dom.selected_item)
            return _dom.selected_item.parentNode?returnItem(_dom.selected_item):D3Api.ComboBoxCtrl.getItemByIndex(_dom,0);
        else
            return null;
    }

    /**
     *
     * @param _dom
     * @returns {null|{caption, value: string, option: *}}
     */
    this.getItemDataset = function ComboBoxCtrl_getItemDataset(_dom)
    {
        for (var i = 0, co = _dom.options.length; i < co; i++)
        {
            var item = _dom.options[i];
            if (D3Api.hasProperty(item,'onafterrefresh'))
                    return returnItem(item);
        }
        return null;
    }

    /**
     *
     * @param _dom
     * @param index
     * @returns {null|{caption, value: string, option: *}}
     */
    this.getItemByIndex = function ComboBoxCtrl_getItemByIndex(_dom, index)
    {
        var item = _dom.options[index];
        if (item == null || D3Api.hasProperty(item,'isD3Repeater'))
            return null;

        return returnItem(item);
    }

    /**
     *
     * @param _dom
     * @param option
     * @returns {number|DStatGrid.ShowRecords.rowIndex|DStatGrid.refreshDataPart._trObject.rowIndex|DStatGrid.IntermediateSummaryShow.rowIndex|DStatGrid.insertExpandedList._trObject.rowIndex|null}
     */
    this.getItemIndex = function ComboBoxCrtl_getItemIndex(_dom, option)
    {
        if (option)
        {
            return option.rowIndex;
        }
        return null;
    }

    /**
     *
     * @param _dom
     * @param _value
     * @returns {null|{caption, value: string, option: *}}
     */
    this.getItemByValue = function ComboBoxCtrl_getItemByValue(_dom, _value)
    {
        for (var i = 0, co = _dom.options.length; i < co; i++)
        {
            var item = _dom.options[i];
            if (!D3Api.hasProperty(item,'isD3Repeater') && ''+D3Api.ComboItemCtrl.getValue(item) == ''+_value)
                    return returnItem(item);
        }
        return null;
    }

    /**
     *
     * @param _dom
     * @param _caption
     * @returns {null|{caption, value: string, option: *}}
     */
    this.getItemByCaption = function ComboBoxCtrl_getItemByCaption(_dom, _caption)
    {
        for (var i = 0, co = _dom.options.length; i < co; i++)
        {
            var item = _dom.options[i];
            if (!D3Api.hasProperty(item,'isD3Repeater') && ''+D3Api.ComboItemCtrl.getCaption(item) == ''+_caption)
                return returnItem(item);
        }
        return null;
    }

    /**
     *
     * @param item
     * @returns {{caption: string, value: string, option: *}}
     */
    var returnItem = function(item)
    {
        return {option: item, value: D3Api.ComboItemCtrl.getValue(item), caption: D3Api.ComboItemCtrl.getCaption(item)};
    }

    /**
     *
     * @param _dom
     */
    this.refreshEmptyItem = function ComboBoxCtrl_refreshEmptyItem(_dom)
    {
        for (var i = 0, co = _dom.options.length; i < co; i++)
        {
            var item = _dom.options[i];
            item.isEmptyItem = false;
            var cnt = D3Api.getChildTag(item,'span',1);
            if (cnt.innerHTML == "")
            {
                cnt.innerHTML = "&nbsp;";
                item.isEmptyItem = true;
            }
        }
    }

    /**
     *
     * @param _dom
     * @param option
     */
    this.setItemSelected = function ComboBoxCtrl_setItemSelected(_dom,option)
    {
            if (option && D3Api.hasProperty(option,'isD3Repeater'))
            {
                option = undefined;
            }
            var old_caption = D3Api.ComboItemCtrl.getCaption(_dom["selected_item"]);
            _dom.setAttribute('keyvalue', (option)?D3Api.ComboItemCtrl.getValue(option):'');

            if(!_dom.D3Store.multiselect){
                if (_dom["selected_item"])
                    D3Api.removeClass(_dom.selected_item, "combo-item-selected");

                if (option)
                    D3Api.addClass(option, "combo-item-selected");
            }
            _dom.selected_item = option;

            _dom.selectedIndex = (option)?option.rowIndex:-1;

            var new_caption = D3Api.ComboBoxCtrl.getCaption(_dom);
            new_caption = (option)?D3Api.ComboItemCtrl.getCaption(option):((old_caption == new_caption)?'':new_caption);
            var _input = D3Api.ComboBoxCtrl.getInput(_dom);
            _input.value = new_caption;
            _dom.D3Base.callEvent('onchange_property','caption',new_caption,old_caption);
    }
    
    /**
     *
     * @param _dom
     */
    this.onChangeCall = function ComboBoxCtrl_onChangeCall(_dom)
    {
        //_dom.D3Base.callEvent('onchange_property','value',D3Api.ComboBoxCtrl.getValue(_dom));
        //D3Api.execDomEvent(_dom,'onchange');
    }
    
    /**
     *
     * @param _dom
     * @param value
     * @param caption
     * @returns {boolean}
     * @private
     */
    this._addNewItem = function(_dom,value,caption)
    {
        if(D3Api.getProperty(_dom,'additem','false') == 'false')
            return false;

        _dom.addItemValue = value || _dom.addItemValue;
        _dom.addItemCaption = caption || _dom.addItemCaption;
        if(!D3Api.isUndefined(_dom.addItemValue) && !D3Api.isUndefined(_dom.addItemCaption))
        {
            D3Api.ComboBoxCtrl.addItem(_dom,_dom.addItemCaption,_dom.addItemValue,true);
            D3Api.ComboBoxCtrl.setValue(_dom,_dom.addItemValue);
            D3Api.ComboBoxCtrl.setCaption(_dom,_dom.addItemCaption);
            _dom.addItemValue = undefined;
            _dom.addItemCaption = undefined;
            return true;
        }
        return false;
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getValue = function ComboBoxCtrl_getValue(_dom)
    {
        var _value = null;

        if (_dom.storedValue != undefined)
            return _dom.storedValue;
        _value = D3Api.getProperty(_dom, 'keyvalue', '');

        return D3Api.isUndefined(_value)?'':_value;
    }

    /**
     *
     * @param _dom
     * @param _value
     * @param res
     * @returns {boolean}
     */
    this.setValue = function ComboBoxCtrl_setValue(_dom,_value,res)
    {
        if(_dom.D3Store.multiselect)
        {
            return D3Api.ComboBoxCtrl.setMultiValue(_dom,_value,res);
        }

        if (_value == undefined)
        {
            if (D3Api.getProperty(_dom,'anyvalue','false')=='false')
                return false;

            D3Api.ComboBoxCtrl.setItemSelected(_dom, undefined);
            return true;
        }

        var item = D3Api.ComboBoxCtrl.getItemByValue(_dom,_value);

        if (item == null)
        {
            if(!_dom.dynItems)
            {
                if(D3Api.ComboBoxCtrl._addNewItem(_dom,_value))
                    return true;
            }
            _dom.storedValue = (_dom.dynItems)?_value:undefined;

            item = D3Api.ComboBoxCtrl.getItemByIndex(_dom,0);
            if (item == null)
            {
                if(D3Api.getProperty(_dom,'anyvalue','false') == 'false')
                    return false;
                else
                    item = {option: undefined};
            }
            D3Api.ComboBoxCtrl.setItemSelected(_dom,item.option);

            res.value = (_dom.dynItems)?_value:D3Api.getProperty(_dom,'keyvalue');
            return true;
        }

        D3Api.ComboBoxCtrl.setItemSelected(_dom, item.option);
        return true;
    }

    /**
     *
     * @param _dom
     * @param _value
     * @param res
     * @returns {boolean}
     */
    this.setMultiValue = function ComboBoxCtrl_setMultiValue(_dom,_value,res)
    {
        //Очищаем если это система
        if(!D3Api.isUserEvent())
        {
            for(var i = 0; i < _dom.options.length; i++)
            {
                if((D3Api.hasProperty(_dom.options[i],'isd3repeater'))||
                    (D3Api.hasProperty(_dom.options[i],'isd3repeaterSkip')))
                    continue;
                D3Api.ComboItemCtrl.stateItem(_dom.options[i],false);
            }
        }
        if (_value == undefined)
        {
            return true;
        }
        _value = ''+_value;
        if(_dom.dynItems)
        {
            _dom.storedValue = _value;
            return true;
        }
        var tmpval = _value.split(';');
        var exval = [];
        var tmpcp = [];
        var all = true;
        for(var i = 0; i < _dom.options.length; i++)
        {
            if((D3Api.hasProperty(_dom.options[i],'isD3Repeater'))
              ||(D3Api.hasProperty(_dom.options[i],'isd3repeaterSkip')))
                continue;
            var vl = D3Api.ComboItemCtrl.getValue(_dom.options[i]);
            if(tmpval.indexOf(vl) != -1)
            {
                var cp = D3Api.ComboItemCtrl.getCaption(_dom.options[i]);
                D3Api.ComboItemCtrl.stateItem(_dom.options[i],true);
                tmpcp.push(cp);
                exval.push(vl);
            }else
                all = false;
        }

        setAllChecked(_dom,all);
        res.value = exval.join(';');
        _dom.setAttribute('keyvalue', res.value);

        var _input = D3Api.ComboBoxCtrl.getInput(_dom);
        _input.value = tmpcp.join(';');
    }
    function setAllChecked(_dom, state)
    {
        var inp = D3Api.getChildTag(_dom.options[0],'input',0);
        inp.checked = state;
    }

    /**
     *
     * @param _dom
     * @param state
     */
    this.setStateAll = function(_dom,state)
    {
        if(state) {
            var vals = [];
            for(var i = 0; i < _dom.options.length; i++) {
                if (_dom.options[i].getAttribute("isd3repeaterSkip") !== null) { continue; }
                var valueItems = D3Api.ComboItemCtrl.getValue(_dom.options[i]);
                if (valueItems.length > 0) {
                    vals.push(D3Api.ComboItemCtrl.getValue(_dom.options[i]));
                }
                _dom.options[i].querySelector('[type="checkbox"]').checked = false;
            }
            txt = vals.join(';'); //txt.substr(1);
            if (txt.substr(0,1)==';') {
               txt = txt.substr(1);
            }
            _dom.querySelector('[cmpparse="ComboBox"]').value = txt;
        } else {
            for(var i = 0; i < _dom.options.length; i++) {
                if (_dom.options[i].getAttribute("isd3repeaterSkip") !== null) { continue; }
                _dom.options[i].querySelector('[type="checkbox"]').checked = false;
            }
            _dom.querySelector('[cmpparse="ComboBox"]').value = "";
        }
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getCaption = function ComboBoxCtrl_getCaption(_dom)
    {
        var inp = D3Api.ComboBoxCtrl.getInput(_dom);
        return D3Api.isUndefined(inp.value)?'':inp.value;
    }

    /**
     *
     * @param _dom
     * @param _value
     * @returns {boolean}
     */
    this.setCaption = function ComboBoxCtrl_setCaption(_dom,_value)
    {
            //Проверить есть ли такое значение
            var c = _dom.options.length;
            var haveOpt = null;
            for(var o = 0; o < c; o++)
            {
                if (D3Api.ComboItemCtrl.getCaption(_dom.options[o]) == _value)
                {
                    haveOpt = _dom.options[o];
                    break;
                }
            }
            if (!haveOpt)
            {
                if(D3Api.ComboBoxCtrl._addNewItem(_dom,undefined,_value))
                    return true;

                D3Api.setControlPropertyByDom(_dom,'value',undefined);

                var _input = D3Api.ComboBoxCtrl.getInput(_dom);
                _input.value = D3Api.isUndefined(_value)?'':_value;
            }else
                D3Api.setControlPropertyByDom(_dom,'value',D3Api.ComboItemCtrl.getValue(haveOpt));
            return true;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setEnabled = function ComboBoxCtrl_setEnabled(_dom, _value)
    {
        var input = D3Api.ComboBoxCtrl.getInput(_dom);
        //делаем активным
        if (_value)
        {
            input.removeAttribute('disabled');
        }//делаем неактивным
        else
        {
            input.setAttribute('disabled','disabled');
        }
        D3Api.BaseCtrl.setEnabled(_dom,_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getReadonly = function ComboBoxCtrl_getReadonly(_dom)
    {
        return D3Api.hasProperty(D3Api.ComboBoxCtrl.getInput(_dom),'readonly');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setReadonly = function ComboBoxCtrl_setReadonly(_dom,_value)
    {
        if (_value)
        {
            D3Api.ComboBoxCtrl.getInput(_dom).setAttribute('readonly','readonly');
        }else
        {
            D3Api.ComboBoxCtrl.getInput(_dom).removeAttribute('readonly','readonly');
        }
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getSelectedItem = function(dom)
    {
        return dom.selected_item;
    }

    /**
     *
     * @param dom
     * @returns {{}|*}
     */
    this.getDataSelectedItem = function(dom)
    {
        if(!dom.selected_item || !dom.selected_item.clone)
            return {};

        return dom.selected_item.clone.data;
    };
    
    /**
     *
     * @param _dom
     * @param _value
     */
    this.removeItemByItValue = function(_dom,_value){
        var val = D3Api.getControlPropertyByDom(_dom,'value');
        var rows = _dom.optionsCont.rows;
        for(var i = rows.length - 1 ; 0 < i ; i--){
            var value = D3Api.getControlPropertyByDom(rows[i],'value');
            if(value == _value){
                _dom.optionsCont.deleteRow(i);
            }
        }
        if(val == _value){
            var item = D3Api.ComboBoxCtrl.getItemByIndex(_dom,0);
            if(item){
                D3Api.ComboBoxCtrl.setItemSelected(_dom,item.option);
                D3Api.ComboBoxCtrl.setOptions(_dom);
            }
        }
    }

    /**
     *
     * @param _dom
     * @param caption
     * @param value
     * @param begin
     */
    this.addItem = function ComboBoxCtrl_addItem(_dom,caption,value,begin)
    {
        var r = _dom.optionsCont.insertRow(begin?0:-1);
        var name = D3Api.getProperty(_dom,'name');
        D3Api.setProperty(r, 'cmptype', 'ComboItem');
        var c = r.insertCell(0);
        D3Api.addDom(c,D3Api.createDom('<div><span class="btnOC" comboboxname="'+name+'"></span><span cont="itemcaption"></span></div>'));
        D3Api.ComboItemCtrl.setCaption(r,caption);
        D3Api.ComboItemCtrl.setValue(r,(value != undefined)?value:caption);

        D3Api.ComboBoxCtrl.setOptions(_dom);
    }

    /**
     *
     * @param _dom
     */
    this.clearItems = function ComboBoxCtrl_clearItems(_dom)
    {
        while(_dom.options.length)
            _dom.optionsCont.deleteRow(0);

        D3Api.ComboBoxCtrl.setCaption(_dom,'',true);
        _dom.setAttribute('keyvalue','');
        _dom.selected_item = null;
    }

    /**
     *
     * @param _dom
     * @param option
     */
    this.markedItemSelected = function ComboBoxCtrl_markedItemSelected(_dom,option)
    {
        if (_dom["selected_item"])
            D3Api.removeClass(_dom.selected_item, "combo-item-selected");

        D3Api.addClass(option, "combo-item-selected");
        _dom.selected_item = option;
    }

    /**
     *
     * @param combo_box
     */
    this.keyUpInput = function ComboBoxCtrl_KeyUpInput(combo_box)
    {
            var event = D3Api.getEvent();

            if (!combo_box.options || D3Api.ComboBoxCtrl.getReadonly(combo_box))
            {
                    return;
            }

            //37 left
            //38 top
            //39 right
            //40 down
            //115 F4
            //13 enter
            //9 tab
            // 17 control
            switch (event.keyCode)
            {
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 115:
                    case 13:
                    case 9:
                    case 27:
                    case 17:
                        break;
                    default:
                            D3Api.ComboBoxCtrl.refreshInputModeValue(combo_box,D3Api.ComboBoxCtrl.getInput(combo_box));
                        break;
            }
    }
    /**
     *
     * @param combo_box
     * @returns {boolean}
     */
    this.keyDownInput = function ComboBoxCtrl_keyDownInput(combo_box)
    {
        var delta = 0;
        var event = D3Api.getEvent();

        if (!combo_box.options || D3Api.ComboBoxCtrl.getReadonly(combo_box))
        {
            return;
        }
        var drop_list = D3Api.ComboBoxCtrl.getDropList(combo_box);
        //38 up
        //40 down
        //115 F4
        //13 enter
        //9 tab
        switch (event.keyCode)
        {
                case 38:
                                delta = -1;
                        break;
                case 40:
                                delta = 1;
                        break;
                case 115:
                                if (drop_list.style.display != 'block')
                                {
                                    var _input = D3Api.ComboBoxCtrl.getInput(combo_box);
                                    D3Api.ComboBoxCtrl.downClick(combo_box);
                                }else{
                                    D3Api.ComboBoxCtrl.hideDropList(drop_list);
                                    D3Api.removeEvent(document, 'click', drop_list.functionHook, true);
                                    D3Api.removeEvent(document, 'scroll', drop_list.functionHook, true);
                                    D3Api.stopEvent(event);
                                }
                                return;
                        break;
                case 13:
                                var selectRow = function() {
                                    var option = combo_box.options[combo_box["selected_item"].rowIndex];

                                    if (option) {
                                        var _input = D3Api.ComboBoxCtrl.getInput(combo_box);
                                        _input.value = D3Api.ComboItemCtrl.getCaption(option);
                                    } else {
                                        D3Api.setControlPropertyByDom(combo_box,'value',undefined);
                                    }
                                }
                                if(!(D3Api.getProperty(combo_box,'multiselect') == 'true')){
                                    D3Api.setControlPropertyByDom(combo_box, 'value', D3Api.ComboItemCtrl.getValue(combo_box["selected_item"]),undefined,true);
                                }else {
                                    if (combo_box["selected_item"] && combo_box.selectedIndex != combo_box["selected_item"].rowIndex)
                                    {

                                        if(D3Api.hasProperty(combo_box["selected_item"],'isD3Repeater'))
                                        {
                                            var ch = D3Api.getChildTag(combo_box["selected_item"],'input',0);
                                            if(!ch.checked || ch.checked == 0){
                                                ch.checked = 1
                                            }else{
                                                ch.checked = 0
                                            }
                                            D3Api.ComboBoxCtrl.setStateAll(D3Api.getControlByDom(ch,'ComboBox'),ch.checked);
                                        } else {
                                            var domch = D3Api.getDomByAttr(combo_box["selected_item"],'cont','multicheck');
                                            D3Api.CheckBoxCtrl.setValue(domch,!D3Api.CheckBoxCtrl.getValue(domch));
                                            D3Api.ComboItemCtrl.checkItem(combo_box["selected_item"]);
                                        }
                                        if(event.ctrlKey)
                                            return false;
                                    }
                                }
                                if (drop_list.style.display == 'block')
                                {
                                    selectRow();
                                    D3Api.ComboBoxCtrl.hideDropList(drop_list);
                                    D3Api.removeEvent(document, 'click', drop_list.functionHook, true);
                                    D3Api.removeEvent(document, 'scroll', drop_list.functionHook, true);
                                    D3Api.stopEvent(event);
                                } else if (combo_box.getAttribute('droplist') == 'onenter') {
                                    // Счетчик количества элементов выпадающего списка,
                                    // подходящих под введенное в ComboBox значение
                                    var result = 0;
                                    // Первый элемент выпадающего списка
                                    var first_option = false;

                                    for (var i = 0; i < combo_box.options.length; i++) {
                                        if (combo_box.options[i].style.display != 'none') {
                                            first_option = first_option || combo_box.options[i];
                                            result++;
                                            // Если в выпадающем списке больше одного элемента, прерываем цикл
                                            if (result == 2) break;
                                        }
                                    }
                                    // Если в выпадающем списке один элемент,
                                    // проставляем value без открытия списка
                                    if (result == 1) {
                                        selectRow();
                                        D3Api.ComboBoxCtrl.setItemSelected(combo_box, first_option);
                                    } else {
                                        D3Api.ComboBoxCtrl.markedItemSelected(combo_box, first_option);
                                        D3Api.ComboBoxCtrl.dropListSetSizePos(D3Api.ComboBoxCtrl.getDropList(combo_box));
                                    }
                                }
                                return;
                        break;
                case 27:
                case 9:
                                if (drop_list.style.display == 'block')
                                {
                                        D3Api.ComboBoxCtrl.hideDropList(drop_list);
                                        D3Api.removeEvent(document, 'click', drop_list.functionHook, true);
                                        D3Api.removeEvent(document, 'scroll', drop_list.functionHook, true);
                                } else if (combo_box.getAttribute('droplist') == 'onenter') {
                                    D3Api.ComboBoxCtrl.setValue(combo_box, D3Api.ComboBoxCtrl.getValue(combo_box));
                                    return;
                                }
                        break;
                default:
                        return;
        }
        var new_index = -1;
        if(combo_box["selected_item"]){
            new_index = combo_box["selected_item"].rowIndex;
        }
        new_index += delta;
        while(new_index >= 0 && combo_box.options[new_index] && combo_box.options[new_index].style.display == 'none')
            new_index = new_index + delta;

        if (new_index < 0 || new_index > combo_box.options.length-1)
                return;

        var option = combo_box.options[new_index];
        if (!option || (D3Api.hasProperty(option,'isD3Repeater') && D3Api.getProperty(option,'cmptype') != 'ComboItem'))
                return;

        if (drop_list.style.display == 'none')
        {
            var _input = D3Api.ComboBoxCtrl.getInput(combo_box);
            _input.value = D3Api.ComboItemCtrl.getCaption(option);
            if (combo_box["selected_item"] && combo_box.selectedIndex != combo_box["selected_item"].rowIndex)
            {
                    D3Api.setControlPropertyByDom(combo_box, 'value', D3Api.ComboItemCtrl.getValue(combo_box["selected_item"]),undefined,true);
            }
        }

        D3Api.ComboBoxCtrl.markedItemSelected(combo_box,option);
        drop_list.scrollTop = Math.ceil( option.offsetTop - drop_list.offsetHeight/2 );
    }
    /**
     *
     * @param _dom
     * @param input
     */
    this.refreshInputModeValue = function ComboBoxCtrl_refreshInputModeValue(_dom,input)
    {
        if(!input)
            input = D3Api.ComboBoxCtrl.getInput(_dom);

        if (_dom.modeValues['old_value'] != input.value || input.value=='')
        {
            switch(_dom.mode)
            {
                //Скрываем записи, которые не подходят по фильтру
                case 'filter':
                    try {
                        var s = input.value;
                        //Если сначала палка то это регулярное выражение не надо экранировать
                        if (s[0] != '|')
                        {
                            //Заменяем

                            s = s.replace(/([\\\*\+\?\.\$\{\}\[\]\(\)])/g, '\\$1');
                            s = s.replace(/%/g,'.*?');
                            s = s.replace(/_/g,'.');
                            //s= '^'+s;
                        }else
                            s = s.substr(1);
                        var re = new RegExp(s,(_dom.modeValues['case'] == 'false')?'i':'');
                    }catch(e)
                    {
                        var re = new String(input.value);
                    }
                    var first_option = false;
                    for (var i = 0; i < _dom.options.length; i++) {
                        if(D3Api.ComboItemCtrl.getCaption(_dom.options[i]).search(re) != -1 && !D3Api.hasProperty(_dom.options[i],'isD3Repeater')) {
                            for(var current_item = _dom.options[i],j = 0;current_item;current_item = current_item.D3Store.ComboItemParent,j++){
                                if(current_item.classList.contains('hide')){
                                    current_item.classList.remove('hide');
                                }
                                if(current_item.classList.contains('closed')){
                                    if(j > 0){
                                        current_item.classList.remove('closed');
                                        current_item.classList.add('opened');
                                    }
                                }
                                current_item.style.display = '';
                                if(!('ComboItemParent' in current_item.D3Store) || !current_item.D3Store.ComboItemParent){
                                    break;
                                }
                            }
                            if (!first_option) {
                                first_option = _dom.options[i];
                            }
                        } else {
                            _dom.options[i].style.display = 'none';
                        }

                    }
                    var onenter = _dom.getAttribute('droplist') == 'onenter';
                    var droplist = D3Api.ComboBoxCtrl.getDropList(_dom);
                    if (!onenter || droplist.style.display == 'block') {
                        D3Api.ComboBoxCtrl.markedItemSelected(_dom,first_option);
                        D3Api.ComboBoxCtrl.dropListSetSizePos(droplist);
                    }
                    break;
            }
            _dom.modeValues['old_value'] = input.value;
        }
    }
    
    /**
     *
     * @param drop_list
     */
    this.dropListSetSizePos = function ComboBoxCtrl_dropListSetSizePos(drop_list)
    {
        D3Api.ComboBoxCtrl.hideDropList(drop_list,true);
        D3Api.removeEvent(document, 'click', drop_list.functionHook, true);
        D3Api.removeEvent(document, 'scroll', drop_list.functionHook, true);
        function setSizePosDropList(_drop_list){
            var sX = D3Api.getBodyScrollLeft();
            var sY = D3Api.getBodyScrollTop();

            var page = D3Api.getPageWindowSize();

            var cbWidth = (_drop_list._ComboBoxDom.offsetWidth-2) + "px";
            _drop_list.style["minWidth"] = cbWidth;
            _drop_list.style["width"] = D3Api.getBoolean(D3Api.getProperty(_drop_list._ComboBoxDom,'fixwidth','false'))?cbWidth:'auto';

            var cb_rect = D3Api.getAbsoluteClientRect(_drop_list._ComboBoxDom);

            drop_list.style.height = "";

            D3Api.ComboBoxCtrl.showDropList(_drop_list,true);
            _drop_list._ComboBoxDom.D3Base.callEvent('onshowlist',_drop_list);

            var drop_rect = D3Api.getAbsoluteClientRect(_drop_list);
            drop_rect.x = cb_rect.x;
            drop_rect.y = cb_rect.y+cb_rect.height - sY;

            var h = page.windowHeight+sY;
            var w = page.windowWidth+sX;

            //Растояние внизу окна
            var dH = h - drop_rect.y;
            //Растояние вверху окна
            var uH = cb_rect.y - sY;

            var mcY = drop_rect.y+drop_rect.height;
            var mcX = drop_rect.x+drop_rect.width;

            if (mcY-h > 0)
            {
                //Если выходит за нижний край
                if(dH > uH)
                    drop_rect.height = dH;
                else
                {
                    if(drop_rect.height > uH)
                        drop_rect.height = uH;
                    drop_rect.y -=drop_rect.height+cb_rect.height;
                }

            }

            if (mcX-w > 0)
                drop_rect.x -=mcX-w;

            _drop_list.style.height = drop_rect.height +'px';
            _drop_list.style.width = drop_rect.width+'px';

            _drop_list.style.left = drop_rect.x +'px';
            _drop_list.style.top = drop_rect.y+'px';
        }
        setSizePosDropList(drop_list);
        /**
         * расскрытие/скрытие элементов
         * @param _item - dom элемент
         * @param _bool - true - расскрыть, false - скрыть
         **/
        function toggleItems(_item,_bool){
            if(!D3Api.hasClass(_item,'nochilds')){
                var child_items = _item.D3Store.ComboItemChilds;
                if(_bool){
                    _item.classList.remove('closed');
                    _item.classList.add('opened');
                }else{
                    _item.classList.remove('opened');
                    _item.classList.add('closed');
                }
                for(var i = 0 ; i < child_items.length ; i++){
                    if(_bool){
                        //раскрыть дочерние
                        child_items[i].classList.remove('hide');
                    }else {
                        child_items[i].classList.add('hide');
                        toggleItems(child_items[i],_bool);
                        //скрыть все дочерние
                    }
                }
            }
        }
        drop_list.selectItem = null
        /* TODO: проблема в движке chromium, когда итемы в ширину больше чем сам компонент и навешаны событие click и scroll то при клике срабатывает не то событие(т.е. scroll) */
        /* событие при наведении курсора*/
        drop_list.functionHookOver = function (event){
            drop_list.selectItem = drop_list.querySelector('table tr:hover *[cont="itemcaption"]');
        }
        /* событие при снятие курсото*/
        drop_list.functionHookOut = function (event){
            drop_list.selectItem = null;
        }
        drop_list.functionHook = function(event) {
            var cmpparse = D3Api.getProperty(event.target,'cmpparse',null);
            var tagName = event.target.tagName.toLowerCase();
            /* TODO: хак проблемы в движке chromium */
            drop_list.isHack = (event.type == 'scroll' && cmpparse == 'ComboBox' && tagName == 'input');
            if(!drop_list.isHack && (event.type == 'scroll' && event.target === drop_list)){
                return;
            }
            setSizePosDropList(drop_list)
            if(D3Api.hasClass(event.target,'btnOC')){
                //было нажато на кнопку раскрытие дочерних форм
                var combo_item = event.target.parentNode.parentNode.parentNode;
                var isClosed = D3Api.hasClass(combo_item,'closed');
                toggleItems(combo_item,isClosed);
                setSizePosDropList(drop_list);
            }else if(!D3Api.ComboBoxCtrl.dropListClick(event)) {
                D3Api.ComboBoxCtrl.hideDropList(drop_list);
                D3Api.removeEvent(document, 'click', drop_list.functionHook, true);
                D3Api.removeEvent(document, 'scroll', drop_list.functionHook, true);
                D3Api.removeEvent(drop_list, 'mouseover', drop_list.functionHookOver, true);
                D3Api.removeEvent(drop_list, 'mouseout', drop_list.functionHookOut, true);
                D3Api.stopEvent(event);
            }
        };
        D3Api.addEvent(document, 'click', drop_list.functionHook, true);
        D3Api.addEvent(document, 'scroll', drop_list.functionHook, true);
        D3Api.addEvent(drop_list, 'mouseover', drop_list.functionHookOver, true);
        D3Api.addEvent(drop_list, 'mouseout', drop_list.functionHookOut, true);
    }

    /**
     *
     * @param drop_list
     * @param only
     */
    this.hideDropList = function ComboBoxCtrl_hideDropList(drop_list,only)
    {
        drop_list.style.display = 'none';
        drop_list._ComboBoxDom._dropListCont.appendChild(drop_list);
        if (!only)
            D3Api.ComboBoxCtrl.setInputModeValue(drop_list._ComboBoxDom);
    }

    /**
     *
     * @param drop_list
     * @param only
     */
    this.showDropList = function ComboBoxCtrl_showDropList(drop_list,only)
    {

        document.body.appendChild(drop_list);
        drop_list.style.display = 'block';
        if (!only)
            D3Api.ComboBoxCtrl.prepareInputMode(drop_list._ComboBoxDom);
    }

    /**
     *
     * @param _dom
     * @param input
     */
    this.prepareInputMode = function ComboBoxCtrl_prepareInputMode(_dom,input)
    {
        if(!input)
            input = D3Api.ComboBoxCtrl.getInput(_dom);

        var mode = (_dom.mode)?_dom.mode:D3Api.getProperty(_dom,'mode','filter');
        _dom.mode = mode;
        _dom.modeValues = {};
        _dom.modeValues['old_value'] = input.value;
        _dom.modeValues['old_readonly'] = D3Api.getProperty(input,'readonly','false');
        _dom.modeValues['old_selectedValue'] = D3Api.ComboBoxCtrl.getValue(_dom);

        var set_focus = D3Api.getProperty(_dom, 'focus', 'true');

        switch(mode)
        {
            //Скрываем записи, которые не подходят по фильтру
            case 'filter':
                    if(set_focus !== 'false') {
                        input.select();
                        input.focus();
                    }

                    input.removeAttribute('readonly');
                    _dom.modeValues['case'] = D3Api.getProperty(_dom,'case','false');
                break;
            default:
                break;
        }
    }

    /**
     *
     * @param _dom
     * @param input
     */
    this.setInputModeValue = function ComboBoxCtrl_setInputModeValue(_dom,input)
    {
        for(var i = 0, co = _dom.options.length; i < co; i++)
        {
            if (!D3Api.hasProperty(_dom.options[i],'isD3Repeater'))
                _dom.options[i].style.display = '';
        }
        if(!input)
            input = D3Api.ComboBoxCtrl.getInput(_dom);
        if (_dom.modeValues['old_readonly'] != 'false')
            input.setAttribute('readonly','readonly');

        var new_value = D3Api.ComboBoxCtrl.getValue(_dom);
        var any_value = D3Api.getProperty(_dom,'anyvalue','false')!='false';
        switch(_dom.mode)
        {
            //Скрываем записи, которые не подходят по фильтру
            case 'filter':
                    //Принудительно устанавливаем значение, чтобы затереть изменения в инпуте
                    D3Api.setControlPropertyByDom(_dom,'value',(any_value && !_dom.selected_item)?undefined:((new_value == _dom.modeValues['old_selectedValue'])?_dom.modeValues['old_selectedValue']:new_value));
                break;
        }
    }
    /**
     *
     * @param _dom
     */
    this.downClick = function ComboBoxCtrl_downClick(_dom)
    {

        var combo_box = _dom;
        var val = D3Api.getControlPropertyByDom(combo_box,'value')
        if (!D3Api.BaseCtrl.getEnabled(combo_box) || !combo_box.options || D3Api.ComboBoxCtrl.getReadonly(combo_box))
        {
            return;
        }

        var drop_list = D3Api.ComboBoxCtrl.getDropList(combo_box);

        if (drop_list.style.display != 'block')
        {
            //отображаем только родители
            var options = combo_box.options;
            var option = null;
            for(var i = 0 ; i < options.length; i++){
                if(options[i].hasAttribute('levelhierh')){
                    var lvlhierh = +options[i].getAttribute('levelhierh');
                    if(lvlhierh > 1){
                        options[i].classList.add('hide')
                    }else{
                        options[i].classList.remove('hide')
                    }
                    if(options[i].D3Store.ComboItemChilds.length > 0){
                        options[i].classList.remove('nochilds');
                        options[i].classList.remove('opened');
                        options[i].classList.add('closed');
                    }else{
                        options[i].classList.remove('opened');
                        options[i].classList.remove('closed');
                        options[i].classList.add('nochilds');
                    }
                    if(D3Api.empty(option)){
                        var value = D3Api.getControlPropertyByDom(options[i],'value');
                        if(value == val){
                            option = options[i];
                        }
                    }
                }
            }
            //расскрываем иерархически все родителей текущего элемента.
            if(!D3Api.empty(option)){
                for(var parent = option.D3Store.ComboItemParent;parent != null;parent = parent.D3Store.ComboItemParent){
                    parent.classList.remove('hide');
                    if(parent.D3Store.ComboItemChilds.length > 0){
                        parent.classList.remove('nochilds');
                        parent.classList.remove('closed');
                        parent.classList.add('opened');
                        for(var i = 0; i < parent.D3Store.ComboItemChilds.length ; i++){
                            parent.D3Store.ComboItemChilds[i].classList.remove('hide');
                        }
                    }else{
                        parent.classList.remove('opened');
                        parent.classList.remove('closed');
                        parent.classList.add('nochilds');
                    }
                }
            }
            D3Api.ComboBoxCtrl.dropListSetSizePos(drop_list);

            D3Api.ComboBoxCtrl.showDropList(drop_list);

            var target = D3Api.getEventTarget();

            var input = D3Api.ComboBoxCtrl.getInput(combo_box);
            if (target == input && input.focus)
                input.focus();
            else if(target != input && input.blur)
                input.blur();
            D3Api.stopEvent();
        }else
        {
            D3Api.ComboBoxCtrl.hideDropList(drop_list);
        }
    }

    /**
     *
     * @param event
     * @returns {boolean}
     */
    this.dropListClick = function ComboBoxCtrl_DropListClick(event)
    {
        var combobox = D3Api.getControlByDom(event.target,'ComboBox');
        if(combobox){
            var drop_list = D3Api.ComboBoxCtrl.getDropList(combobox);
            var event = D3Api.getEvent(event);
            var option = null;
            if('isHack' in drop_list && drop_list.isHack == true && 'selectItem' in drop_list&& drop_list.selectItem){
                option = drop_list.selectItem;
            }else{
                option = D3Api.getEventTarget(event);
            }

            var option = D3Api.getControlByDom(option,'ComboItem');

            //Не нашли элемент списка значит кликнули вне списка
            if (!option)
                return false;
        }else{
            /* ткнули на другой области элемента */
            return false;
        }


        var drop_list = D3Api.getControlByDom(option, 'ComboBoxDL');
        var combo_box = drop_list._ComboBoxDom;

        var input = D3Api.ComboBoxCtrl.getInput(combo_box);
        if (input.focus)
                input.focus();
        if (input.blur)
                input.blur();

        if(!combo_box.D3Store.multiselect)
        {
            if (!combo_box["selected_item"] || combo_box.selectedIndex != option.rowIndex)
            {
                D3Api.setControlPropertyByDom(combo_box, 'value', D3Api.ComboItemCtrl.getValue(option),undefined,true);
            }

            D3Api.ComboBoxCtrl.hideDropList(drop_list);
        }
        input.focus();

        return combo_box.D3Store.multiselect;
    }

    /**
     *
     * @param dom
     * @param value
     */
    this.setFocus = function(dom,value)
    {
        var drop_list = D3Api.ComboBoxCtrl.getDropList(dom);
        if(value == false && drop_list.functionHook)
        {
            drop_list.functionHook();
        }
        D3Api.BaseCtrl.setFocus(dom,value);
    }
}

D3Api.controlsApi['ComboBox'] = new D3Api.ControlBaseProperties(D3Api.ComboBoxCtrl);
D3Api.controlsApi['ComboBox']['height'] = undefined;
D3Api.controlsApi['ComboBox']['focus'].set = D3Api.ComboBoxCtrl.setFocus;
D3Api.controlsApi['ComboBox']['value']={set:D3Api.ComboBoxCtrl.setValue,get:D3Api.ComboBoxCtrl.getValue};
D3Api.controlsApi['ComboBox']['caption']={get:D3Api.ComboBoxCtrl.getCaption,set:D3Api.ComboBoxCtrl.setCaption};
D3Api.controlsApi['ComboBox']['enabled'].set = D3Api.ComboBoxCtrl.setEnabled;
D3Api.controlsApi['ComboBox']['readonly']={set:D3Api.ComboBoxCtrl.setReadonly,get:D3Api.ComboBoxCtrl.getReadonly};
D3Api.controlsApi['ComboBox']['input']={get:D3Api.ComboBoxCtrl.getInput, type: 'dom'};
D3Api.controlsApi['ComboBox']['item']={get:D3Api.ComboBoxCtrl.getSelectedItem, type: 'dom'};
D3Api.controlsApi['ComboBox']['data']={get:D3Api.ComboBoxCtrl.getDataSelectedItem, type: 'object'};

D3Api.ComboItemCtrl = new function()
{
    this.init = function(_dom){
        _dom.D3Store.ComboItemChilds = [];
        _dom.D3Store.ComboItemParent = null;
        _dom.D3Store.notRootNode = [];
        if(!D3Api.hasProperty(_dom,'isd3repeater') && D3Api.hasProperty(_dom,'isclone')
            && D3Api.hasProperty(_dom,'comboboxname') && D3Api.hasProperty(_dom,'parentfield')
            && D3Api.hasProperty(_dom,'keyfield')){
            //Иерархический комбобокс
            var drop_list = D3Api.getControlByDom(_dom, 'ComboBoxDL');
            var combo_box = drop_list._ComboBoxDom;
            var options = combo_box.options;
            var data = _dom.clone.data;
            var parentField = D3Api.getProperty(_dom,'parentfield','');
            var keyField = D3Api.getProperty(_dom,'keyfield','');
            var notRoot = true;
            var width = 10;
            _dom.classList.add('nochilds');
            if(parentField in data && !D3Api.empty(data[parentField])){
                _dom.classList.add('hide');//скрывать все не родительские элементы
                notRoot = false;
                for(var i = 0 ,len = options.length ; i < len ; i++){
                    if('clone' in options[i] && options[i] !== _dom){
                        var cdata = options[i].clone.data;
                        if(keyField in cdata && cdata[keyField] == data[parentField]){
                            if(i + 1 < len - 1){
                                options[i].parentNode.insertBefore(_dom,options[i + 1]);
                                options[i].D3Store.ComboItemChilds.push(_dom);
                                _dom.D3Store.ComboItemParent = options[i];
                                options[i].classList.add('closed');
                                options[i].classList.remove('nochilds');
                                if(D3Api.hasProperty(options[i],'levelHierh')){
                                    var level = (+D3Api.getProperty(options[i],'levelHierh')) + 1;
                                    D3Api.setProperty(_dom,'levelHierh',level);
                                    var sp = _dom.querySelector('.item_block');
                                    sp.style.marginLeft = (width*level)+'px';
                                }
                            }
                            notRoot = true;
                            break;
                        }
                    }
                }
                if(!notRoot){
                    /**
                     * родительский элемент не найдет,
                     * делаем запись не видимым и добавляем его в список для поиска его родителя, до тех пока пока не придет его родитель
                     */
                    var addNotRoot = true;
                    if(combo_box.D3Store.notRootNode.length > 0){
                        //в случае если есть в списке дочерние элементы;
                        for(var i = combo_box.D3Store.notRootNode.length - 1 ; 0 <= i ; i--){
                            if('clone' in combo_box.D3Store.notRootNode[i]){
                                if(combo_box.D3Store.notRootNode[i].clone.data[parentField] == data[keyField]){
                                    _dom.D3Store.notRootNode.push(combo_box.D3Store.notRootNode[i]);
                                    _dom.D3Store.ComboItemChilds.push(combo_box.D3Store.notRootNode[i]);
                                    combo_box.D3Store.notRootNode[i].D3Store.ComboItemParent = _dom;
                                    combo_box.D3Store.notRootNode.splice(i,1);
                                    _dom.classList.add('closed');
                                    _dom.classList.remove('nochilds');
                                    addNotRoot = false;
                                    if(D3Api.hasProperty(_dom,'levelHierh')){
                                        var level = (+D3Api.getProperty(_dom,'levelHierh')) + 1;
                                        D3Api.setProperty(combo_box.D3Store.notRootNode[i],'levelHierh',level);
                                        var sp = combo_box.D3Store.notRootNode[i].querySelector('.item_block');
                                        sp.style.marginLeft = (width*level)+'px';
                                    }
                                }
                            }
                        }
                    }
                    if(addNotRoot){
                        combo_box.D3Store.notRootNode.push(_dom);
                    }
                }
            }else{
                //сюда попадают корневые элементы
                D3Api.setProperty(_dom,'levelHierh',1);
            }
            if(notRoot && combo_box.D3Store.notRootNode.length > 0){
                //ищем дочерние элементы которые пришли раньше.
                for(var i = 0 , len = combo_box.D3Store.notRootNode.length ; i < len ; i++){
                    if('clone' in combo_box.D3Store.notRootNode[i]){
                        if (combo_box.D3Store.notRootNode[i].clone.data[parentField] == data[keyField]){
                            var lastRow = _dom.parentNode.rows[_dom.parentNode.rows.length - 1];
                            _dom.parentNode.insertBefore(combo_box.D3Store.notRootNode[i],lastRow);
                            _dom.D3Store.ComboItemChilds.push(combo_box.D3Store.notRootNode[i]);
                            combo_box.D3Store.notRootNode[i].D3Store.ComboItemParent = _dom;
                            _dom.classList.add('closed');
                            _dom.classList.remove('nochilds');
                            if(D3Api.hasProperty(_dom,'levelHierh')){
                                var level = (+D3Api.getProperty(_dom,'levelHierh')) + 1;
                                D3Api.setProperty(combo_box.D3Store.notRootNode[i],'levelHierh',level);
                                var sp = combo_box.D3Store.notRootNode[i].querySelector('.item_block');
                                sp.style.marginLeft = (width*level)+'px';
                            }
                        }
                    }
                }
            }
        }
    }
    this.onRefresh = function ComboItemCtrl_onRefresh(combo_box)
    {
        var drop_list = D3Api.ComboBoxCtrl.getDropList(combo_box);

        if (drop_list.style.display == 'block')
        {
            D3Api.ComboBoxCtrl.hideDropList(drop_list);
            D3Api.removeEvent(document, 'click', drop_list.functionHook, true);
            D3Api.removeEvent(document, 'scroll', drop_list.functionHook, true);
        }
    }
    this.afterRefresh = function ComboItemCtrl_afterRefresh(combo_box)
    {
        var items_ds = combo_box.D3Form.getDataSet(D3Api.getProperty(combo_box,'items_dataset'));
        if(items_ds.acceptedData <= 0)
        {
            return;
        }
        D3Api.ComboBoxCtrl.setOptions(combo_box);
        D3Api.ComboBoxCtrl.refreshEmptyItem(combo_box);
        var storedCaption;
        if(D3Api.getProperty(combo_box,'anyvalue','false') !== 'false' && !D3Api.hasProperty(combo_box,'initIndex'))
        {
            storedCaption = D3Api.ComboBoxCtrl.getCaption(combo_box);
        }
        var val = D3Api.getControlPropertyByDom(combo_box,'value');
        var item = val?D3Api.ComboBoxCtrl.getItemByValue(combo_box,val):D3Api.ComboBoxCtrl.getItemStaticSelected(combo_box);
        var di = D3Api.getProperty(combo_box,'defaultindex',false);
        if (combo_box.storedValue != undefined)
        {
            combo_box.dynItems = false;
            var addItemValue = combo_box.storedValue;
            D3Api.setControlPropertyByDom(combo_box,'value',combo_box.storedValue);
            combo_box.storedValue = undefined;
            if(D3Api.ComboBoxCtrl.getValue(combo_box) != addItemValue)
            {
                D3Api.ComboBoxCtrl._addNewItem(combo_box,addItemValue);
            }
            di = false;
        }else if(item && val && !D3Api.hasProperty(item.option,'selected'))
        {
            D3Api.setControlPropertyByDom(combo_box,'value',item.value);
        }else if ((item == null || (!D3Api.hasProperty(item.option,'selected') && di === false)) && combo_box.options.length > 1)
        {
            var ii = D3Api.getProperty(combo_box,'initIndex',combo_box.D3Store.multiselect?null:0);
            if(ii !== null)
            {
                item = D3Api.ComboBoxCtrl.getItemByIndex(combo_box,ii);
                D3Api.setControlPropertyByDom(combo_box,'value',item.value);
            }
            //di = false;
        }else
        {
            item = D3Api.ComboBoxCtrl.getItemSelected(combo_box);
            if(item)
            {
                D3Api.setControlPropertyByDom(combo_box,'value',item.value);
            }
        }
        combo_box.dynItems = false;
        D3Api.removeProperty(combo_box, 'dynitems');
        if(di!==false && items_ds.getCount() == 1)
        {
            item = D3Api.ComboBoxCtrl.getItemByIndex(combo_box,+di);
            if(item)
                D3Api.setControlPropertyByDom(combo_box,'value',item.value);
        }

        if(!D3Api.isUndefined(storedCaption))
        {
            D3Api.ComboBoxCtrl.setCaption(combo_box, storedCaption);
        }
    }
    this.getValue = function ComboItemCtrl_getValue(_dom)
    {
            if (!_dom)
                return '';
            return D3Api.getProperty(_dom, 'value', '');
    }
    this.setValue = function ComboItemCtrl_setValue(_dom, _value)
    {
        D3Api.setProperty(_dom,'value', _value);
    }
    this.getCaption = function ComboItemCtrl_getCaption(_dom)
    {
            if (!_dom)
                return '';
            if (_dom.isEmptyItem)
                return '';
            var cnt = D3Api.getChildTag(_dom,'span',1);
            var c = cnt.innerHTML;
            return (c == '&nbsp;')?'':D3Api.getTextContent(cnt);
    }
    this.setCaption = function ComboItemCtrl_setCaption(_dom, _value)
    {
        _value = D3Api.isUndefined(_value)?'':_value;
        if(_value !== undefined)
        {
            var cnt = D3Api.getChildTag(_dom,'span',1);
            cnt.innerHTML = (_value == '')?'&nbsp;':_value;
        }
    }
    this.stateItem = function(item,state)
    {   var domch = D3Api.getDomByAttr(item,'cont','multicheck');
        if (typeof domch != 'undefined'){
           domch.checked = state;
        }
    }
    this.checkItem = function(item)
    {
        var vals = [];
        var cb = D3Api.getControlByDom(item,'ComboBox');
        var opened = item.parentElement.firstElementChild
        var el = opened.nextElementSibling;
        while (el) {
            if (el.querySelector('[cmpparse="ComboItem"]').checked) {
                var chValue =  el.getAttribute("value");
                var text = el.firstElementChild.firstElementChild.nextElementSibling.nextElementSibling.innerHTML;
                vals.push(chValue);
            }
            el = el.nextElementSibling;
        }
        if (vals.length>0) {
           opened.querySelector('[type="checkbox"]').checked = false;
        }
        txt = vals.join(';'); //txt.substr(1);
        if (txt.substr(0,1)==';') {
           txt = txt.substr(1);
        }
        cb.querySelector('[cmpparse="ComboBox"]').value = txt;
    }
    this.getInput = function(_dom)
    {
        return D3Api.getChildTag(_dom,'input',1);
    }
    this.setActive = function(_dom, _value)
    {
        if(D3Api.getBoolean(_value))
        {
            var cb = D3Api.getControlByDom(_dom, 'ComboBox');
            D3Api.setControlPropertyByDom(cb, 'value', D3Api.getProperty(_dom, 'value', null), undefined, true);
        }
    }
}
D3Api.controlsApi['ComboItem'] = new D3Api.ControlBaseProperties(D3Api.ComboItemCtrl);
D3Api.controlsApi['ComboItem']['value']={get:D3Api.ComboItemCtrl.getValue, set:D3Api.ComboItemCtrl.setValue};
D3Api.controlsApi['ComboItem']['caption']={get:D3Api.ComboItemCtrl.getCaption, set:D3Api.ComboItemCtrl.setCaption};
D3Api.controlsApi['ComboItem']['input']={get:D3Api.ComboItemCtrl.getInput, type: 'dom'};
D3Api.controlsApi['ComboItem']['active']={set:D3Api.ComboItemCtrl.setActive};
/**
 *
 * @component
 */
D3Api.CheckBoxCtrl = new function CheckBoxCtrl()
{
    /**
     *
     * @param _dom
     */
    this.init = function(_dom)
    {
        var inp = D3Api.CheckBoxCtrl.getInput(_dom);
        D3Api.addEvent(inp, 'change', function(event){
            D3Api.setControlPropertyByDom(_dom,'value',D3Api.CheckBoxCtrl.getValue(_dom),undefined,true);
            D3Api.stopEvent(event);
        }, true);
        this.init_focus(inp);
        D3Api.BaseCtrl.initEvent(_dom,'onchange','value');
        _dom.D3Base.addEvent('onchange_property',function(property,value){
           if(property == 'value')
               _dom.D3Base.callEvent('onchange',value);
               //D3Api.execDomEvent(_dom,'onchange');
        });
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getInput = function CheckBox_getInput(_dom)
    {
        return D3Api.getChildTag(_dom,'input',0);
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setEnabled = function CheckBox_setEnabled(_dom, _value)
    {
        var input = D3Api.CheckBoxCtrl.getInput(_dom);
        //делаем активным
        if (D3Api.getBoolean(_value))
        {
            input.removeAttribute('disabled');
        }//делаем неактивным
        else
        {
            input.setAttribute('disabled','disabled');
        }
        D3Api.BaseCtrl.setEnabled(_dom, _value);
    }

    /**
     *
     * @param _dom
     * @param _value
     * @returns {*}
     */
    this.getValue = function CheckBox_getValue(_dom, _value)
    {
        var input = D3Api.CheckBoxCtrl.getInput(_dom);

        var val = (input.checked)?D3Api.getProperty(_dom,'valuechecked',true):D3Api.getProperty(_dom,'valueunchecked',false);
        //Такая строка при проверке всегда дает true
        if(val === '0')
            val = 0;
        else if(val === 'false')
            val = false;
        
        return val;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setValue = function CheckBox_setValue(_dom, _value)
    {
        var input = D3Api.CheckBoxCtrl.getInput(_dom);

        if (_value == D3Api.getProperty(_dom,'valuechecked',true))
        {
                input.checked = true;
        }
        if (_value == D3Api.getProperty(_dom,'valueunchecked',false))
        {
                input.checked = false;
        }
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getValueChecked = function CheckBox_getValueChecked(_dom)
    {
        return D3Api.getProperty(_dom,'valuechecked',true);
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setValueChecked = function CheckBox_setValueChecked(_dom,_value)
    {
        D3Api.setProperty(_dom,'valuechecked',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getValueUnChecked = function CheckBox_getValueUnChecked(_dom)
    {
        return D3Api.getProperty(_dom,'valueunchecked',true);
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setValueUnChecked = function CheckBox_setValueUnChecked(_dom,_value)
    {
        D3Api.setProperty(_dom,'valueunchecked',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getCaption = function CheckBox_getCaption(_dom)
    {
        var cc = D3Api.getChildTag(_dom,'span',0);
        return cc.innerHTML;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setCaption = function CheckBox_setCaption(_dom, _value)
    {
        var cc = D3Api.getChildTag(_dom,'span',0);
        cc.innerHTML = _value;
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getChecked = function CheckBox_getChecked(_dom)
    {
        var input = D3Api.getChildTag(_dom,'input',0);
        return input.checked;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setChecked = function CheckBox_setChecked(_dom, _value)
    {
        var input = D3Api.getChildTag(_dom,'input',0);
        input.checked = _value;
    }
}
D3Api.controlsApi['CheckBox'] = new D3Api.ControlBaseProperties(D3Api.CheckBoxCtrl);
D3Api.controlsApi['CheckBox']['value']={get:D3Api.CheckBoxCtrl.getValue,set: D3Api.CheckBoxCtrl.setValue};
D3Api.controlsApi['CheckBox']['valuechecked']={get:D3Api.CheckBoxCtrl.getValueChecked,set: D3Api.CheckBoxCtrl.setValueChecked};
D3Api.controlsApi['CheckBox']['valueunchecked']={get:D3Api.CheckBoxCtrl.getValueUnChecked,set: D3Api.CheckBoxCtrl.setValueUnChecked};
D3Api.controlsApi['CheckBox']['caption']={get:D3Api.CheckBoxCtrl.getCaption,set:D3Api.CheckBoxCtrl.setCaption}
D3Api.controlsApi['CheckBox']['enabled'].set = D3Api.CheckBoxCtrl.setEnabled;
D3Api.controlsApi['CheckBox']['input']={get: D3Api.CheckBoxCtrl.getInput, type: 'dom'};
D3Api.controlsApi['CheckBox']['checked']={set:D3Api.CheckBoxCtrl.setChecked,get: D3Api.CheckBoxCtrl.getChecked};
/**
 *
 * @component
 */
D3Api.MaskCtrl = new function()
{
    //TODO: Если несколько зависимостей действуют на один контрол depend
    /**
     *
     * @param dom
     */
    this.init = function(dom)
    {
        var ctrls = D3Api.getProperty(dom, 'controls', '').split(';');

        for(var i = 0, ic = ctrls.length; i < ic; i++)
        {
            if (!ctrls[i]) {
                continue;
            }

            var ctrl = dom.D3Form.getControl(ctrls[i]);

            if (!ctrl || ctrl.D3Store.D3MaskParams) { //Маска уже назначена
                continue;
            }
            
            var mt = D3Api.getProperty(ctrl, 'mask_type', '');
            var mp = {
                maskTemplate: D3Api.getProperty(ctrl, 'mask_template', undefined),
                maskOriginal: D3Api.getProperty(ctrl, 'mask_original', undefined),
                maskCheckRegular: D3Api.getProperty(ctrl, 'mask_check_regular', undefined),
                maskCheckFunction: D3Api.getProperty(ctrl, 'mask_check_function', undefined),
                maskTemplateRegular: D3Api.getProperty(ctrl, 'mask_template_regular', undefined),
                maskTemplateFunction: D3Api.getProperty(ctrl, 'mask_template_function', undefined),
                maskCharReplace: D3Api.getProperty(ctrl, 'mask_char_replace', undefined)
            }
            var me = D3Api.getProperty(ctrl, 'mask_empty', 'true') != 'false';
            var ms = D3Api.getProperty(ctrl, 'mask_strip', 'false') != 'false';
            var mff = D3Api.getProperty(ctrl, 'mask_fill_first', 'false') != 'false';
            var mc = D3Api.getProperty(ctrl, 'mask_clear', 'false') != 'false';
            D3Api.MaskCtrl.registerControl(dom, ctrl,mt,mp,me,ms,mff,mc);
        }
    }

    this.decimalSeparator = (1.1).toLocaleString().substring(1, 2);
    this.thousandSeparator = (1000).toLocaleString().substring(1, 2);

    var maskTypes = {
        time : {
            maskTemplate: '99:99',
            maskOriginal: '00:00',
            maskCheckRegular: '^(([0-1][0-9])|(2[0-3]))\:[0-5][0-9]$',
            maskReplaceSpace: true
        },
        hoursminutes : {
            maskCharReplace: ',:.: :',
            maskCheckRegular: '^\\d+(\\:\\d+)?$',
            maskTemplateRegular: '^\\d+((\\:\\d+)|\\:)?$'
        },
        date : {
            maskTemplate: '99.99.9999',
            maskOriginal: '00.00.0000',
            maskTemplateRegular: '^(([0-3]?)|((([0-2]\\d)|(3[01]))\\.?)|((([0-2]\\d)|(3[01]))\\.((0\\d?)|(1[012]?)))|((([0-2]\\d)|(3[01]))\\.((0\\d)|(1[012]))\\.\\d{0,4}))$',
            maskTemplateFunction: 'return ('+(function(value)
                                {
                                    var d = String(value).split('.');
                                    //if (d[0] == '00' || d[1] == '00' || d[2] == '0000')
                                    //    return false;
                                    var fullcheck = false;
                                    if(value.indexOf('_') != -1 )
                                    {
                                        var y = parseInt(d[2]);
                                        if(y > 9)
                                        {
                                            y = parseInt(d[2].substr(0,2));
                                            if(y < 10 || y > 29)
                                                return false;
                                        }else if (y < 1 || y > 2)
                                            return false;
                                            
                                        return true;
                                    }else
                                        fullcheck = true;
                                    if(+d[2] < 1000)
                                        return false;
                                    if(+d[2] > 2999)
                                        return false;
                                    var date = new Date(d[2],d[1]-1,d[0],0,0,0);
                                    if(fullcheck)
                                    {
                                        return +d[0] == date.getDate() && +d[1] == date.getMonth()+1 && +d[2] == date.getFullYear();
                                    }else
                                        return !isNaN(date.valueOf());
                                }).toString()+')(value)',
            maskReplaceSpace: true
        },
        datetime : {
            maskTemplate: '99.99.9999 99:99',
            maskOriginal: '00.00.0000 00:00',
            maskTemplateRegular: /^(\d{2})\.(\d{2})\.(\d{4})\s(\d{2}):(\d{2})$/,
            maskTemplateFunction: 'return ('+(function(value)
                                {
                                    var result = true;
                                    var date = new Date();
                                    value = value.split(/\D+/);

                                    if (value[0] && (value[0] > 31 || value[0].length == 2 && value[0] < 1)) { // day
                                        result = false;
                                    }
                                    if (value[1] && (value[1] > 12 || value[1].length == 2 && value[1] < 1)) { // month
                                        result = false;
                                    }
                                    if (value[2] && (value[2].length == 4 && value[2] < 1)) { // year
                                        result = false;
                                    }

                                    if (value[3] && value[3] > 23) { // hour
                                        result = false;
                                    }
                                    if (value[4] && value[4] > 59) { // minute
                                        result = false;
                                    }

                                    return result;
                                }).toString()+')(value)'
        },
        number : {
            maskCheckRegular: '^\\d+$',
            maskReplaceSpace: true
        },
        signnumber : {
            maskCheckRegular: '^-?\\d+$',
            maskTemplateRegular: '^-?\\d*$',
            maskReplaceSpace: true
        },
        fnumber: {
            maskCharReplace: ',.',
            maskCheckRegular: '^\\d+(\\.\\d+)?$',
            maskTemplateRegular: '^\\d+((\\.\\d+)|\\.)?$',
            maskReplaceSpace: true
        },
        signfnumber: {
            maskCharReplace: ',.',
            maskCheckRegular: '^-?\\d+(\\.\\d+)?$',
            maskTemplateRegular: '^-?\\d*((\\.\\d+)|\\.)?$',
            maskReplaceSpace: true
        },
        /* маска для числа с разделителем из локали */
        fnumberlocal: {
            maskCharReplace: this.decimalSeparator == ',' ? '.,' : null,
            maskCheckRegular: '^(\\'+this.thousandSeparator+'?|\\d+)+(\\'+this.decimalSeparator+'\\d+)?$',
            maskTemplateRegular: '^\\d+((\\'+this.decimalSeparator+'\\d+)|\\'+this.decimalSeparator+')?$',
            maskReplaceSpace: true
        },
        /* маска для числа с разделителем из локали с учетом отрицательных чисел */
        signfnumberlocal: {
            maskCharReplace: this.decimalSeparator == ',' ? '.,' : null,
            maskCheckRegular: '^-?(\\'+this.thousandSeparator+'?|\\d+)+(\\'+this.decimalSeparator+'\\d+)?$',
            maskTemplateRegular: '^-?\\d*((\\'+this.decimalSeparator+'\\d+)|\\'+this.decimalSeparator+')?$',
            maskReplaceSpace: true
        },
        alpha : {
            maskCheckRegular: '^[a-zA-Zа-яА-Я]+$'
        },
        alphanumber : {
            maskCheckRegular: '^[a-zA-Zа-яА-Я0-9]+$'
        },
        numberlen: function(min,max)
        {
            return {
               maskTemplateRegular: "^\\d{0,"+max+"}$",
               maskCheckRegular:    "^\\d{"+min+","+max+"}$",
               maskReplaceSpace: true
            };
        },
        signnumberlen: function(min,max)
        {
            return {
               maskTemplateRegular: "^-?\\d{0,"+max+"}$",
               maskCheckRegular:    "^-?\\d{"+min+","+max+"}$",
               maskReplaceSpace: true
            };
        },
        fnumberlen: function(maxBeforeComma,maxAfterComma)
        {
            return {
                maskCharReplace: ',.',
                maskCheckRegular: '^\\d{0,'+maxBeforeComma+'}(\\.\\d{0,'+maxAfterComma+'})?$',
                maskTemplateRegular: '^\\d{0,'+maxBeforeComma+'}((\\.\\d{0,'+maxAfterComma+'})|\\.)?$' ,
                maskReplaceSpace: true
            };
        },
        maxlen: function(max)
        {
            return {
               maskTemplateRegular: "^.{0,"+max+"}$",
               maskCheckRegular:    "^.{0,"+max+"}$",
               maskReplaceSpace: true
            };
        },
    }
    /**
     * maskType - тип маски date time number alpha ....
     * 
     * maskParams - оъект со следующими свойствами:
     * ///
     * maskTemplate - шаблон маски 9 - цифра, a - буква, x - цифра или буква
     * maskOriginal - значения которые будут подставлены для проверки, если не указано(undefined) то будет использовано maskTemplate
     * maskCheckRegular - регулярное выражение для проверки введенного значения с шаблоном
     * maskCheckFunction - тоже только функция, входной параметр значение которое надо проверить, на выходе true или false
     * maskTemplateRegular - используется когда невозможно четко определить шаблон. Регулярное выражение для предварительной проверки во время ввода
     * maskTemplateFunction - тоже только функция
     * maskReplaceSpace - автозамена пробелов при paste
     * ///
     * maskEmpty - значение может быть пустым. По умалчанию true
     */
    /**
     *
     * @param dom
     * @param control
     * @param maskType
     * @param maskParams
     * @param maskEmpty
     * @param maskStrip
     * @param maskFillFirst
     * @param maskClear
     * @returns {boolean}
     */
    this.registerControl = function(dom,control,maskType,maskParams,maskEmpty,maskStrip,maskFillFirst,maskClear)
    {
        var input = D3Api.BaseCtrl.callMethod(control,'getInput');
        var maskProperty = D3Api.BaseCtrl.callMethod(control,'getMaskProperty') || 'value';
        
        if (!input)
        {
            D3Api.debug_msg('Невозможно применить маску. Отсутствует метод getInput. Контрол: '+D3Api.BaseCtrl.getName(control));
            return false;
        }
        if(maskType)
        {
            var mt = maskType.split(':');
            var args = [];
            if(mt.length > 1)
            {
                maskType = mt[0];
                args = mt[1].split(',');
            }   
        }
        if(!((maskType && maskTypes[maskType]) || (maskParams && (maskParams.maskCheckRegular||maskParams.maskCheckFunction||maskParams.maskTemplate ))))
        {
            D3Api.debug_msg('Невозможно применить маску. Не указаны обязательные параметры. Контрол: '+D3Api.BaseCtrl.getName(control));
            return false;
        }
        
        if(maskType)
        {  
            maskParams = D3Api.mixin({},(maskTypes[maskType] instanceof Function)?maskTypes[maskType].apply(this, args):maskTypes[maskType]);
        }
        maskParams.maskEmpty = maskEmpty;
        maskParams.maskStrip = maskStrip;
        maskParams.maskFillFirst = maskFillFirst;
        maskParams.maskClear = maskClear;
        maskParams.maskProperty = maskProperty;
        control.D3Store.D3MaskParams = maskParams;
        new maskInit(control,input);
    }

    /**
     *
     */
    this.unRegisterControl = function()
    {
        
    }
    /**
     *
     * @param control
     * @param paramName
     * @param value
     */
    this.setParam = function(control,paramName,value)
    {
        if(!control || !control.D3Store.D3MaskParams)
        {
            D3Api.debug_msg('У контрола нет назначенной маски.');
        }

        switch(paramName)
        {
            case 'mask_template':
                    control.D3Store.D3MaskParams.maskTemplate = value;
                break;
            case 'mask_original':
                    control.D3Store.D3MaskParams.maskOriginal = value;
                break;
            case 'mask_check_regular':
                    control.D3Store.D3MaskParams.maskCheckRegular = new RegExp(value);
                break;  
            case 'mask_check_function':
                    control.D3Store.D3MaskParams.maskCheckFunction = control.D3Form.execDomEventFunc(control, {func: value, args: 'value'});
                break;
            case 'mask_template_regular':
                    control.D3Store.D3MaskParams.maskTemplateRegular = new RegExp(value);
                break;
            case 'mask_template_function':
                    control.D3Store.D3MaskParams.maskTemplateFunction = control.D3Form.execDomEventFunc(control, {func: value, args: 'value'});
                break;
            case 'mask_empty':
                    control.D3Store.D3MaskParams.maskEmpty = value;
                break;
            case 'mask_strip':
                    control.D3Store.D3MaskParams.maskStrip = value;
                break;
            case 'mask_fill_first':
                    control.D3Store.D3MaskParams.maskFillFirst = value;
                break;
            case 'mask_clear':
                    control.D3Store.D3MaskParams.maskClear = value;
                break;
            case 'mask_char_replace':
                    control.D3Store.D3MaskParams.maskCharReplace = value;
                break;
            case 'mask_type':
                    if(value)
                    {
                        var mt = value.split(':');
                        var args = [];
                        if(mt.length > 1)
                        {
                            value = mt[0];
                            args = mt[1].split(',');
                        }   
                    }
                    control.D3Store.D3MaskParams.maskTemplate='';
                    control.D3Store.D3MaskParams.maskOriginal='';
                    control.D3Store.D3MaskParams.maskCheckRegular='';
                    control.D3Store.D3MaskParams.maskCheckFunction='';
                    control.D3Store.D3MaskParams.maskCharReplace='';
                    control.D3Store.D3MaskParams.maskTemplateRegular='';
                    control.D3Store.D3MaskParams.maskTemplateFunction='';
                    control.D3Store.D3MaskParams.maskReplaceSpace=false;
                    D3Api.mixin(control.D3Store.D3MaskParams,(maskTypes[value] instanceof Function)?maskTypes[value].apply(control, args):maskTypes[value]);
                    maskParamsInit(control.D3Store.D3MaskParams,control);
                break;
        }
    }
    function maskInit(control,input)
    {
        var maskParams = control.D3Store.D3MaskParams;
        maskParams.valid = function(){
            var value = getControlValueMask();
            return checkValue(value);
        };
        var keyPress = false;
	var keyDownValue='';
	var keyDownStartPosition=0;
        var keyDownEndPosition=0;
        function charCodeEvent(evt)
        {
		if (evt.charCode)
                {
                        return evt.charCode;
                }
                else if (evt.keyCode)
                {
                        return evt.keyCode;
                }
                else if (evt.which)
                {
                        return evt.which;
                }
                else
                {
                        return 0;
                }
	}
        var onClick = function()
        {
                if (!D3Api.empty(maskParams.maskTemplate))
                    selectNext(getSelectionStart());
	}
        var onKeyPress = function (e)
        {
            if(!keyPress)
                return;
                var ch = charCodeEvent(e);
                ch = String.fromCharCode(ch);
                if(maskParams.maskCharReplace)
                {
                    if(typeof(maskParams.maskCharReplace) == 'string')
                    {
                        var chars = maskParams.maskCharReplace;
                        maskParams.maskCharReplace = {};
                        maskParams.maskCharSearch = '';
                        for(var i = 0, c = chars.length; i < c; i+=2)
                        {
                            maskParams.maskCharReplace[chars[i]] = chars[i+1] ? chars[i+1] : '';
                            maskParams.maskCharSearch += chars[i];
                        }
                    }
                    var ind = maskParams.maskCharSearch.indexOf(ch);
                    if(ind != -1)
                        ch = maskParams.maskCharReplace[maskParams.maskCharSearch[ind]];
                }
		if(!D3Api.empty(maskParams.maskTemplate))
                {
			if(updateValue(ch,keyDownStartPosition,keyDownStartPosition+1))
                            selectNext(keyDownStartPosition+1);
			D3Api.stopEvent(e);
                        return;
		}
                if((!D3Api.empty(maskParams.maskTemplateRegular) || !D3Api.empty(maskParams.maskTemplateFunction)))
                {
			if (updateValue(ch,keyDownStartPosition,keyDownEndPosition))
                            setCursorPos(keyDownStartPosition+1);
			D3Api.stopEvent(e);
			return;
		}
	}

    var onPaste = function (e) {
        clipboardData = e.clipboardData || window.clipboardData;
        pastedData = clipboardData.getData('Text');
        var bg = getSelectionStart();
        var en = getSelectionEnd();

        if(!D3Api.empty(maskParams.maskReplaceSpace) && maskParams.maskReplaceSpace === true)
        {
            pastedData = pastedData.replace(/\s/gm,'');
        }

        if(!D3Api.empty(maskParams.maskCharReplace))
        {
            var pastedData_temp = '';
            if(typeof(maskParams.maskCharReplace) == 'string' || (typeof(maskParams.maskCharReplace) == 'object'))
            {
                if(typeof(maskParams.maskCharReplace) == 'string') {
                    var chars = maskParams.maskCharReplace;
                    maskParams.maskCharReplace = {};
                    maskParams.maskCharSearch = '';
                    for (var i = 0, c = chars.length; i < c; i += 2) {
                        maskParams.maskCharReplace[chars[i]] = chars[i + 1] ? chars[i + 1] : '';
                        maskParams.maskCharSearch += chars[i];
                    }
                }
                var ch = '';
                var ind = 0;
                for(var i = 0; i < pastedData.length; i++)
                {
                    ch = pastedData.substr(i,1);
                    ind = maskParams.maskCharSearch.indexOf(ch);
                    if(ind != -1){
                        ch = maskParams.maskCharReplace[maskParams.maskCharSearch[ind]];
                    }
                    pastedData_temp = pastedData_temp + ch;
                }
            }
            pastedData = pastedData_temp.length > 0 ? pastedData_temp : pastedData;
        }

        if(!D3Api.empty(maskParams.maskTemplate)) {
            var templ_value = wearMask(pastedData);
            if (templ_value.length > 0) {
                bg = 0;
                if (updateValue(templ_value, bg, bg + templ_value.length))
                    selectNext(bg + templ_value.length);
                D3Api.stopEvent(e);
                return;
            };
        }
        if((!D3Api.empty(maskParams.maskTemplateRegular) || !D3Api.empty(maskParams.maskTemplateFunction)))
        {
            if (updateValue(pastedData,bg,en))
                setCursorPos(bg+1);
            D3Api.stopEvent(e);
            return;
        }
    };

	var onKeyDown = function (e)
        {
                keyPress = false;
            if (e.ctrlKey) return;
            	var bg = getSelectionStart();
		var en = getSelectionEnd();
		var keyCode=e.keyCode;
                if (!D3Api.empty(maskParams.maskTemplate))
                {
                    switch(keyCode){
                            case 8://backspace
                            case 46://dell
                                    var tpl = maskParams.maskTemplate;
                                    var tplstr = '';
                                    for(var i = bg; i < en; i++)
                                    {
                                        if("9ax".indexOf(tpl.charAt(i))>=0)
                                        {                                            
                                            tplstr += '_';
                                        }else
                                        {
                                            tplstr += tpl.charAt(i);
                                        }
                                    }
                                    var v = setUpdValue(getControlValueMask(),tplstr,bg,en);
                                    setControlValueMask(v);
                                    if(checkTemplateValue(v))
                                    {
                                        onWarningSuccess();
                                    }else
                                    {
                                        onWarningError();
                                    }
                                    if (keyCode == 8)
                                        selectPrev(bg||1);
                                    else
                                        selectNext(bg+1);

                                    D3Api.stopEvent(e);
                                    break;
                            case 33://PgUp
                            case 36:{//Home
                                    selectFirst();onWarningSuccess();
                                    D3Api.stopEvent(e);
                                    break;
                            }
                            case 34://PgDown
                            case 35:{//End
                                    selectLast();onWarningSuccess();
                                    D3Api.stopEvent(e);
                                    break;
                            }
                            case 40://down
                            case 39:{//right
                                    selectNext(bg+1);onWarningSuccess();
                                    D3Api.stopEvent(e);
                                    break;
                            }
                            case 38://Up
                            case 37:{//Left
                                    selectPrev(bg);onWarningSuccess();
                                    D3Api.stopEvent(e);
                                    break;
                            }
                            default:{
                                    if(keyCode>31 || keyCode == 0){     // keyCode = 0 - если браузер не может идентифицировать клавишу
                                            keyDownValue=getControlValueMask();
                                            keyDownStartPosition=bg;
                                            keyDownEndPosition=en;
                                            keyPress = true;
                                    }
                            }
                    }
                    return;
                }
		if (!D3Api.empty(maskParams.maskTemplateRegular) || !D3Api.empty(maskParams.maskTemplateFunction))
                {
			switch(keyCode){
				case 8://backspace
				case 46://del button keydown
				case 36://Home
				case 35://End
				case 40://down
				case 39://right
				case 38://Up
				case 37:{//Left
					if (checkTemplateValue(getControlValueMask()))
                                        {
						onWarningSuccess();
					}else
                                        {
						onWarningError();
					}
					break;
				}
				default:{
					if(keyCode>31 || keyCode == 0){    // keyCode = 0 - если браузер не может идентифицировать клавишу
						keyDownValue=getControlValueMask();
						keyDownStartPosition=bg;
						keyDownEndPosition=en;
                                                keyPress = true;
					}
				}
			}
			return;
		}
	}

        var onFocus = function (e)
        {
            if (D3Api.getProperty(input,'readonly','false') == 'true')
            {
                input.blur();
                return;
            }
            D3Api.addClass(control, 'ctrl_mask');
            var value = getControlValueMask();
            value = prepareMask(value);

            if(!checkValue(value))
            {
                onWarningError();
            }else
            {
                onWarningSuccess();
            }
            
            setControlValueMask(value);
            setSelection(0, value.length);
	}
        var onBlur = function ()
        {
            var value = getControlValueMask();
            var stripVal = value;
            if (maskParams.maskTemplateFunction)
                stripVal = stripValue(value);
            if(!checkValue(stripVal))
            {
                    onBlurError(stripVal);
                    return;
            }else
            {
                    onBlurSuccess();
            }
            value = stripValue(value);

            var input = D3Api.BaseCtrl.callMethod(control, 'getInput');
            var selectionStart = input.selectionStart;
            var selectionEnd = input.selectionEnd;

            D3Api.setControlPropertyByDom(control, maskParams.maskProperty, value,undefined,true);

            input.selectionStart = selectionStart;
            input.selectionEnd = selectionEnd;
	};
        var onChangeProperty = function(propertyName, propertyValue)
	{
		if (propertyName == maskParams.maskProperty)
		{
                        propertyValue = D3Api.getControlPropertyByDom(control, maskParams.maskProperty,true);
			if(!checkValue(propertyValue)){
				onBlurError(propertyValue);
			}else{
				onBlurSuccess();
			}
                        propertyValue = stripValue(propertyValue);
                        setControlValueMask(propertyValue);
		}
	}
        var onGetProperty = function(propertyName, propertyValueRef)
	{
		if (propertyName == maskParams.maskProperty)
		{
			propertyValueRef.value = stripValue(propertyValueRef.value);
		}
	}
        var prepareMask = function(value)
        {
            if(!maskParams.maskTemplate)
                return value;
            var tpl = maskParams.maskTemplate;
            var iv = 0;
            var rvalue = '';
            for(var i = 0, c = tpl.length; i < c; i++)
            {
                if("9ax".indexOf(tpl.charAt(i))>=0)
                {
                    if(iv < value.length)
                    {
                        rvalue += value.charAt(iv);
                        iv++;
                    }else
                        rvalue += '_';
                }else
                {
                    rvalue += tpl.charAt(i);
                    if(tpl.charAt(i) == value.charAt(iv))
                        iv++;
                }
            }
            
            return rvalue;
        }
        var checkValueByTemplate = function(value)
        {
            if(!maskParams.maskTemplate)
                return true;
            
            var tpl = maskParams.maskTemplate;
            var ch = '';
            for(var i = 0, u = 0, c = tpl.length; i < c; i++)
            {
                ch = value.charAt(i);
                switch(tpl.charAt(i))
                {
                    case '9':
                            if(!(/[0-9]/i).test(ch) && ch != '_')
                                return false;
                        break;
                    case 'a':
                            if(!(/[a-zA-Zа-яА-Я]/i).test(ch) && ch != '_')
                                return false;
                        break;
                    case 'x':
                            if(!(/[a-zA-Zа-яА-Я0-9]/i).test(ch) && ch != '_')
                                return false;
                        break;
                    default:
                            if(ch != '_' && ch != tpl.charAt(i) && ch != '_')
                                return false;
                        break;
                }
            }
            return true;
        }
        var stripValue = function(value)
        {     
            if(!maskParams.maskTemplate)
                return value;
            var tpl = maskParams.maskTemplate;
            var org = maskParams.maskOriginal;
            var rvalue = '';
            var clear = true;
            value = value || '';
            for(var i = 0, c = org.length; i < c; i++)
            {
                if(value.charAt(i) == '_')
                {
                    if(!maskParams.maskStrip)
                        rvalue +=org.charAt(i);
                }else
                {
                    if (i < value.length)
                    {
                        if(value.charAt(i) != org.charAt(i) || (value.charAt(i) == org.charAt(i) && org.charAt(i) != tpl.charAt(i)) )
                            clear = false;
                        if(value.charAt(i) != org.charAt(i) || org.charAt(i) != tpl.charAt(i) || !maskParams.maskClear)
                            rvalue += value.charAt(i);
                    }else if(!maskParams.maskStrip)
                        rvalue +=org.charAt(i);
                }
            }
            return (clear)?'':rvalue;
        }
        var checkValue = function (value){
		if (value == null) value = '';
                var notStripValue = value;
                value = stripValue(value);
		return  (maskParams.maskEmpty && value.length == 0)
                        ||
                        ((checkValueByTemplate(notStripValue) || maskParams.maskCheckRegular || maskParams.maskCheckFunction) && (!maskParams.maskCheckRegular || maskParams.maskCheckRegular.test(value)) &&
                        (!maskParams.maskCheckFunction || maskParams.maskCheckFunction(notStripValue||value)));
	}
        var checkTemplateValue = function (value){
		if (value == null) value = '';
                var notStripValue = value;
                value = stripValue(value);
		return  (maskParams.maskEmpty && value.length == 0)
                        ||
                        ((checkValueByTemplate(notStripValue) || maskParams.maskTemplateRegular || maskParams.maskTemplateFunction) && (!maskParams.maskTemplateRegular || maskParams.maskTemplateRegular.test(value)) &&
                        (!maskParams.maskTemplateFunction || maskParams.maskTemplateFunction(notStripValue||value)));
	}
        var updateValue = function (updValue,b,e)
        {
		var outValue='';
		var check=false;
		outValue=setUpdValue(getControlValueMask(),updValue,b,e);
                if(check = checkTemplateValue(outValue))
                {
                        setControlValueMask(outValue);
                        onWarningSuccess();
                }else
                {
                        onWarningError();
                }
                return check;
	}
	var onWarningError=function (){
                D3Api.addClass(control, 'ctrl_mask_warning');
		//_setControlProperty(domObject,'color','#f88');
	}
	var onWarningSuccess=function (){
                D3Api.removeClass(control, 'ctrl_mask_warning');
		//_setControlProperty(domObject,'color','#8f8');
	}

	var onBlurError=function (_value){
                //TODO: Изменить поведение
                D3Api.removeClass(control, 'ctrl_mask');
                D3Api.removeClass(control, 'ctrl_mask_warning');
                D3Api.setControlPropertyByDom(control, 'error', true);
	}
	var onBlurSuccess=function (){
                D3Api.removeClass(control, 'ctrl_mask');
                D3Api.removeClass(control, 'ctrl_mask_warning');
                D3Api.setControlPropertyByDom(control, 'error', false);
	}
	var setUpdValue=function (value,updValue,startPosition,endPosition){
		return value.substring(0,startPosition)+updValue+value.substring(endPosition);
	}
        var wearMask=function (value)
        {
		var outValue ='';
		var template = maskParams.maskTemplate;
		var ch = '';
		for(var i = 0, u = 0, c = template.length; i < c; i++)
                {
			ch = value.charAt(u);
			switch(template.charAt(i))
                        {
				case '9':{
					if(!(/[0-9]/i).test(ch))
                                        {
						outValue += '_';
					}else
                                        {
						outValue += ch;
					}
					u++;
					break;
				}
				case 'a':{
					if(!(/[a-zA-Zа-яА-Я]/i).test(ch))
                                        {
						outValue += '_';
					}else
                                        {
						outValue += ch;
					}
					u++;
					break;
				}
				case 'x':{
					if(!(/[a-zA-Zа-яА-Я0-9]/i).test(ch))
                                        {
						outValue += '_';
					}else
                                        {
						outValue += ch;
					}
					u++;
					break;
				}
				default:{
					outValue += template.charAt(i);
				}
			}
		}
		return outValue;
	}
        var getEmptyValue=function (startPosition, endPosition)
        {
		if(!maskParams.maskTemplate)
                    return '';
		var template = maskParams.maskTemplate;
		var outValue='';
		for(var index=startPosition;index<endPosition;index++)
                {
			if("9ax".indexOf(template.charAt(index)) < 0)
                            outValue += template.charAt(index); 
                        else 
                            outValue += '_';
		}
		return outValue;
	}
        
        
        
        var selectFirst=function ()
        {
		selectNext(0);
	}
	var selectLast=function ()
        {
		selectPrev(getControlValueMask().length);
	}
	var selectPrev=function (start)
        {
		if(maskParams.maskStrip || maskParams.maskTemplate)
                {
			for(var i = start-1; i >= 0; i--)
                        {
                            if("9ax".indexOf(maskParams.maskTemplate.charAt(i)) >= 0)
                            {
                                    setSelection(i,i+1);
                                    break;
                            }
			}
		}else
                {
			if(start != 0)
                        {
				setSelection(start-1,start);
			}
		}
	}
	var selectNext=function (start)
        {
		if(maskParams.maskStrip || maskParams.maskTemplate)
                {
                    if(start >= maskParams.maskTemplate.length)
                        start=maskParams.maskTemplate.length-1;
                    for(var i = start, c = maskParams.maskTemplate.length; i < c; i++)
                    {
                        if("9ax".indexOf(maskParams.maskTemplate.charAt(i)) >= 0)
                        {
                            setSelection(i,i+1);
                            break;
                        }
                    }
		}else
                {
                    setSelection(start,start+1);
		}
	}
	var setSelection=function(a, b)
        {
                try{input.focus();}catch(e){}
		if(input.setSelectionRange) {
			input.setSelectionRange(a, b);
		} else if(input.createTextRange) {
			var r = input.createTextRange();
			r.collapse();
			r.moveStart("character", a);
			r.moveEnd("character", (b - a));
			r.select();
		}
	}
	var getSelectionStart=function()
        {
		var p = 0;
                try{input.focus();}catch(e){}
		if(input.selectionStart !== undefined) 
                {
                    p = input.selectionStart;
		} else if(document.selection) 
                {
			var r = document.selection.createRange().duplicate();
			r.moveEnd("character", input.value.length);
			p = input.value.lastIndexOf(r.text);
			if(r.text == "") p = input.value.length;
		}
		return p;
	}
	var getSelectionEnd=function()
        {
		var p = 0;
                try{input.focus();}catch(e){}
		if(input.selectionEnd !== undefined) 
                {
			p=input.selectionEnd;
		} else if(document.selection) 
                {
			var r = document.selection.createRange().duplicate();
			r.moveStart("character", -input.value.length);
			p = r.text.length;
		}
		return p;
	}
        var setCursorPos = function(pos)
        {
		try{input.focus();}catch(e){}
		if(input.setSelectionRange) 
                {
			input.setSelectionRange(pos, pos);
		} else if(input.createTextRange) 
                {
			var r = input.createTextRange();
			r.moveStart("character", pos);
			r.moveEnd("character", pos+1);
			r.collapse();
			r.select();
		}
	}
        var setControlValueMask = function(value)
        {
            input.value = value;
        }
        var getControlValueMask = function()
        {
            var res = D3Api.getControlPropertyByDom(control, maskParams.maskProperty, true);
            if (D3Api.empty(res))
                res = '';
            return res; 
        }
        
        maskParamsInit(maskParams,control);
        
        D3Api.addEvent(input,'click',onClick);
        D3Api.addEvent(input,'keydown',onKeyDown);
        D3Api.addEvent(input,'keypress',onKeyPress);
        D3Api.addEvent(input,'focus',onFocus);
        D3Api.addEvent(input,'blur',onBlur);
        D3Api.addEvent(input,'paste',onPaste);

        control.D3Base.addEvent('onchange_property', onChangeProperty);
        control.D3Base.addEvent('onget_property', onGetProperty);
        
        var value = getControlValueMask();
        if(!checkValue(value))
        {
                onBlurError(value);
        }
    }//MaskInit
    function maskParamsInit(maskParams,control)
    {
         if(maskParams.maskOriginal == undefined)
            maskParams.maskOriginal = maskParams.maskTemplate;
        
        if(maskParams.maskCheckRegular)
            maskParams.maskCheckRegular = new RegExp(maskParams.maskCheckRegular);
        if(maskParams.maskCheckFunction)
            maskParams.maskCheckFunction = control.D3Form.execDomEventFunc(control, {func: maskParams.maskCheckFunction, args: 'value'});
        
        if(maskParams.maskTemplateRegular)
            maskParams.maskTemplateRegular = new RegExp(maskParams.maskTemplateRegular);
        if(maskParams.maskTemplateFunction)
            maskParams.maskTemplateFunction = control.D3Form.execDomEventFunc(control, {func: maskParams.maskTemplateFunction, args: 'value'});
        
        if(maskParams.maskTemplate == undefined && maskParams.maskTemplateRegular == undefined && maskParams.maskTemplateFunction == undefined)
        {
            if(maskParams.maskCheckRegular)
                maskParams.maskTemplateRegular = maskParams.maskCheckRegular;
            else if(maskParams.maskCheckFunction)
                maskParams.maskTemplateFunction = maskParams.maskCheckFunction;
        }else if(maskParams.maskTemplate != undefined && maskParams.maskTemplateRegular != undefined && maskParams.maskTemplateFunction != undefined)   
        {
            if(maskParams.maskCheckRegular == undefined)
                maskParams.maskCheckRegular = maskParams.maskTemplateRegular;
            if(maskParams.maskCheckFunction == undefined)
                maskParams.maskCheckFunction = maskParams.maskTemplateFunction;
        }
    }
}

D3Api.controlsApi['Mask'] = new D3Api.ControlBaseProperties(D3Api.MaskCtrl);




/**
 *
 * @component
 */
D3Api.DependencesCtrl = new function()
{
    /**
     *
     * @param dom
     */
    this.init = function(dom)
    {
        dom.D3Dependences = {};
        dom.D3Dependences.name = D3Api.getProperty(dom,'name') || D3Api.getUniqId('d');
        D3Api.DependencesCtrl.setCondition(dom,D3Api.getProperty(dom,'condition',false));
        dom.D3Dependences.repeater = dom.D3Form.getRepeater(D3Api.getProperty(dom,'repeatername'));
        dom.D3Dependences.required = {};
        dom.D3Dependences.depend ={};
        var req = D3Api.getProperty(dom, 'required', '').split(';');
        var dep = D3Api.getProperty(dom, 'depend', '').split(';');
        if(dom.D3Dependences.repeater) {
            dom.D3Dependences.repeater.addEvent('onafter_clone',function(){registerRequiredDepend(dom,req,dep)});
            dom.D3Dependences.repeater.addEvent('onclone_remove',function(){D3Api.DependencesCtrl.refresh(dom);});
        }else {
            if(dom.D3Form.currentContext && D3Api.hasProperty(dom.D3Form.currentContext,'isclone') && D3Api.hasProperty(dom.D3Form.currentContext,'repeatername')) {
                var rep = dom.D3Form.getRepeater(D3Api.getProperty(dom.D3Form.currentContext,'repeatername'));
                rep.addEventOnce('onclone_remove',function() {
                    for(var name in dom.D3Dependences.depend) {
                        if(dom.D3Dependences.depend.hasOwnProperty(name)) {
                            refreshDepend(dom,name,true);
                        }
                    }
                });
            }
            registerRequiredDepend(dom,req,dep);
        }
    };
    function registerRequiredDepend(dom,req,dep) {
        for(var i = 0, ic = req.length; i < ic; i++) {
            D3Api.DependencesCtrl.addRequiredControl(dom, req[i], false);
        }
        for(var i = 0, ic = dep.length; i < ic; i++) {
            D3Api.DependencesCtrl.addDependControl(dom, dep[i], false);
        }
        D3Api.DependencesCtrl.refresh(dom);
    }

    /**
     *
     * @param dom
     * @param name
     * @param refresh
     */
    this.addRequiredControl = function(dom,name,refresh)
    {
        if(refresh == undefined)
            refresh = true;
        if(D3Api.empty(name))
            return;
        
        var desc = name.split(':');
        
        name = desc[0];
        var warn = D3Api.getUniqId('w');
        var onlyWarn = false;
        //Просто проверка без предупреждения
        if(name[0] == '?')
        {
            warn = false;
            name = name.substr(1);
        }else if(name[0] == '!') //Только предупреждение
        {
            onlyWarn = true;
            name = name.substr(1);
        }
        
        if (dom.D3Dependences.required[name] && !dom.D3Dependences.repeater)
            return;
        
        if(warn && dom.D3Dependences.required[name])
            warn = dom.D3Dependences.required[name].warning;
                
        var ctrl = dom.D3Form.getControl(name);
        if(!ctrl)
            return;
        
        if(D3Api.getOption('showDependence',false) && !onlyWarn)
        {
            D3Api.addClass(ctrl, 'ctrl_dependence');
        }

        if (!ctrl.D3Dependences) {
            ctrl.D3Dependences = {};
        }
        if (!ctrl.D3Dependences.dependencesWarning) {
            ctrl.D3Dependences.dependencesWarning = {};
        }
        if (ctrl.D3Dependences.dependencesWarningAll == null) {
            ctrl.D3Dependences.dependencesWarningAll = 0;
        }

        if(warn)
        {   
            //Устанавливаем счетчик предупреждений
            ctrl.D3Dependences.dependencesWarning[warn] = 0;
        }
        //Любые свойства
        var prop = D3Api.BaseCtrl.callMethod(ctrl,'getDependencesProperty') || 'value';
        if (desc[1])
        {
            prop = desc[1];
        }
        //Проверки
        var chk = '';
        if (desc[2])
        {
            chk = dom.D3Form.execDomEventFunc(ctrl, {func: desc[2], args: 'value'});
        }
        dom.D3Dependences.required[name] = {eventInput: null, event: '', property: prop, value: '', check: chk, warning: warn, onlyWarning: onlyWarn, errorState: null};
        
        dom.D3Dependences.required[name].value = D3Api.getControlPropertyByDom(ctrl, prop);
        
        dom.D3Dependences.required[name].event = ctrl.D3Base.addEvent('onchange_property',dom.D3Form.closure(
            function(property,value)
            {
                if(property == prop)
                {
                    if(dom.D3Dependences.required[name])
                    {
                        value = D3Api.getControlPropertyByDom(ctrl, property);
                        dom.D3Dependences.required[name].value = value;
                    }
                    D3Api.DependencesCtrl.refresh(dom);
                }
                if(property == 'error')
                {
                    dom.D3Dependences.required[name].errorState = null;
                    ctrl.D3Store.D3MaskParams && (dom.D3Dependences.required[name].errorState = !ctrl.D3Form.getControlProperty(ctrl,'error') && ctrl.D3Store.D3MaskParams.valid()&&!value);
                    D3Api.DependencesCtrl.refresh(dom);
                }    
            }));
        var input = dom.D3Form.getControlProperty(ctrl,'input');
        if(input)
        {
            dom.D3Dependences.required[name].eventInput = D3Api.addEvent(input,'keyup',function(closeureContext){return function(){
                if(dom.D3Dependences.timer)
                {
                    clearTimeout(dom.D3Dependences.timer);
                    dom.D3Dependences.timer = null;
                }
                dom.D3Dependences.timer = setTimeout(function(){
                    dom.D3Form.closureContext(closeureContext);
                    if (dom.D3Dependences.required[name]) {
                        dom.D3Dependences.required[name].value = D3Api.getControlPropertyByDom(ctrl, prop);
                        dom.D3Dependences.required[name].errorState = null;
                        ctrl.D3Store.D3MaskParams && (dom.D3Dependences.required[name].errorState = !ctrl.D3Form.getControlProperty(ctrl,'error') && ctrl.D3Store.D3MaskParams.valid());
                    }
                    D3Api.DependencesCtrl.refresh(dom);
                    dom.D3Form.unClosureContext();
                },500);
            }}(dom.D3Form.currentContext),true);
        }
        if(refresh)
            D3Api.DependencesCtrl.refresh(dom);
    };

    /***
     *
     * @param dom
     * @param name
     */
    this.removeRequiredControl = function(dom,name)
    {
        if (!dom.D3Dependences.required[name])
            return;
        
        var ctrl = dom.D3Form.getControl(name);
        if(D3Api.getOption('showDependence',false))
        {
            D3Api.removeClass(ctrl, 'ctrl_dependence');
        }
        if (dom.D3Dependences.required[name].warning)
        {
            //Убрать предупреждение с контрола
            if(ctrl.D3Dependences.dependencesWarning[dom.D3Dependences.required[name].warning] == 1)
            {
                ctrl.D3Dependences.dependencesWarningAll--;
                if(ctrl.D3Dependences.dependencesWarningAll == 0)
                    D3Api.setControlPropertyByDom(ctrl, 'warning', false);
            }
            delete ctrl.D3Dependences.dependencesWarning[dom.D3Dependences.required[name].warning];
        }
        
        ctrl.D3Base.removeEvent('onchange_property', dom.D3Dependences.required[name].event);
        if(dom.D3Dependences.required[name].eventInput)
            D3Api.removeEvent(dom.D3Form.getControlProperty(ctrl,'input'),'keyup', dom.D3Dependences.required[name].eventInput);
        dom.D3Dependences.required[name] = null;
        delete dom.D3Dependences.required[name];
        
        D3Api.DependencesCtrl.refresh(dom);
    };

    /**
     *
     * @param dom
     * @param name
     * @param refresh
     */
    this.addDependControl = function(dom,name,refresh)
    {
        var _name = '';
        var prop = 'enabled';//Любые свойства
        var res = '';//Проверки
        var ctrl = null;
        if(refresh == undefined)
            refresh = true;
        if(D3Api.empty(name)){
            return;
        }
        if(typeof name == 'string'){
            var desc = name.split(':');
            _name = desc[0];
            if (dom.D3Dependences.depend[name]){
                return;
            }
            if (desc[1])
            {
                prop = desc[1];
            }
            if (desc[2])
            {
                res = desc[2];
            }
            ctrl = dom.D3Form.getControl(name);
        }else{
            _name = D3Api.getProperty(name,'name');
            ctrl = name;
        }

        var depuid = D3Api.getUniqId('d');

        if(!ctrl.D3DependencesDepend || !ctrl.D3DependencesDepend[dom.D3Dependences.name])
        {
            ctrl.D3DependencesDepend = ctrl.D3DependencesDepend || {}
            ctrl.D3DependencesDepend[dom.D3Dependences.name] = {};            
        }
        ctrl.D3DependencesDepend[dom.D3Dependences.name][depuid] = true;
        
        dom.D3Dependences.depend[_name] = {property: prop, result: res, control: ctrl, depuid: depuid};
        
        if(refresh)
        {
            if(dom.D3Dependences.lastResult != undefined)
            {
                refreshDepend(dom,_name,dom.D3Dependences.lastResult);
            }else
                D3Api.DependencesCtrl.refresh(dom);
        }
    };

    /**
     *
     * @param dom
     * @returns {string[]}
     */
    this.getDependControlList = function(dom)
    {
        if (!dom || !dom.D3Dependences || !dom.D3Dependences.required)
            return;

        var requiredArray = Object.keys(dom.D3Dependences.required);
        return requiredArray;
    };

    /**
     *
     * @param dom
     * @param name
     */
    this.removeDependControl = function(dom,name)
    {
        if (!dom.D3Dependences.depend[name])
            return;
        
        refreshDepend(dom,name,true);
        
        dom.D3Dependences.depend[name].control.D3DependencesDepend[dom.D3Dependences.name][dom.D3Dependences.depend[name].depuid] = null;
        delete dom.D3Dependences.depend[name].control.D3DependencesDepend[dom.D3Dependences.name][dom.D3Dependences.depend[name].depuid];
        
        dom.D3Dependences.depend[name] = null;
        delete dom.D3Dependences.depend[name];
        //TODO: Вернуть состояние ? какое (должен позаботиться разработчик сам)
    };

    /**
     *
     * @param dom
     */
    this.refresh = function(dom)
    {
        var sW = !dom.D3Dependences.condition;
        var result = true, rD = {};
        if(dom.D3Dependences.repeater)
        {
            var clns = dom.D3Dependences.repeater.clones();
            for(var i = 0, ic = clns.length; i < ic; i++)
            {
                dom.D3Form.closureContext(clns[i]);
                for(var name in dom.D3Form.getControl(dom.getAttribute('name')).D3Dependences.required || dom.D3Dependences.required)
                {
                    if(!dom.D3Dependences.required.hasOwnProperty(name)){
                        continue;
                    }
                    //Проверки
                    if (!checkRequired(dom,name,undefined,sW))
                    {
                        rD[name] = false;
                        result = 0;
                    }else
                        rD[name] = 1;
                }
                dom.D3Form.unClosureContext();
            }
        }else
        {
            for(var name in dom.D3Dependences.required)
            {
                if(!dom.D3Dependences.required.hasOwnProperty(name)){
                    continue;
                }
                if (!checkRequired(dom,name,dom.D3Dependences.required[name].value,sW,dom.D3Dependences.required[name].errorState))
                {
                    rD[name] = false;
                    result = 0;
                }else
                    rD[name] = 1;
            }
        }
        if(dom.D3Dependences.condition)
        {
            result = dom.D3Dependences.condition(rD);
        
            for(var n in rD)
            {
                if(rD.hasOwnProperty(n)){
                    setWarningState(dom,n,result||rD[n]);
                }

            }
        }

        var bChange = (dom.D3Dependences.lastResult !== result);
        dom.D3Dependences.lastResult = result;

        for(var name in dom.D3Dependences.depend)
        {
            if(dom.D3Dependences.depend.hasOwnProperty(name)){
                refreshDepend(dom,name,result);
            }
        }

        if (bChange) {
            dom.D3Base.callEvent('onchange_property', 'value');
        }
    };
    function refreshDepend(dom,name,result)
    {
        if (dom.D3Dependences.depend[name].result != '')
        {
            result = dom.D3Form.execDomEventFunc(dom, {func:dom.D3Dependences.depend[name].result,args:'result'})(result);
        }
        var ctrl = dom.D3Dependences.depend[name].control;
        ctrl.D3DependencesDepend[dom.D3Dependences.name][dom.D3Dependences.depend[name].depuid] = result;
        result = true;
        for(var d in ctrl.D3DependencesDepend)
        {
            if(!ctrl.D3DependencesDepend.hasOwnProperty(d)){
                continue;
            }
            for (var du in ctrl.D3DependencesDepend[d]){
                if(ctrl.D3DependencesDepend[d].hasOwnProperty(du)){
                    result = result && ctrl.D3DependencesDepend[d][du];
                }
            }

        }
        D3Api.setControlPropertyByDom(ctrl,dom.D3Dependences.depend[name].property,result);
    }
    function checkRequired(dom,name,value,setWarning,error)
    {
        value = value || dom.D3Form.getControlProperty(name,dom.D3Dependences.required[name].property);
        var res = (!D3Api.isUndefined(error))?error:!dom.D3Form.getControlProperty(name,'error');
        //Проверки
        if(!dom.D3Dependences.required[name].onlyWarning)
        {    
            if (dom.D3Dependences.required[name].check != '')
            {
                if(!dom.D3Dependences.required[name].check(value))
                    res = false;
            }else if(!value)
                res = false; 
        }
        if(setWarning)
            setWarningState(dom,name,res);
        return res;
    }
    function setWarningState(dom,name,state)
    {
        if (dom.D3Dependences.required[name].warning)
        {    
            var ctrl = dom.D3Form.getControl(name);
            if(!ctrl.D3Dependences)
                return;
            if(!state)
            {
                //Увеличиваем счетчик
                if(ctrl.D3Dependences.dependencesWarning[dom.D3Dependences.required[name].warning] == 0)
                {
                    ctrl.D3Dependences.dependencesWarning[dom.D3Dependences.required[name].warning] = 1;
                    ctrl.D3Dependences.dependencesWarningAll++;
                }
                D3Api.setControlPropertyByDom(ctrl, 'warning', true);
            }else
            {
                if(ctrl.D3Dependences.dependencesWarning[dom.D3Dependences.required[name].warning] == 1)
                {
                    ctrl.D3Dependences.dependencesWarning[dom.D3Dependences.required[name].warning] = 0;
                    ctrl.D3Dependences.dependencesWarningAll--;
                }
                if(ctrl.D3Dependences.dependencesWarningAll == 0)
                    D3Api.setControlPropertyByDom(ctrl, 'warning', false);
            }    
        }
    }

    /**
     *
     * @param dom
     * @param value
     */
    this.setCondition = function(dom,value)
    {
        dom.D3Dependences.condition = null;
        if(!value) return;
        
        value = value.replace(/([a-z][a-z_0-9]+)/ig,'R.$1');
        dom.D3Dependences.condition = new Function('R','return !!('+value+')');
    };

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getValue = function (dom) {
        return dom.D3Dependences.lastResult;
    };
};

D3Api.controlsApi['Dependences'] = new D3Api.ControlBaseProperties(D3Api.DependencesCtrl);
D3Api.controlsApi['Dependences']['condition'] = {set: D3Api.DependencesCtrl.setCondition};
D3Api.controlsApi['Dependences']['value'] = {get: D3Api.DependencesCtrl.getValue};
/**
 *
 * @component
 */
D3Api.HyperLinkCtrl = new function(){

    /**
     *
     * @param dom
     */
    this.init = function(dom)
    {
        this.init_focus(dom);
    }
    
    /**
     *
     * @param _dom
     * @param _value
     */
    this.setCaption = function(_dom,_value)
    {
         _dom.innerHTML =_value;
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getCaption = function(_dom)
    {
        return _dom.innerHTML;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setValue= function(_dom,_value)
    {
        D3Api.setProperty(_dom,'keyvalue',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getValue= function(_dom)
    {
        return D3Api.getProperty(_dom,'keyvalue','');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setLink = function(_dom,_value)
    {
        D3Api.setProperty(_dom,'href',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getLink = function(_dom)
    {
        return D3Api.getProperty(_dom,'href', '');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setTitle= function(_dom,_value)
    {
        D3Api.setProperty(_dom,'title',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getTitle= function(_dom)
    {
        return D3Api.getProperty(_dom,'title','');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setUnit= function(_dom,_value)
    {
        D3Api.setProperty(_dom,'unit',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getUnit= function(_dom)
    {
        return D3Api.getProperty(_dom,'unit','');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setOnClose= function(_dom,_value)
    {
        D3Api.setProperty(_dom,'onclose',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getOnClose= function(_dom)
    {
        return D3Api.getProperty(_dom,'onclose','');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setComposition = function(_dom,_value)
    {
        D3Api.setProperty(_dom,'composition',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getComposition = function(_dom)
    {
        return D3Api.getProperty(_dom,'composition');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setCompMethod = function(_dom,_value)
    {
        D3Api.setProperty(_dom,'method',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getCompMethod = function(_dom)
    {
        return D3Api.getProperty(_dom,'method');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setIsView = function(_dom,_value)
    {
        D3Api.setProperty(_dom,'is_view',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getIsView = function(_dom)
    {
        return D3Api.getProperty(_dom,'is_view');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setNewThread = function(_dom,_value)
    {
        D3Api.setProperty(_dom,'newthread',_value);
    }

    /**
     *
     * @param _dom
     * @returns {boolean}
     */
    this.getNewThread = function(_dom)
    {
        return D3Api.getProperty(_dom,'newthread') === 'true';
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setEmptyValue = function(_dom,_value)
    {
        D3Api.setProperty(_dom,'emptyvalue',_value);
    }

    /**
     *
     * @param _dom
     * @returns {boolean}
     */
    this.getEmptyValue = function(_dom)
    {
        return D3Api.getProperty(_dom,'emptyvalue') === 'true';
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setCompVars = function(_dom,_value)
    {
        D3Api.setProperty(_dom,'comp_vars',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getCompVars = function(_dom)
    {
        return D3Api.getProperty(_dom,'comp_vars','');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setCompRequest = function(_dom,_value)
    {
        D3Api.setProperty(_dom,'comp_request',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getCompRequest = function(_dom)
    {
        return D3Api.getProperty(_dom,'comp_request','');
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setKeyValueControl = function(_dom,_value)
    {
        D3Api.setProperty(_dom,'keyvaluecontrol',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getKeyValueControl = function(_dom)
    {
        return D3Api.getProperty(_dom,'keyvaluecontrol');
    }
    
    /**
     *
     * @param _dom
     * @param _value
     */
    this.setTarget = function(_dom,_value)
    {
        D3Api.setProperty(_dom,'target',_value);
    }

    /**
     *
     * @param _dom
     * @returns {*}
     */
    this.getTarget = function(_dom)
    {
        return D3Api.getProperty(_dom,'target','');
    }

    /**
     *
     * @param dom
     * @param e
     */
    this.CtrlKeyDown = function(dom, e)
    {
        switch (e.keyCode)
        {
            case 32: //Enter
                dom.click();
                D3Api.stopEvent(e);
                break;
        }
    };

    /**
     *
     * @param dom
     * @returns {boolean}
     */
    this.onClick = function(dom)
    {
        var unit = this.getUnit(dom);
        var keyvaluecontrol = this.getKeyValueControl(dom);
        var composition = this.getComposition(dom);
        var method = this.getCompMethod(dom);
        var is_view = this.getIsView(dom);
        var comp_vars = this.getCompVars(dom);
        var comp_request = this.getCompRequest(dom);
        var newthread = this.getNewThread(dom);
        var emptyvalue = this.getEmptyValue(dom);
        var target = this.getTarget(dom);
        var link = this.getLink(dom);
        var id;
        var onclose = this.getOnClose(dom);
        var onclose_func = onclose ? dom.D3Form.execDomEventFunc(dom,onclose) : undefined;
        var append_filter = D3Api.getProperty(dom,'append_filter','');

        if (link.length > 0) return true; // если указан href - ничего не делаем, дальше вызывается стандартный клик по ссылке

        if (!keyvaluecontrol)
            id = this.getValue(dom);
        else{
            //берем значение из привязанного контрола
            if (!dom.D3Form.controlExist(keyvaluecontrol)){
                D3Api.notify('Внимание!', 'Контрол со значением не найден!', { modal: true });
                D3Api.stopEvent();
                return false;
            }
            id = dom.D3Form.getValue(keyvaluecontrol);
        }

        // проверяем обязателен ли id
        if (!id && !emptyvalue){
            D3Api.notify('Внимание!', 'Значение не выбрано!', { 'expires':2000 });
            D3Api.stopEvent();
            return false;
        }

        if (!unit){ // не указан раздел - переходим по ссылке, указанной в value
            link = id;
            D3Api.HyperLinkCtrl.setLink(dom, link);
            return true;
            //.. дальше вызывается стандартный клик по ссылке
        }
        else{ // раздел указан
            if (target == '_blank'){
                link = '?unit='+unit+(composition ? '&composition='+composition : '')+(method ? '&method='+method : '')+(id ? '&id='+id : '');
                D3Api.HyperLinkCtrl.setLink(dom, link);
                return true;
                //.. дальше вызывается стандартный клик по ссылке
            }
        }

        var vars = {};
        var request = {};

        // протаскиваем доп. переменные
        if (comp_vars){
            this.parseCompVars(dom,comp_vars,vars);
        }
        if (comp_request){
            this.parseCompVars(dom,comp_request,request);
        }

        if (append_filter) {
            var obj_tmp = append_filter.split(';');
            var res = [];

            for (var i = 0; i < obj_tmp.length; i++) {
                var obj = obj_tmp[i].split(':');

                if (obj[0] == 'ctrl') res[i] = dom.D3Form.getValue(obj[1]);
                else if (obj[0] == 'const') res[i] = obj[1];
                else if (obj[0] == 'var') {
                    var varName = obj[1].split('.');
                    if (!varName[1]) res[i] = dom.D3Form.getVar(varName[0]);
                    else res[i] = dom.D3Form.getVar(varName[0]) ? dom.D3Form.getVar(varName[0])[varName[1]] : '';
                }
                else res[i] = obj[0];
            }

            var result = {append_filter: res.join(';')};
            Object.assign(request,result);
        }

        var params = {
            composition: composition,
            method: method,
            request: request,
            vars: vars,
            isView : is_view,
            container: D3Api.MainDom,
            thread: newthread,
            newthread: newthread,
            onclose: onclose_func
        };

        D3Api.openFormByUnit(dom.D3Form, unit, id, params);
    };

    /**
     *
     */
    this.parseCompVars = function(dom, source, dest){
        var sourceData = source.split(';'); // массив всех переменных

        for (var i = 0; i < sourceData.length; i++){
            var data = sourceData[i].split(':'); // формируем массив [0=>NAME, 1=TYPE, 2=>VALUE]

            if (!data[2])                value = data[1]; // если данные в формате NAME:VALUE - считаем константой
            else if (data[1] == 'const') value = data[2]; // константа
            else if (data[1] == 'ctrl')  value = dom.D3Form.getValue(data[2]); // из контрола
            else if (data[1] == 'var'){
                var sourceVarName = data[2].split('.'); //для объектов

                if (!sourceVarName[1]) value = dom.D3Form.getVar(sourceVarName[0]);// не объект
                else value = dom.D3Form.getVar(sourceVarName[0]) ? dom.D3Form.getVar(sourceVarName[0])[sourceVarName[1]] : null; // объект
            }

            // преобразуем к boolean
            if (value === 'false') value = false;
            if (value === 'true')  value = true;

            var destVarName = data[0].split('.'); // имя переменной или объекта

            if (!destVarName[1]) dest[destVarName[0]] = value; // не объект
            else{ // объект
                if (!dest[destVarName[0]]) dest[destVarName[0]] = {};
                dest[destVarName[0]][destVarName[1]] = value;
            }
        }
    }
};

D3Api.controlsApi['HyperLink'] = new D3Api.ControlBaseProperties(D3Api.HyperLinkCtrl);
D3Api.controlsApi['HyperLink']['caption']={get:D3Api.HyperLinkCtrl.getCaption,set:D3Api.HyperLinkCtrl.setCaption};
D3Api.controlsApi['HyperLink']['value']={get:D3Api.HyperLinkCtrl.getValue,set:D3Api.HyperLinkCtrl.setValue};
D3Api.controlsApi['HyperLink']['title']={get:D3Api.HyperLinkCtrl.getTitle,set:D3Api.HyperLinkCtrl.setTitle};
D3Api.controlsApi['HyperLink']['unit']={get:D3Api.HyperLinkCtrl.getUnit,set:D3Api.HyperLinkCtrl.setUnit};
D3Api.controlsApi['HyperLink']['composition']={get:D3Api.HyperLinkCtrl.getComposition,set:D3Api.HyperLinkCtrl.setComposition};
D3Api.controlsApi['HyperLink']['method']={get:D3Api.HyperLinkCtrl.getCompMethod,set:D3Api.HyperLinkCtrl.setCompMethod};
D3Api.controlsApi['HyperLink']['is_view']={get:D3Api.HyperLinkCtrl.getIsView,set:D3Api.HyperLinkCtrl.setIsView};
D3Api.controlsApi['HyperLink']['newthread']={get:D3Api.HyperLinkCtrl.getNewThread,set:D3Api.HyperLinkCtrl.setNewThread};
D3Api.controlsApi['HyperLink']['emptyvalue']={get:D3Api.HyperLinkCtrl.getEmptyValue,set:D3Api.HyperLinkCtrl.setEmptyValue};
D3Api.controlsApi['HyperLink']['comp_vars']={get:D3Api.HyperLinkCtrl.getCompVars,set:D3Api.HyperLinkCtrl.setCompVars};
D3Api.controlsApi['HyperLink']['comp_request']={get:D3Api.HyperLinkCtrl.getCompRequest,set:D3Api.HyperLinkCtrl.setCompRequest};
D3Api.controlsApi['HyperLink']['keyvaluecontrol']={get:D3Api.HyperLinkCtrl.getKeyValueControl,set:D3Api.HyperLinkCtrl.setKeyValueControl};
D3Api.controlsApi['HyperLink']['target']={get:D3Api.HyperLinkCtrl.getTarget,set:D3Api.HyperLinkCtrl.setTarget};
D3Api.controlsApi['HyperLink']['href']={get:D3Api.HyperLinkCtrl.getLink,set:D3Api.HyperLinkCtrl.setLink};
D3Api.controlsApi['HyperLink']['onclose']={get:D3Api.HyperLinkCtrl.getOnClose,set:D3Api.HyperLinkCtrl.setOnClose};/**
 *
 * @component
 */
D3Api.ExpanderCtrl = new function() {
    var _this = this;

    /**
     *
     * @param dom
     */
    this.init = function(dom) {
        /*
        dom.D3Store.value = true;
        dom.D3Store.mode = D3Api.getProperty(dom, 'mode', 'horizontal');
        dom.D3Store.height = D3Api.getProperty(dom, 'hgt');
        dom.D3Store.width = D3Api.getProperty(dom, 'wdt','auto');
        dom.D3Store.caption_hide = D3Api.getProperty(dom, 'caption_hide');
        dom.D3Store.caption_show = D3Api.getProperty(dom, 'caption_show');
        dom.D3Store.value = D3Api.hasClass(dom, 'show');
        dom.D3Store.captionCont = D3Api.getAllDomBy(dom, '[cont="captionCont"]');
        dom.D3Store.captionCont = dom.D3Store.captionCont[dom.D3Store.captionCont.length-1];
        */
        D3Api.BaseCtrl.initEvent(dom, 'onchange');
        this.init_focus(dom);
    };

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getValue = function Expander_getValue(dom) {
        return dom.D3Store.value;
    };

    this.getHeightValue = function Expander_getValue(dom) {
        var _ctrl =dom;
        if ((_ctrl.getAttribute("height") !== null) &&(_ctrl.getAttribute("height").length > 0)) {
           _height = _ctrl.getAttribute("height");
        } else {
           _height = (_ctrl.parentNode.getBoundingClientRect()).height+"px";
        }
        if (!isNaN(_height)) {
              _height+="px";
         }
        return _height;
    };

    this.setHeightValue = function Expander_getValue(dom,_heightValue) {
        var _ctrl =dom;
        if (!isNaN(_heightValue)) {
              _heightValue+="px";
         }
        _ctrl.setAttribute("height",_heightValue)
        this.toggleHeight(dom);
    };

    this.toggleHeight = function Expander_setValue(dom, value) {
        var _ctrl =dom.parentNode;
        var _height = value;

        if ((_ctrl.getAttribute("height") !== null) &&(_ctrl.getAttribute("height").length > 0)) {
           _height = _ctrl.getAttribute("height");
        } else {
           _height = (_ctrl.parentNode.getBoundingClientRect()).height+"px";
        }
        // value = _ctrl.getAttribute("show") === 'true';
        // if (typeof value === undefined ){        }
        if (!isNaN(_height)) {
              _height+="px";
         }
        if(_ctrl.style.height != '20px') {
            _ctrl.style.height = '20px'; // height of one line: 20px
            dom.classList.remove('show');
            dom.style.backgroundPosition="4px -7px";
        } else {
            dom.classList.add('show');
            dom.style.backgroundPosition="4px 10px";
            _ctrl.style.height = _height;
        }
    }
    /**
     *
     * @param dom
     * @param value
     * @returns {boolean}
     */
    this.setValue = function Expander_setValue(dom, value) {
        if (value === undefined) {
            value = false ;
        }
        var srcVal = dom.getAttribute("value") === 'true';
        var mode =  dom.getAttribute("mode");
        var caption_hide =  dom.getAttribute("caption_hide");
        var caption_show =  dom.getAttribute("caption_show");

        if(srcVal !== value) {
            if( mode == 'horizontal') {
               D3Api.setStyle(dom, 'height', dom.style.height);
            } else if(mode == 'vertical') {
               D3Api.setStyle(dom, 'height', dom.style.width);
            }

            D3Api.addClass(dom, 'show');
            if(caption_hide || caption_show) {
                 _this.setCaption(dom, caption_hide);
            }
            dom.setAttribute("value",srcVal !== value);
        }
        D3Api.resize();
        // dom.callEvent('onchange');

        /*
        if (typeof dom.D3Store.value === undefined){
            dom.D3Store.value = dom.getAttribute("value") === 'true';
        }
        value = (value === undefined) ? !dom.D3Store.value : !!value;
        if(dom.D3Store.value !== value) {
            if(dom.D3Store.value = value) {
                if(dom.D3Store.mode == 'horizontal')
                    D3Api.setStyle(dom, 'height', dom.D3Store.height);
                else if(dom.D3Store.mode == 'vertical')
                    D3Api.setStyle(dom, 'width', dom.D3Store.width);
                
                D3Api.addClass(dom, 'show');
                if(dom.D3Store.caption_hide || dom.D3Store.caption_show) {
                    _this.setCaption(dom, dom.D3Store.caption_hide);
                }
            }
            else {
                D3Api.removeClass(dom, 'show');
                if(dom.D3Store.mode == 'horizontal')
                    D3Api.setStyle(dom, 'height', '');
                else if(dom.D3Store.mode == 'vertical')
                    D3Api.setStyle(dom, 'width', '');
                    
                if(dom.D3Store.caption_hide || dom.D3Store.caption_show) {
                    _this.setCaption(dom, dom.D3Store.caption_show);
                }
            }
            D3Api.resize();
            dom.D3Base.callEvent('onchange');
        }*/
        return value;
    };

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getCaption = function Expander_getCaption(dom) {
        return D3Api.getTextContent(dom.D3Store.captionCont);
    };

    /**
     *
     * @param dom
     * @param value
     * @returns {string}
     */
    this.setCaption = function Expander_setCaption(dom, value) {
        value = (D3Api.empty(value)) ? '' : String(value);
        D3Api.addTextNode(dom.D3Store.captionCont, value, true);
        return value;
    };

    /**
     *
     * @param dom
     * @returns {string}
     */
    this.getCaptionHide = function Expander_getCaptionHide(dom) {
        return dom.D3Store.caption_hide;
    };

    /**
     *
     * @param dom
     * @param value
     * @returns {*}
     */
    this.setCaptionHide = function Expander_setCaptionHide(dom, value) {
        return dom.D3Store.caption_hide = (D3Api.empty(value)) ? undefined : String(value);
    };
    
    /**
     *
     * @param dom
     * @returns {string}
     */
    this.getCaptionShow = function Expander_getCaptionShow(dom) {
        return dom.D3Store.caption_show;
    };

    /**
     *
     * @param dom
     * @param value
     * @returns {*}
     */
    this.setCaptionShow = function Expander_setCaptionShow(dom, value) {
        return dom.D3Store.caption_show = (D3Api.empty(value)) ? undefined : String(value);
    };

    /**
     *
     * @param dom
     * @param e
     */
    this.CtrlKeyDown = function(dom, e)
    {
        switch (e.keyCode)
        {
            case 39: //стрелка вправо - развернуть
            case 32://пробел
                D3Api.ExpanderCtrl.setValue(dom, true) ;
                D3Api.stopEvent(e);
                break;
            case 37: //стрелка влево - свернуть
            case 8: // Backspase
                D3Api.ExpanderCtrl.setValue(dom, false) ;
                D3Api.stopEvent(e);
                break;
        }
    }

    ///**********************************************************************************
    var oldLeft=new Number(0);
    var oldTop=new Number(0);
    var captureX=new Number(0);
    var captureY=new Number(0);
    var docMoveEvent=function(){};
    var docUpEvent=function(){};
    var modal_win;

    var blockEdit =null;
    var blockSpliter =null;
    var new_x = 0;
    var new_y = 0;
    this.moveSplit=function(evt,direction) {
           if ((typeof direction === 'undefined')||( direction == '')) {
              direction = "top";
           }
           if (direction == "top") {
              blockEdit = evt.target.previousSibling;
           }
           /*
           if (direction == "left"){
               blockEdit =evt.target.previousElementSibling;
           }
           if (direction == "right"){
               blockEdit =evt.target.nextElementSibling;
           }
           */
           blockSpliter = evt.target;
           rect = blockEdit.getBoundingClientRect()
           blockEdit.style.width = rect.width + "px";
           blockEdit.style.height = rect.height + "px";
           blockEdit.style.left =  rect.left + "px";
           blockEdit.style.top =  rect.top + "px";
           var ie = 0;
           var op = 0;
           var ff = 0;
           var browser = navigator.userAgent;
           if (browser.indexOf("Opera") != -1) op = 1;
           else {
             if (browser.indexOf("MSIE") != -1) ie = 1;
             else {
               if (browser.indexOf("Firefox") != -1) ff = 1;
             }
           }
           delta_x = 0;
           delta_y = 0;
           /* Ставим обработчики событий на нажатие и отпускание клавиши мыши */
           saveXY();
      	   addEvent(document,'mouseup',clearXY);
      	   addEvent(document,'mouseout',clearXY);

           /* При нажатии кнопки мыши попадаем в эту функцию */
           function saveXY(obj_event) {
             /* Получаем текущие координаты курсора */
             x = window.event.clientX;
             y = window.event.clientY;
             x_block = rect.width;
             y_block = rect.height-5;
             delta_x = x_block - x;
             delta_y = y_block - y;
             if (op || ff) {
   	    	     addEvent(document,'mousemove',moveBlock,false);
   	    	     // document.addEventListener('mousemove', saveXY, false);
                 // block.addEventListener("onmousemove", moveBlock, false);
             } else {
                 document.onmousemove = moveBlock;
             }
           }
           function clearXY() {
               var heightStr = blockEdit.style.height;
               heightNum = +heightStr.replace(/[a-zа-яё]/gi, '');
               if (heightNum > 100) {
                   heightStr = heightStr.replace(/[0-9]/g, '');
                   blockEdit.setAttribute("height",heightNum+heightStr);
               }
           }
           function moveBlock(obj_event) {
              if (obj_event.buttons !== 1){
                 if (op || ff) {
                    removeEvent(document,'mousemove',moveBlock);
                 } else {
                    document.onmousemove = null; // При отпускании мыши убираем обработку события движения мыши
                 }
                 return false
              }
              /* Получаем новые координаты курсора мыши */
              x = window.event.clientX;
              y = window.event.clientY;
              /* Вычисляем новые координаты блока */
              if ((direction == "left")||(direction == "right")) {
                 new_x = delta_x + x;
                 blockEdit.style.width = new_x + "px";
              }
              if (direction == "top") {
                 new_y = delta_y + y;
                 blockEdit.style.height = new_y + "px";
              }
           }
           return false;
        }
    ///**********************************************************************************

};
D3Api.controlsApi['Expander'] = new D3Api.ControlBaseProperties(D3Api.ExpanderCtrl);
D3Api.controlsApi['Expander']['value'] = {get: D3Api.ExpanderCtrl.getValue, set: D3Api.ExpanderCtrl.setValue};
D3Api.controlsApi['Expander']['caption'] = {get: D3Api.ExpanderCtrl.getCaption, set: D3Api.ExpanderCtrl.setCaption};
D3Api.controlsApi['Expander']['captionHide'] = {get: D3Api.ExpanderCtrl.getCaptionHide, set: D3Api.ExpanderCtrl.setCaptionHide};
D3Api.controlsApi['Expander']['captionShow'] = {get: D3Api.ExpanderCtrl.getCaptionShow, set: D3Api.ExpanderCtrl.setCaptionShow};
D3Api.TextAreaCtrl = new function()
{
    this.init = function(_dom)
    {
        var ta = D3Api.getChildTag(_dom,'textarea',0);
        D3Api.addEvent(ta, 'change', function(event){
            D3Api.setControlPropertyByDom(_dom,'value',D3Api.TextAreaCtrl.getValue(_dom),undefined,true);
            D3Api.stopEvent(event);
        }, true);
        this.init_focus(ta);
        _dom.D3Store.trim = D3Api.getProperty(_dom,'trim',false) == 'true';
        D3Api.BaseCtrl.initEvent(_dom,'onchange');
        _dom.D3Base.addEvent('onchange_property',function(property,value){
            if(property == 'value')
            {
                //D3Api.execDomEvent(_dom,'onchange');
                _dom.D3Base.callEvent('onchange');
            }
        });
    }
    this.setValue = function TextArea_SetValue(_dom,_value)
    {
        _dom = D3Api.getChildTag(_dom,'textarea',0);
        _dom.value = (_value == null)?'':_value;
    }

    this.getValue = function TextArea_GetValue(_dom)
    {
        var ta = D3Api.getChildTag(_dom,'textarea',0);
        var res = ta.value;
        if(_dom.D3Store.trim)
        {
            res = D3Api.stringTrim(res);
        }

        return res;
    }
    this.setEnabled = function TextArea_SetEnabled(_dom, _value )
    {
        var ta = D3Api.getChildTag(_dom,'textarea',0);
        //делаем активным
        if (_value)
        {
            ta.removeAttribute('disabled');
        }//делаем неактивным
        else
        {
            ta.setAttribute('disabled','disabled');
        }
        D3Api.BaseCtrl.setEnabled(_dom,_value);
    }
    this.getInput = function TextArea_getInput(_dom)
    {
        return D3Api.getChildTag(_dom,'textarea',0);
    }
}

D3Api.controlsApi['TextArea'] = new D3Api.ControlBaseProperties(D3Api.TextAreaCtrl);
D3Api.controlsApi['TextArea']['value']={get:D3Api.TextAreaCtrl.getValue,set:D3Api.TextAreaCtrl.setValue};
D3Api.controlsApi['TextArea']['enabled'].set = D3Api.TextAreaCtrl.setEnabled;
D3Api.controlsApi['TextArea']['input']={get: D3Api.TextAreaCtrl.getInput, type: 'dom'};
/**
 *
 * @component
 */
D3Api.PopupMenuCtrl = new function()
{
    /**
     *
     * @param dom
     */
    this.init = function(dom)
    {
        if(!D3Api.BROWSER.msie)
            dom.style.zIndex = 10;
        var jm = D3Api.getProperty(dom,'join_menu',false) || (D3Api.getProperty(dom,'join_menu_var',false) ? dom.D3Form.getVar(D3Api.getProperty(dom,'join_menu_var','')) : false);
        if(jm)
        {
            var jmc = dom.D3Form.getControl(jm);
            if(!jmc)
                return;
            var joinGroupName = D3Api.getProperty(dom,'join_group',false) || 'additionalMainMenu';
            var groupAmm = D3Api.getDomByAttr(jmc, 'name', joinGroupName);
            if(!groupAmm)
                return;
            D3Api.BaseCtrl.initEvent(dom,'onpopup','coords,show',undefined,jmc);
            var items = D3Api.PopupMenuCtrl.getItems(dom,true);
            for(var i = 0, c = items.length; i < c; i++)
                D3Api.PopupMenuCtrl.addItemDom(groupAmm, items[i]);
            return;
        }
        D3Api.PopupMenuCtrl.setWaitAction(dom,D3Api.getProperty(dom,'onpopup_action',false));
        dom.D3Store.popupObjects = [];

        var po = D3Api.getProperty(dom,'popupobject',false);
        if (po)
        {
            var pod = dom.D3Form.getControl(po);
            if (pod)
            {
                D3Api.PopupMenuCtrl.setPopupObject(dom,pod);
            }    
        }
        
        D3Api.BaseCtrl.initEvent(dom,'onpopup','coords,show');
        this.init_focus(dom);
        var ctrls = D3Api.getAllDomBy(dom.D3Form.currentContext || dom.D3Form.DOM,'[popupmenu="'+D3Api.getProperty(dom,'name','')+'"]');
        
        for(var i = 0, c = ctrls.length; i < c; i++)
        {
            D3Api.PopupMenuCtrl.setPopupObject(dom,ctrls[i]);
        }
        
        D3Api.addDom(dom.D3Form.DOM, dom);

        for(var collectionGroup = D3Api.getAllDomBy(dom, '[cont="groupitem"][separator]'), i = 0; i < collectionGroup.length; i++) {
            var placeSep = D3Api.getProperty(collectionGroup[i], 'separator'),
                     sep = D3Api.createDom('<div class="item separator" item_split="true" cmptype="PopupItem"></div>');
            dom.D3Form.parse(sep);
            if(!collectionGroup[i].children.length) D3Api.addClass(sep, 'ctrl_hidden');
            collectionGroup[i].D3Store.separator = (placeSep === 'before') && D3Api.insertBeforeDom(collectionGroup[i], sep) || 
                                                   (placeSep === 'after')  && D3Api.insertAfterDom(collectionGroup[i], sep)  ||
                                                   null;
        }
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getPopupObject = function PopupMenuCtrl_GetPopupObject(dom)
    {
        return dom.D3Store.popupObject;
    }

    /**
     *
     * @param dom
     * @param objDom
     */
    this.setPopupObject = function PopupMenuCtrl_SetPopupObject(dom,objDom)
    {
        if (dom.D3Store.popupObjects.indexOf(objDom) >= 0)
        {
            return;
        }
        function popup(e)
        {
            var evt = D3Api.getEvent(e);
            var coords = getClientEventCoords(evt); 
 
            if((evt.button && evt.button == 2) || (evt.which && evt.which == 3))
            {
                    dom.D3Store.popupObject = objDom || dom.D3Store.popupObject;
                    D3Api.PopupMenuCtrl.show(dom,coords);
                    D3Api.stopEvent(evt);
            }
        }
        
        if (objDom)
        {
            dom.D3Store.popupObjects.push(objDom);
            D3Api.addEvent(objDom,'mousedown',popup);
        }
    }

    /**
     *
     * @param dom
     * @param coords
     */
    this.show = function PopupMenuCtrl_Show(dom,coords)
    {
        if(dom.D3Store.waitAction)
        {
            D3Api.addClass(dom, 'waitAction');
            dom.D3Form.getAction(dom.D3Store.waitAction).execute();
        }else
        {
            D3Api.removeClass(dom, 'waitAction');
            var reqAmount = 0;
            var reqUids = {};
            if(dom.D3Store.uidBReq)
            {
                D3Api.Base.removeEvent('onRequestServerBegin',dom.D3Store.uidBReq);
            }
            if(dom.D3Store.uidEReq)
            {
                D3Api.Base.removeEvent('onRequestServerEnd',dom.D3Store.uidEReq);
            }
            dom.D3Store.uidBReq = D3Api.Base.addEvent('onRequestServerBegin', function(reqObj,reqUid){
                if(reqAmount == 0)
                    D3Api.addClass(dom, 'waitAction');
                reqAmount++;
                reqUids[reqUid] = true;
            });
            dom.D3Store.uidEReq = D3Api.Base.addEvent('onRequestServerEnd', function(reqObj,reqUid){
                if(reqUids[reqUid])
                    reqAmount--;
                if(reqAmount > 0)
                    return;
                
                if(dom.D3Store.uidBReq)
                {
                    D3Api.Base.removeEvent('onRequestServerBegin',dom.D3Store.uidBReq);
                    dom.D3Store.uidBReq = null;
                }
                if(dom.D3Store.uidEReq)
                {
                    D3Api.Base.removeEvent('onRequestServerEnd',dom.D3Store.uidEReq);
                    dom.D3Store.uidEReq = null;
                }
                
                if(dom.D3Store.hideFunc == null)
                    return;
                
                var res = dom.D3Base.callEvent('onpopup',coords,true);
                if(res === false)
                {
                    dom.D3Store.hideFunc();
                    return;
                }
                D3Api.removeClass(dom, 'waitAction');
                calcPos();
            });
            var res = dom.D3Base.callEvent('onpopup',coords);
            if(res === false)
                return;
            
            if(reqAmount == 0)
            {
                if(dom.D3Store.uidBReq)
                {
                    D3Api.Base.removeEvent('onRequestServerBegin',dom.D3Store.uidBReq);
                    dom.D3Store.uidBReq = null;
                }
                if(dom.D3Store.uidEReq)
                {
                    D3Api.Base.removeEvent('onRequestServerEnd',dom.D3Store.uidEReq);
                    dom.D3Store.uidEReq = null;
                }
            }
        }
        D3Api.removeClass(dom, 'notactive');
        var iact = D3Api.getAllDomBy(dom, '.item.active');
        for(var i = 0, c = iact.length; i < c; i++)
            D3Api.removeClass(iact[i], 'active');
        
        var calcPos = function(){
            var sX = D3Api.getBodyScrollLeft();
            var sY = D3Api.getBodyScrollTop();
            D3Api.showDomBlock(dom);
            var el_size = D3Api.getAbsoluteClientRect(dom);
            el_size.x = coords.left-5;
            el_size.y = coords.top-5;

            var page = D3Api.getPageWindowSize();

            var h = page.windowHeight+sY;
            var mcY = el_size.y+el_size.height;

            if (mcY-h > 0)
                el_size.y -=mcY-h+7;

            var w = page.windowWidth+sX;
            var mcX = el_size.x+el_size.width;

            if (mcX-w > 0)
                el_size.x -=mcX-w+7;

            dom.style.left = el_size.x+'px';
            dom.style.top  = el_size.y+'px';
        }
        calcPos();
        dom.D3Store.hideFunc = function(event)
        {
            if(event)
            {
                var t = D3Api.getEventTarget(event);
                t = D3Api.getControlByDom(t, 'PopupMenu');
                if(t == dom)
                    return;
            }
            D3Api.setDomDisplayDefault(dom);
            dom.D3Store.selected_item = null;
            dom.D3Store.parent_item = new Array();
            //setTimeout(function(){D3Api.hideDom(dom)},100);
            D3Api.removeEvent(document,"mousedown",dom.D3Store.hideFunc,true);
            dom.D3Store.hideFunc = null;
            D3Api.stopEvent(event);
        }
        
        D3Api.addEvent(document,"mousedown",dom.D3Store.hideFunc,true);
        //setTimeout(function(){D3Api.setDomDisplayDefault(dom)},1000);
    }
    function getClientEventCoords(evt)
    {
            var coords = {left:0, top:0};

            coords.left = evt.clientX;
            coords.top = evt.clientY;

            return coords;
    }

    /**
     *
     * @param event
     * @param anyDom
     * @param menuName
     */
    this.showPopupMenu = function(event,anyDom,menuName)
    {
        var ctrl = D3Api.getControlByDom(anyDom);
        var menu = ctrl.D3Form.getControl(menuName);
        if (menu)
        {
            menu.D3Store.popupObject = ctrl || menu.D3Store.popupObject;
            var evt = D3Api.getEvent(event);
            var coords = getClientEventCoords(evt); 
            D3Api.PopupMenuCtrl.show(menu,coords);      
        }
    }

    /**
     *
     * @param dom
     * @param itemDom
     * @param itemCont
     */
    this.addItemDom = function(dom,itemDom,itemCont)
    {
        if(itemCont)
        {
            itemCont = D3Api.getDomByAttr(itemCont, 'cont', 'menu');
        }else
            itemCont = dom;
        D3Api.addDom(itemCont, itemDom);
    }

    /**
     *
     * @param dom
     * @param rootOnly
     * @param onlySeparators
     * @returns {*}
     */
    this.getItems = function(dom,rootOnly,onlySeparators)
    {
        return D3Api.getAllDomBy(dom, '[cmptype="PopupItem"'+(rootOnly?'][rootitem="true"':'')+(onlySeparators===true?'][item_split="true"':'')+']');
    }

    /**
     *
     * @param dom
     * @returns {*|boolean}
     */
    this.getEnabled = function(dom)
    {
        return D3Api.hasClass(dom, 'ctrl_disable');
    }

    /**
     *
     * @param dom
     * @param value
     * @returns {boolean}
     */
    this.setEnabled = function(dom,value)
    {
        var items = D3Api.PopupMenuCtrl.getItems(dom,true);
        
        for(var i = 0, c = items.length; i < c; i++)
        {
            D3Api.setControlPropertyByDom(items[i], 'enabled', value, true);
        }
        if(D3Api.getBoolean(value))
            D3Api.removeClass(dom,'ctrl_disable');
        else
            D3Api.addClass(dom,'ctrl_disable');
        return true;
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getWaitAction = function(dom)
    {
        return dom.D3Store.waitAction;
    }

    /**
     *
     * @param dom
     * @param value
     * @returns {boolean}
     */
    this.setWaitAction = function(dom,value)
    {
        if(dom.D3Store.waitAction)
            dom.D3Form.getAction(dom.D3Store.waitAction).removeEvent('onafter_execute',dom.D3Store.waitActionAUid);
        if(D3Api.empty(value))
        {
            dom.D3Store.waitAction = value;
            return true;
        }
        var act = dom.D3Form.getAction(value);
        if(!act)
            return false;
        
        dom.D3Store.waitAction = value;
        //Значит в загрузке
        dom.D3Store.waitActionAUid = act.addEvent('onafter_execute',function(){
            if(!dom.D3Store.hideFunc)
                return;
            
            var res = dom.D3Base.callEvent('onpopup');
            if(res === false)
            {
                dom.D3Store.hideFunc();
                return;
            }
            
            D3Api.removeClass(dom, 'waitAction');
        });
    }

    /**
     *
     * @param dom
     * @param item
     * @param name
     * @returns {*}
     */
    this.addGroupItem = function(dom, item, name) {
        name = (typeof name === 'string') ? 'name="' + name + '"' : '';
        var groupitem = D3Api.createDom('<div ' + name + ' class="popupGroupItem" cont="groupitem" cmptype="PopupGroupItem"></div>');
        dom.D3Form.parse(groupitem);
        item = typeof item === 'string' && D3Api.getDomByAttr(dom, 'name', item) || typeof item === 'object' && item || null;
        if(item) 
            return D3Api.insertAfterDom(item, groupitem);
        return D3Api.addDom(dom, groupitem);
    };

    /**
     *
     * @param dom
     * @param attrs
     * @param rootItem
     * @param rootGroup
     * @param boolBefore
     * @param posItem
     * @returns {null|*}
     */
    this.addItem = function(dom,attrs,rootItem,rootGroup,boolBefore,posItem)
    {
        posItem = typeof posItem === 'string' && D3Api.getDomByAttr(dom, 'name', posItem) || typeof posItem === 'object' && posItem || null;
        if(!rootItem)
            rootItem = posItem && posItem.D3Store.parentItem?posItem.D3Store.parentItem:dom;
        else if(typeof(rootItem) == 'string')
            rootItem = D3Api.getDomByAttr(dom, 'name', rootItem);
        else
            rootItem = rootItem;
        rootGroup = typeof rootGroup === 'string' && D3Api.getDomByAttr(rootItem, 'name', rootGroup) || null;
                
        var rootItemCont = rootItem;
        if (D3Api.getProperty(rootItem, 'cmptype') == 'PopupItem')
        {
            D3Api.addClass(rootItem, 'haveItems');
            var submenu = D3Api.getDomByAttr(rootItem, 'cont', 'menu');
            if(!submenu)
            {
                var rootItemNew = (rootItem.outerHTML)?D3Api.createDom(rootItem.outerHTML):rootItem.cloneNode(true);
                D3Api.insertBeforeDom(rootItem, rootItemNew);
                D3Api.removeDom(rootItem);
                rootItem = null;
                rootItem = rootItemNew;
                var itemCont = D3Api.getDomByAttr(rootItem, 'cont', 'item');
                D3Api.setProperty(itemCont, 'onmouseover', ((attrs['onmouseover']) ? attrs['onmouseover']+';' : '') + 'D3Api.PopupItemCtrl.hoverItem(this);');
                D3Api.setProperty(itemCont, 'onclick', 'D3Api.PopupItemCtrl.hoverItem(this,true);');
                dom.D3Form.parse(rootItem);
            
                submenu = D3Api.createDom('<div class="popupMenu subItems" cont="menu"></div>');
                D3Api.addDom(rootGroup || rootItem,submenu);
            }
            rootItemCont = submenu;          
        }
        var attrStr = 'cmptype="PopupItem" '+(rootItemCont == dom?'rootitem="true" ':'');
        var events = '';
        var itemText = '';
        var item;
        if(attrs['caption'] && attrs['caption'] == '-')
        {
            itemText = '<div class="item separator" '+attrStr+(attrs['name'] && attrs['name']!=''?' name="'+attrs['name']+'"':'')+' item_split="true" ></div>';
        }else
        {
            if(attrs['onclick'])
            {
                events += ' onclick="'+attrs['onclick']+'; D3Api.PopupItemCtrl.clickItem(this);"';
                attrs['onclick'] = undefined;
                delete attrStr['onclick'];
            }
            if(attrs['onmouseover'])
            {
                events += ' onmouseover="'+attrs['onmouseover']+'; D3Api.PopupItemCtrl.hoverItem(this);"';
                attrs['onmouseover'] = undefined;
                delete attrs['onmouseover'];
            }
            else {
                events += ' onmouseover="D3Api.PopupItemCtrl.hoverItem(this);"';
            }
            for(var a in attrs)
            {
                if(attrs.hasOwnProperty(a)){
                    attrStr += ' '+a+'="'+attrs[a]+'"';
                }
            }
            itemText = '<div class="item" '+attrStr+' ><table style="width:100%" cmpparse="PopupItem" '+events+' cont="item"><tr><td class="itemCaption"><img src="'+(attrs['icon'] || '')+'" cont="itemIcon" class="itemIcon"/><span cont="itemCaption">'+attrs['caption']+'</span></td><td class="caret">&nbsp;&nbsp;</td></tr></table></div>';
        }
        item = D3Api.createDom(itemText);
        if(!item)
            return null;
        dom.D3Form.parse(item);
        var rootEl = rootGroup || rootItemCont;
        if(posItem)
        {
            if(boolBefore) 
                D3Api.insertBeforeDom(posItem, item);
            else
                D3Api.insertAfterDom(posItem, item);
        }else
        {
            if(boolBefore && rootEl.firstChild) 
                D3Api.insertBeforeDom(rootEl.firstChild, item);
            else 
                D3Api.addDom(rootEl, item);
            if(rootGroup && rootGroup.D3Store && rootGroup.D3Store.separator) {
                D3Api.removeClass(rootGroup.D3Store.separator, 'ctrl_hidden');
            }
        }
        item.D3Store.parentItem = rootItem;
        dom.D3Base.callEvent('onitem_add',item,rootEl);
        return item;
    }

    /**
     *
     * @param dom
     * @param itemDom
     */
    this.deleteItem = function(dom,itemDom)
    {
        var rootEl = itemDom.parentNode;
        if(dom.D3Base.callEvent('onitem_delete',itemDom,rootEl) !== false)
            D3Api.removeDom(itemDom);     
    }

    /**
     *
     * @param dom
     */
    this.defaultAction = function(dom)
    {
        var item = D3Api.getDomBy(dom,'[cmptype="PopupItem"][default="true"]>table[cont="item"]');

        if (item) {
            item.dispatchEvent(new CustomEvent('click'));
        }
    }

    /**
     *
     * @param dom
     * @param e
     */
    this.CtrlKeyDown = function(dom, e)
    {
        switch (e.keyCode) {
            case 40: //стрелка вниз
                D3Api.PopupMenuCtrl.setNextItem(dom, 1);
                D3Api.stopEvent(e)
                break;
            case 38: //стрелка вверх
                D3Api.PopupMenuCtrl.setNextItem(dom, -1);
                D3Api.stopEvent(e)
                break;
            case 39: //стрелка вправо
                var submenu = D3Api.getDomByAttr(D3Api.PopupMenuCtrl.getSelectedItem(dom), 'cont', 'menu');
                if(submenu)
                {
                    if(!dom.D3Store.parent_item)
                        dom.D3Store.parent_item = new Array();
                    dom.D3Store.parent_item.push(D3Api.PopupMenuCtrl.getSelectedItem(dom));
                    dom.D3Store.selected_item = null;
                    D3Api.PopupMenuCtrl.setNextItem(dom, 1);
                }
                D3Api.stopEvent(e)
                break;
            case 37: //стрелка влево
                if(!dom.D3Store.parent_item)
                    break;
                var parent_item = dom.D3Store.parent_item[dom.D3Store.parent_item.length - 1];

                if(!parent_item)
                    break;
                D3Api.PopupItemCtrl.hoverItem(parent_item);
                dom.D3Store.parent_item.pop();
                var items = D3Api.PopupMenuCtrl.getItemsOfActiveMenu(dom);
                for(var i = 0; i < items.length; i++) {
                    if (items[i] == parent_item) {
                        dom.D3Store.selected_item = i+1;
                        D3Api.PopupMenuCtrl.setNextItem(dom, -1);
                        break;
                    }
                }
                D3Api.stopEvent(e)
                break;
            case 13://Enter
                var selected_item=D3Api.PopupMenuCtrl.getSelectedItem(dom);
                var cont_item = D3Api.getDomByAttr(selected_item, 'cont', 'item');
                cont_item.click();
                D3Api.stopEvent(e)
                break;
            case 27: //Esc
                dom.D3Store.hideFunc();
                if(dom.D3Form.lastFocusControl)
                    dom.D3Form.lastFocusControl.focus();
                D3Api.stopEvent(e)
                break;
        }
    }
    ///delta = 1 движение вниз по меню
    ///delta = -1 движение вверх по меню

    /**
     *
     * @param dom
     * @param delta
     * @returns {*}
     */
    this.setNextItem = function(dom, delta)
    {
        var n = dom.D3Store.selected_item;

        if(n === undefined || n === null)
            n = 0;
        else
        {
            n += delta;
        }

        n = this.setSelectedItemIndex(dom, n);
        if(n && D3Api.hasClass(D3Api.PopupMenuCtrl.getSelectedItem(dom), 'separator'))
        {
            n += delta;
            n = this.setSelectedItemIndex(dom, n);
        }

        return n;
    };

    /**
     *
     * @param dom
     * @param index
     * @returns {*}
     */
    this.setSelectedItemIndex = function(dom, index)
    {
        var active_menu_items = D3Api.PopupMenuCtrl.getItemsOfActiveMenu(dom);
        if(active_menu_items && index != -1 && index !== false &&
            index < active_menu_items.length &&
            active_menu_items[index])
        {
            dom.D3Store.selected_item = index;
            D3Api.PopupItemCtrl.hoverItem(active_menu_items[index]);
        }

        return dom.D3Store.selected_item;
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getSelectedItem = function(dom)
    {
        return D3Api.PopupMenuCtrl.getItemsOfActiveMenu(dom)[dom.D3Store.selected_item];
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getItemsOfActiveMenu = function(dom)
    {
        if(!dom.D3Store.parent_item || dom.D3Store.parent_item.length == 0)
        {
            return  D3Api.PopupMenuCtrl.getItems(dom, true);
        }
        else
        {
            var submenu = D3Api.getDomByAttr(dom.D3Store.parent_item[dom.D3Store.parent_item.length - 1], 'cont', 'menu');
            if(!submenu)
                return;

            return D3Api.PopupMenuCtrl.getItems(submenu);
        }
    }
}
D3Api.controlsApi['PopupMenu'] = new D3Api.ControlBaseProperties(D3Api.PopupMenuCtrl);
D3Api.controlsApi['PopupMenu']['popupobject']={get:D3Api.PopupMenuCtrl.getPopupObject,set: D3Api.PopupMenuCtrl.setPopupObject};
D3Api.controlsApi['PopupMenu']['enabled']={get:D3Api.PopupMenuCtrl.getEnabled,set: D3Api.PopupMenuCtrl.setEnabled};
D3Api.controlsApi['PopupMenu']['onpopup_action']={get:D3Api.PopupMenuCtrl.getWaitAction,set: D3Api.PopupMenuCtrl.setWaitAction};
D3Api.controlsApi['PopupMenu']['item']={set: D3Api.PopupMenuCtrl.setSelectedItemIndex};


/**
 *
 * @component
 */
D3Api.PopupItemCtrl = new function()
{

    /**
     *
     * @param dom
     */
    this.clickItem = function(dom)
    {
        var m = D3Api.getControlByDom(dom, 'PopupMenu');
        
        m.D3Store.hideFunc && m.D3Store.hideFunc();
    }
    
    /**
     *
     * @param dom
     * @param click
     */
    this.hoverItem = function(dom,click)
    {
        var event = D3Api.getEvent();
        if(D3Api.BROWSER.msie && !click) {
            var toElement = event.relatedTarget || event.fromElement;
            while(toElement && toElement !== dom) {
                toElement = toElement.parentNode;
            }
            if(toElement === dom) return;
        }
        var item = D3Api.getControlByDom(dom, 'PopupItem');
        var toogle = D3Api.hasClass(item, 'active');
        if(D3Api.getEventTarget() != D3Api.getEventCurrentTarget() && toogle && event.type != 'click' && event.type != 'keydown')
            return;     
        var menu = D3Api.getDomByDomAttr(dom, 'cont', 'menu');
        if(!menu)
            return;
        D3Api.removeClass(menu, 'notactive');
        var iact = D3Api.getAllDomBy(menu, '.item.active');
        for(var i = 0, c = iact.length; i < c; i++)
            D3Api.removeClass(iact[i], 'active');
        
        if(toogle)
            return;
        
        D3Api.addClass(item, 'active');
        
        var submenu = D3Api.getDomByAttr(item, 'cont', 'menu');
        if(!submenu)
            return;
        D3Api.addClass(menu, 'notactive');
        D3Api.removeClass(submenu, 'notactive');
        
        var rect = D3Api.getAbsoluteClientRect(item);
        
        
        var sX = D3Api.getBodyScrollLeft();
        var sY = D3Api.getBodyScrollTop();
        var el_size = D3Api.getAbsoluteClientRect(submenu);

        var page = D3Api.getPageWindowSize();

        var h = page.windowHeight+sY;
        var mcY = rect.y+el_size.height;

        var dY = 0;
        if (mcY-h > 0)
            dY = -(mcY-h);

        var w = page.windowWidth+sX;
        var mcX = rect.x+rect.width+el_size.width;

        var dX = rect.width-5;
        if (mcX-w > 0)
            dX = -(el_size.width-5);

        submenu.style.left = dX+'px';
        submenu.style.top  = dY+'px';
        submenu.style.zIndex = 10;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setVisible = function PopupItem_setVisible(_dom, _value)
    {
        D3Api.BaseCtrl.setVisible(_dom,_value);
        var items = _dom.parentNode.childNodes, item = false, splitItem = null, isSplit = false;

        for(var i = 0, c = items.length; i < c; i++)
        {
            if(D3Api.hasProperty(items[i],'item_split'))
            {
                if(!item)
                {
                    if(splitItem)
                    {    
                        if(splitItem != _dom) D3Api.BaseCtrl.setVisible(splitItem, true);
                    }
                    D3Api.BaseCtrl.setVisible(items[i],false);
                }else
                {
                    splitItem = items[i];
                    item = false;
                }
            }else if(['PopupItem','PopupGroupItem'].indexOf(D3Api.getProperty(items[i],'cmptype')) != -1 && D3Api.BaseCtrl.getVisible(items[i]))
            {
                item = true;
                if(splitItem)
                {    
                    if(splitItem != _dom) D3Api.BaseCtrl.setVisible(splitItem, true);
                    splitItem = null;
                }
            }                     
        }    
        if(splitItem)
            D3Api.BaseCtrl.setVisible(splitItem,false);
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getCaption = function PopupItemCtrl_getCaption(dom)
    {
        var cont = D3Api.getDomByAttr(dom, 'cont', 'itemCaption');
        return D3Api.getTextContent(cont);
    }

    /**
     *
     * @param dom
     * @param value
     */
    this.setCaption = function PopupItemCtrl_setCaption(dom,value)
    {
        var cont = D3Api.getDomByAttr(dom, 'cont', 'itemCaption');
        D3Api.addTextNode(cont, D3Api.empty(value) ? '' : value, true);
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getIcon = function PopupItemCtrl_getIcon(dom)
    {
        var cont = D3Api.getDomByAttr(dom, 'cont', 'itemIcon');
        return cont.src;
    }

    /**
     *
     * @param dom
     * @param value
     */
    this.setIcon = function PopupItemCtrl_setIcon(dom,value)
    {
        var cont = D3Api.getDomByAttr(dom, 'cont', 'itemIcon');
        cont.src = D3Api.empty(value) ? '' : value;
    }
}
D3Api.controlsApi['PopupItem'] = new D3Api.ControlBaseProperties(D3Api.PopupItemCtrl);
D3Api.controlsApi['PopupItem']['visible'].set = D3Api.PopupItemCtrl.setVisible;
D3Api.controlsApi['PopupItem']['caption'] = {get: D3Api.PopupItemCtrl.getCaption, set: D3Api.PopupItemCtrl.setCaption};
D3Api.controlsApi['PopupItem']['icon'] = {get: D3Api.PopupItemCtrl.getIcon, set: D3Api.PopupItemCtrl.setIcon};

/**
 *
 * @component
 */
D3Api.PopupGroupItemCtrl = new function()
{
    
}

D3Api.controlsApi['PopupGroupItem'] = new D3Api.ControlBaseProperties(D3Api.PopupGroupItemCtrl);
if(typeof(SYS_ControlActions) == 'undefined'){ SYS_ControlActions={};}
if(typeof(SYS_ControlActions['ColorEdit']) == 'undefined'){ SYS_ControlActions['ColorEdit']=new Array();}
SYS_ControlActions['ColorEdit']['value']={set:ColorEdit_SetValue,get:ColorEdit_GetValue};

function ColorEdit_Init(_DOM)
{
	_DOM.CSObject = new color_select(_DOM.getElementsByTagName('input')[0].value);
	_DOM.CSObject.hide_update_function = function(_NewColor) { ColorEdit_SetValue(this, _NewColor) }.bind(_DOM);
	_DOM.CSObject.attach_to_element(_DOM.getElementsByTagName('span')[0]);
}

function ColorEdit_GetValue(_DOM)
{
	return _DOM.getElementsByTagName('input')[0].value;
}

function ColorEdit_SetValue(_DOM, _Value)
{
	if (_Value == '-1')
	{
		_DOM.getElementsByTagName('span')[0].style.display = '';
	}
	else
	{
		_DOM.getElementsByTagName('span')[0].style.display = 'none';
		_DOM.getElementsByTagName('input')[0].value = _Value;
		_DOM.getElementsByTagName('select')[0].style.background = _Value;
	}
}

///////////////////////////////////////

var SYS_mouse_x;
var SYS_mouse_y;
var SYS_ColorSelects = new Array(0);
var SYS_scrolling = true;

function set_scrolling(){
  //alert('(set_scrolling)');
  SYS_scrolling = true;

  //window.status = '(scrolling!)'; 
  //scrolling = true;
}

function color_select(init_color) {

  // current control position
  this.sv_image="";
  this.x=0;
  this.y=0;
  this.hexcolor=""
  
  // map methods
  
  // Time to get funky with the DOM.  Unh.

  // Create a DOM element to hold the color select
  this.color_select_box = document.createElement('div');     // the box around the entire color select
  this.color_select_box.className = "color_select_box";
  this.color_select_box.style.display = "none";
  
  //document.body.appendChild(this.color_select_box);
  document.getElementsByTagName("body").item(0).appendChild(this.color_select_box);
  
  // horizontal & vertical s-v cursors
  this.sv_crosshair_horiz_cursor = document.createElement('div');
  this.sv_crosshair_horiz_cursor.className = "sv_crosshair_horiz_cursor";
  this.sv_crosshair_horiz_cursor.style.visibility = "hidden";
  this.color_select_box.appendChild(this.sv_crosshair_horiz_cursor);
  
  this.sv_crosshair_vert_cursor = document.createElement('div');
  this.sv_crosshair_vert_cursor.className = "sv_crosshair_vert_cursor";
  this.sv_crosshair_vert_cursor.style.visibility = "hidden";
  this.color_select_box.appendChild(this.sv_crosshair_vert_cursor);

  // center s-v cursor
  this.sv_crosshair_center_cursor = document.createElement('div');
  this.sv_crosshair_center_cursor.className = "sv_crosshair_center_cursor";
  this.sv_crosshair_center_cursor.style.visibility = "hidden";
  this.color_select_box.appendChild(this.sv_crosshair_center_cursor);
  
  this.sv_select_box_bg = document.createElement('div');
  this.sv_select_box_bg.className = "sv_select_box_bg";
  this.color_select_box.appendChild(this.sv_select_box_bg);
  this.sv_select_box_bg.style.height="256px";
  this.sv_select_box_bg.style.width="256px";
  
  this.sv_select_box = document.createElement('div');
  this.sv_select_box.className = "sv_select_box";
  this.sv_select_box_bg.appendChild(this.sv_select_box);
  this.sv_select_box.style.height="256px";
  this.sv_select_box.style.width="256px";
  D3Api.addEvent(this.sv_select_box, "mousedown", function() { this.sv_select_box_mousedown(); }.bind(this));
  D3Api.addEvent(this.sv_select_box, "mouseup", function() { this.sv_select_box_mouseup(); }.bind(this));
  
  this.h_select_box = document.createElement('div');
  this.h_select_box.className = "h_select_box";
  D3Api.addEvent(this.h_select_box, "mousedown", function(){ this.h_select_box_mousedown(); }.bind(this));
  D3Api.addEvent(this.h_select_box, "mouseup", function(){ this.h_select_box_mouseup(); }.bind(this));
  this.color_select_box.appendChild(this.h_select_box);
  
  this.color_box = document.createElement('div');
  this.color_box.className = "color_box";
  this.color_select_box.appendChild(this.color_box);
  
  this.color_value_box = document.createElement('div');
  this.color_value_box.className = "color_value_box";
  this.color_box.appendChild(this.color_value_box);
  
  // ok button
  this.ok_button = document.createElement('div');
  this.ok_button.className = "ok_button";
  this.color_select_box.appendChild(this.ok_button);
  this.ok_button.innerHTML = "ok";
  
  D3Api.addEvent(this.ok_button,"mouseup", function() { this.hide(); }.bind(this));
  
  // hue cursor
  this.hue_cursor = document.createElement('div');
  this.hue_cursor.className = "hue_cursor";
  this.h_select_box.appendChild(this.hue_cursor);
  
  // used for mapping between mouse positions and color parameters
  this.hue_offset=0;
  this.sat_offset=0;
  this.val_offset=0;
  this.color_select_bounding_box = new Array(4);    // upper-left corner x, upper-left corner y, width, height

  // state information for the controls
  this.initialized=false;
  this.active=false;
  //alert('this should appear only twice! ' + this.id);
  this.h_select_box_focus=false;
  this.sv_select_box_focus=false;

    
  // function to call each time the color is updated
  this.change_update_function = null;
  this.hide_update_function = null;
 
  this.attach_to_element = function(e)
  {
    this.x = docjslib_getRealLeft(e);
    this.y = docjslib_getRealTop(e) + 22;  // clumsy hack.  Won't work for elements higher than 22 px 
  }


  this.h_select_box_mousedown = function()
  {
    this.h_select_box_focus = true;
    this.hue_cursor_to_color();
    this.sv_update();
    color_select_update();
  }

  this.h_select_box_mouseup = function()
  {
    this.h_select_box_focus = false;
  }

  this.sv_select_box_mousedown = function()
  {
    this.sv_select_box_focus = true;
    this.sv_update();
    color_select_update();
  }

  this.sv_select_box_mouseup = function()
  {
    this.sv_select_box_focus = false;
  }

  // these functions are tied to events (usually).
  // they are the entry points for whatever color_select does

  this.show = function()
  {
    this.color_select_bounding_box = new Array;
    
    // in mozilla, insert the saturation-value background image
    if (!document.all && this.sv_image)
      this.sv_select_box.style.backgroundImage = "url('"+this.sv_image+"')";

    // make them visible first so we can substract the position of 
    // offsetParent 
    this.color_select_box.style.visibility = "visible";
    this.color_select_box.style.display = "block";   
    this.color_select_box.style.position = "absolute";
    this.color_select_box.style.left = this.x - docjslib_getRealLeft(this.color_select_box.offsetParent) + "px";
    this.color_select_box.style.top = this.y - docjslib_getRealTop(this.color_select_box.offsetParent) + "px";

    
    this.sat_offset = docjslib_getRealTop(this.sv_select_box);
    this.val_offset = docjslib_getRealLeft(this.sv_select_box);
    this.hue_offset = docjslib_getRealTop(this.h_select_box);
  
    this.color_select_bounding_box[0]=this.x;
    this.color_select_bounding_box[1]=this.y;
    this.color_select_bounding_box[2]=300;
    this.color_select_bounding_box[3]=300;
    
    this.sv_cursor_draw();
    
    // position hue cursor
    this.hue_cursor.style.left = docjslib_getRealLeft(this.h_select_box) - docjslib_getRealLeft(this.color_select_box)-1;
    this.hue_cursor_draw();
    
    this.initialized=true;
    this.active=true;
    if (!this.color_select_box.style) alert ("color select box style not found!");
    
    this.update_color_box();
  }
  
  this.hide = function()
  {
    if (this.color_select_box)
      this.color_select_box.style.display = "none";
      
    this.active=false;
    this.unfocus();
    
    if (typeof(this.hide_update_function) == 'function') this.hide_update_function(this.hexcolor);
  }

  this.toggle_color_select = function()
  {
    if (this.active)
      this.hide();
    else
      this.show();
  }

  this.hue_cursor_to_color = function() 
  {
    //alert(this.h_select_box_focus);
    // map from the mouse position to the new hue value
    
    if (!this.h_select_box_focus) return;
    
    var new_hue_cursor_pos = SYS_mouse_y - this.hue_offset;
    //alert(new_hue_cursor_pos);
    
    // keep the value sensible
    if (new_hue_cursor_pos > 255)
      new_hue_cursor_pos=255;
    if (new_hue_cursor_pos < 0)
      new_hue_cursor_pos=0;
  
    this.hue_cursor_pos = new_hue_cursor_pos;
    this.hue_value = 360 - new_hue_cursor_pos/255*360;
    
    this.hue_cursor_draw();
    this.cursor_to_color();
      
  }
    
  this.sv_update = function() 
  {
    // map from the mouse position to the new s-v values
    
    // might be possible to get rid of this
    if (!this.sv_select_box_focus) return;
    
    var new_sat_cursor_pos = SYS_mouse_y - this.sat_offset;
    var new_val_cursor_pos = SYS_mouse_x - this.val_offset;
    
    // keep the values sensible
    if (new_sat_cursor_pos > 255)
      new_sat_cursor_pos = 255;
    if (new_sat_cursor_pos < 0)
      new_sat_cursor_pos = 0;
      
    if (new_val_cursor_pos > 255)
      new_val_cursor_pos = 255;
    if (new_val_cursor_pos < 0)
      new_val_cursor_pos = 0;
    
    this.sat_cursor_pos = new_sat_cursor_pos;
    this.val_cursor_pos = new_val_cursor_pos;
    //window.status = this.hue_cursor_pos + ","+this.sat_cursor_pos + ","+this.val_cursor_pos +"("+this.sat_offset+ ","+this.val_offset+")";
    
    this.sv_cursor_draw();
    this.cursor_to_color();
    
    return;
  }

  this.hue_cursor_draw = function()
  {
    if (!this.hue_cursor.style) return;
    if (!this.sv_select_box_bg.style) return;
  
    this.hue_cursor.style.top = this.hue_cursor_pos+1 + "px";

    this.hue_cursor.style.visibility = "visible";
    //this.cursor_to_color();
    
    // update sv_select_box background
    var hsvcolor = new Array(this.hue_value,1,255);
    var rgbcolor = hsv2rgb(hsvcolor);
    var new_color = "rgb("+rgbcolor[0]+", "+rgbcolor[1]+", "+rgbcolor[2]+")";
    this.sv_select_box_bg.style.background = new_color;
    //window.status="hue cursor draw! " + this.hue_cursor.style.left;
  }
  
  
  
  this.sv_cursor_draw = function()
  {
    if (!this.sv_crosshair_horiz_cursor.style) return;
    if (!this.sv_crosshair_vert_cursor.style) return;
    
    // this is sort of a seat-of-the-pants algorithm for keeping the cursor
    // visible against the s-v background.  There are probably better methods.
    var cursor_color=this.val_cursor_pos;
    if (cursor_color==0) cursor_color=.001;
    cursor_color = Math.round(255/(cursor_color/30));
    if (cursor_color > 255) cursor_color = 255;
    if (cursor_color < 0) cursor_color = 0;
    
    this.sv_crosshair_vert_cursor.style.backgroundColor = "rgb("+cursor_color+","+cursor_color+","+cursor_color+")";
    this.sv_crosshair_horiz_cursor.style.borderColor = "rgb("+cursor_color+","+cursor_color+","+cursor_color+")";
    
    // place the s-v cursors.
    this.sv_crosshair_horiz_cursor.style.top = this.sat_cursor_pos+3 + "px";
    this.sv_crosshair_horiz_cursor.style.left = 2 + "px";
    this.sv_crosshair_horiz_cursor.style.visibility = "visible";
  
    this.sv_crosshair_vert_cursor.style.left = this.val_cursor_pos+3 + "px";
    this.sv_crosshair_vert_cursor.style.visibility = "visible";
    
    //this.cursor_to_color();
  }
    
  
  
  this.cursor_to_color = function()
  {
    //calculate real h, s & v
    this.hue_value = ((255-this.hue_cursor_pos)/255*360);
    this.sat_value = (255 - this.sat_cursor_pos)/255;
    //this.sat_value = this.sat_cursor_pos;
    this.val_value = this.val_cursor_pos;
    //alert ("cursor_to_color: "+ this.hue_value +" "+this.sat_value+" "+this.val_value);

    this.update_color_box();
  }
  
  
  this.unfocus = function() 
  {
    //this.h_select_box_focus=false;
    this.sv_select_box_focus=false;
  }


  this.setrgb = function(c)
  {
    //  hsv:  h = 0-360    s = 0 (gray) - 1.0 (pure color)   v = 0 (black) to 255 (white)
    if (!c.match(/#?([0-9]|[A-Fa-f]){1,6}/i))  // valid hex #color?
	{
      return false;
	}
      
    var rgb = hex2rgb(c.substring(1,7));
    //alert ("hex -> rgb: "+ rgb[0] +" "+rgb[1]+" "+rgb[2]);
    
    hsv = rgb2hsv(rgb);
    
    //alert ("rgb -> hsv: "+ hsv[0] +" "+hsv[1]+" "+hsv[2]);
    
    this.sethsv(hsv[0],hsv[1],hsv[2]);
    
    //rgb_again = hsv2rgb(hsv);
    //alert ("hex -> rgb: "+ rgb[0] +" "+rgb[1]+" "+rgb[2]+
    //       "\nrgb -> hsv: "+ hsv[0] +" "+hsv[1]+" "+hsv[2]+
    //       "\nrgb -> hsv -> rgb: "+ rgb_again[0] +" "+rgb_again[1]+" "+rgb_again[2]);
    return true;
  }
  
  
  this.sethsv = function(h, s, v)
  {
    var hsvcolor;
    
    this.hue_value = h;  
    this.sat_value = s;  
    this.val_value = v;  
   
    this.hue_cursor_pos = (360 - this.hue_value)/360*255;
    this.sat_cursor_pos = Math.round(255 - 255*this.sat_value);
    this.val_cursor_pos = this.val_value;
    
    this.update_color_box();    
  }
  
  
  this.update_color_box = function()
  {
    var hsvcolor = new Array(this.hue_value,this.sat_value,this.val_value);
    
    // make them into an rgb color
    var rgbcolor = hsv2rgb(hsvcolor);
    
    //rgbcolor[0] = Math.round(rgbcolor[0]/255*100);
    //rgbcolor[1] = Math.round(rgbcolor[1]/255*100);
    //rgbcolor[2] = Math.round(rgbcolor[2]/255*100);
    
    var new_color = "rgb("+rgbcolor[0]+","+rgbcolor[1]+","+rgbcolor[2]+")";
    //alert ("rgb: "+ rgbcolor[0] +" "+rgbcolor[1]+" "+rgbcolor[2]);
    
    
    // and in hex
    this.hexcolor = "#"+baseconverter(rgbcolor[0],10,16,2)+baseconverter(rgbcolor[1],10,16,2)+baseconverter(rgbcolor[2],10,16,2);
    
    if (typeof(this.change_update_function) == 'function') this.change_update_function(this.hexcolor);
    
    // display it!
    if (this.color_value_box)
      this.color_value_box.innerHTML = this.hexcolor;
    
    if (this.color_value_box.style)
      this.color_box.style.background = new_color;
  }
      
  // push the new color select object onto the
  // global array of color select objects.
  
  // for some reason, the array.push() method 
  // doesn't work with objects, only with primitives.
  
    // initial values
  if (init_color)
    this.setrgb(init_color)
  else
    this.setrgb("#ffffff");

  SYS_ColorSelects[SYS_ColorSelects.length] = this;
  
}

function color_select_mousedown(event) {
  var cs_active = false;

  for (var l1=0;l1<SYS_ColorSelects.length;l1++)
  {
    var ob = SYS_ColorSelects[l1];
    if (!ob.active) continue;
    cs_active = true;
  
    // if the mousedown is outside the color_select_box, close it.
    if  (SYS_mouse_x < ob.color_select_bounding_box[0] ||
        SYS_mouse_y < ob.color_select_bounding_box[1] ||
        SYS_mouse_x > (ob.color_select_bounding_box[0]+ob.color_select_bounding_box[2]) ||
        SYS_mouse_y > (ob.color_select_bounding_box[1]+ob.color_select_bounding_box[3]))
    {
      //alert('(color_select_mousedown) about to hide!');
      //alert('scrolling: ' + scrolling);
      
      SYS_scrolling = false;
      setTimeout("color_select_hide("+l1+")",200);
    }
  }
  
  
  if (cs_active && event)
  {
    if (event.cancelBubble)
      event.cancelBubble = true;
    else
    {
	    if (event.stopPropagation) event.stopPropagation();
      if (event.preventDefault) event.preventDefault();
    }
  }
  
}

function color_select_hide(num)
{
  if (!SYS_scrolling)
    SYS_ColorSelects[num].hide();
  else
    SYS_scrolling = false;
}


function color_select_hideall()
{
  //alert("hiding all color selects!");
  for (var l1=0;l1<SYS_ColorSelects.length;l1++)
    SYS_ColorSelects[l1].hide();
}


function color_select_mouseup() {
  //alert('(color_select_mouseup)');
  
  for (var l1=0;l1<SYS_ColorSelects.length;l1++)
  {
    ob=SYS_ColorSelects[l1];
    ob.unfocus();
    SYS_scrolling = false;
  }
}

function get_mouse_coords(e) { 
	if (window.getSelection) {  // Moz
    SYS_mouse_x=e.pageX;
    SYS_mouse_y=e.pageY;
	} else if (document.selection && document.selection.createRange) { // IE
    if (document.documentElement.scrollTop)   // Explorer 6 Strict
    {
      SYS_mouse_x = window.event.clientX + document.documentElement.scrollLeft - 4;
      SYS_mouse_y = window.event.clientY + document.documentElement.scrollTop - 4;
    }
    else if (document.body) // all other Explorers
    {
      SYS_mouse_x=window.event.clientX+document.body.scrollLeft-4;
      SYS_mouse_y=window.event.clientY+document.body.scrollTop-4;
    } 
    
    
	} else { // out of luck below v.4
		var str = "";
		  window.status="Sorry, event capture is not possible with your browser.";
		return;
	}
}

function color_select_update(event) {
  var cs_active = false;

  //window.status = SYS_ColorSelects.length+" color selects";
  for (var l1=0;l1<SYS_ColorSelects.length;l1++)
  {
    ob = SYS_ColorSelects[l1];
    if (ob.active) cs_active = true;
    ob.sv_update();
    ob.hue_cursor_to_color();
  }
  
  if (event && cs_active)
  {
    if (event.cancelBubble)
      event.cancelBubble = true;
    else
    {
	    if (event.stopPropagation) event.stopPropagation();
      if (event.preventDefault) event.preventDefault();
    }
  }
}

function baseconverter (number,ob,nb,desired_length) 
{
	// Created 1997 by Brian Risk.  http://members.aol.com/brianrisk
  number += "";  // convert to character, or toUpperCase will fail on some browsers
	number = number.toUpperCase();
	var list = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	var dec = 0;
	for (var i = 0; i <=  number.length; i++) 
		dec += (list.indexOf(number.charAt(i))) * (Math.pow(ob , (number.length - i - 1)));
	number = "";
	var magnitude = Math.floor((Math.log(dec))/(Math.log(nb)));
	for (var i = magnitude; i >= 0; i--) 
  {
    //--  stupid nedit, thinks the decrement above is a html commment.
		var amount = Math.floor(dec/Math.pow(nb,i));
		number = number + list.charAt(amount); 
		dec -= amount*(Math.pow(nb,i));
	}
  
  var length=number.length;
  if (length<desired_length)
    for (var i=0;i<desired_length-length;i++)
      number = "0"+number;
  
	return number;
}

function docjslib_getRealTop(imgElem) {
  yPos = imgElem.offsetTop;
  tempEl = imgElem.offsetParent;
  while (tempEl != null) {
    yPos += tempEl.offsetTop;
    tempEl = tempEl.offsetParent;
  }
  return yPos;
}

function docjslib_getRealLeft(imgElem) {
  xPos = imgElem.offsetLeft;
  tempEl = imgElem.offsetParent;
    while (tempEl != null) {
      xPos += tempEl.offsetLeft;
      tempEl = tempEl.offsetParent;
    }
  return xPos;
}

// RGB, each 0 to 255
//  hsv:  h = 0-360    s = 0 (gray) - 1.0 (pure color)   v = 0 (black) to 255 (white)
function rgb2hsv(rgb) {
  var r = rgb[0];
  var g = rgb[1];
  var b = rgb[2];

  var h;
  var s;
	var v = Math.max(Math.max(r, g), b);
	var min = Math.min(Math.min(r, g), b);
  var delta = v - min;

   // Calculate saturation: saturation is 0 if r, g and b are all 0
  if (v == 0)
    s = 0
  else 
    s = delta / v;
    
  if (s==0)
    h=0;  //achromatic.  no hue
  else
  {
    if (r==v)            // between yellow and magenta [degrees]
      h=60*(g-b)/delta;
    else if (g==v)       // between cyan and yellow
      h=120+60*(b-r)/delta;
    else if (b==v)       // between magenta and cyan
      h=240+60*(r-g)/delta;
  }  
  
  if (h<0)
    h+=360;
    
  return new Array(h,s,v);
}

// RGB, each 0 to 255
//  hsv:  h = 0-360    s = 0 (gray) - 1.0 (pure color)   v = 0 (black) to 255 (white)
function hsv2rgb(hsv) {
  var h = hsv[0];
  var s = hsv[1];
  var v = hsv[2];
  
  var r;
  var g;
  var b;
  
  if (s==0) // achromatic (grey)
    return new Array(v,v,v);
  
  var htemp;
  
  if (h==360)
    htemp=0;
  else
    htemp=h;
    
  htemp=htemp/60;
  var i = Math.floor(htemp);   // integer <= h
  var f = htemp - i;           // fractional part of h

  var p = v * (1-s);
  var q = v * (1-(s*f));
  var t = v * (1-(s*(1-f)));
 
  if (i==0) {r=v;g=t;b=p;}
  if (i==1) {r=q;g=v;b=p;}
  if (i==2) {r=p;g=v;b=t;}
  if (i==3) {r=p;g=q;b=v;}
  if (i==4) {r=t;g=p;b=v;}
  if (i==5) {r=v;g=p;b=q;}

  r=Math.round(r);
  g=Math.round(g);
  b=Math.round(b);

  return new Array(r,g,b);
}

function hex2rgb(h) {
  h = h.replace(/#/,'');
  for (var i = 6 - h.length; i >= 0; i--) h += '0';
  // RGB, each 0 to 255
  var r = Math.round(parseInt(h.substring(0,2),16));
  var g = Math.round(parseInt(h.substring(2,4),16));
  var b = Math.round(parseInt(h.substring(4,6),16));
  //alert("hex2rgb: "+h+" "+r+" "+g+" "+b);

  var results = new Array(r,g,b);
  return results;
}

// hook up the appropriate browser events.
D3Api.addEvent(document, 'scroll', set_scrolling);
D3Api.addEvent(document, 'resize',color_select_mousedown);
D3Api.addEvent(document, 'mousedown', color_select_mousedown);
D3Api.addEvent(document, 'mouseup', color_select_mouseup);
D3Api.addEvent(document, 'mousemove', get_mouse_coords);
D3Api.addEvent(document, 'mousemove', color_select_update);
D3Api.addEvent(document, 'resize', color_select_hideall);/**
 *
 * @component
 */
D3Api.PopupMenuCtrl = new function()
{
    /**
     *
     * @param dom
     */
    this.init = function(dom)
    {
        if(!D3Api.BROWSER.msie)
            dom.style.zIndex = 10;
        var jm = D3Api.getProperty(dom,'join_menu',false) || (D3Api.getProperty(dom,'join_menu_var',false) ? dom.D3Form.getVar(D3Api.getProperty(dom,'join_menu_var','')) : false);
        if(jm)
        {
            var jmc = dom.D3Form.getControl(jm);
            if(!jmc)
                return;
            var joinGroupName = D3Api.getProperty(dom,'join_group',false) || 'additionalMainMenu';
            var groupAmm = D3Api.getDomByAttr(jmc, 'name', joinGroupName);
            if(!groupAmm)
                return;
            D3Api.BaseCtrl.initEvent(dom,'onpopup','coords,show',undefined,jmc);
            var items = D3Api.PopupMenuCtrl.getItems(dom,true);
            for(var i = 0, c = items.length; i < c; i++)
                D3Api.PopupMenuCtrl.addItemDom(groupAmm, items[i]);
            return;
        }
        D3Api.PopupMenuCtrl.setWaitAction(dom,D3Api.getProperty(dom,'onpopup_action',false));
        dom.D3Store.popupObjects = [];

        var po = D3Api.getProperty(dom,'popupobject',false);
        if (po)
        {
            var pod = dom.D3Form.getControl(po);
            if (pod)
            {
                D3Api.PopupMenuCtrl.setPopupObject(dom,pod);
            }    
        }
        
        D3Api.BaseCtrl.initEvent(dom,'onpopup','coords,show');
        this.init_focus(dom);
        var ctrls = D3Api.getAllDomBy(dom.D3Form.currentContext || dom.D3Form.DOM,'[popupmenu="'+D3Api.getProperty(dom,'name','')+'"]');
        
        for(var i = 0, c = ctrls.length; i < c; i++)
        {
            D3Api.PopupMenuCtrl.setPopupObject(dom,ctrls[i]);
        }
        
        D3Api.addDom(dom.D3Form.DOM, dom);

        for(var collectionGroup = D3Api.getAllDomBy(dom, '[cont="groupitem"][separator]'), i = 0; i < collectionGroup.length; i++) {
            var placeSep = D3Api.getProperty(collectionGroup[i], 'separator'),
                     sep = D3Api.createDom('<div class="item separator" item_split="true" cmptype="PopupItem"></div>');
            dom.D3Form.parse(sep);
            if(!collectionGroup[i].children.length) D3Api.addClass(sep, 'ctrl_hidden');
            collectionGroup[i].D3Store.separator = (placeSep === 'before') && D3Api.insertBeforeDom(collectionGroup[i], sep) || 
                                                   (placeSep === 'after')  && D3Api.insertAfterDom(collectionGroup[i], sep)  ||
                                                   null;
        }
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getPopupObject = function PopupMenuCtrl_GetPopupObject(dom)
    {
        return dom.D3Store.popupObject;
    }

    /**
     *
     * @param dom
     * @param objDom
     */
    this.setPopupObject = function PopupMenuCtrl_SetPopupObject(dom,objDom)
    {
        if (dom.D3Store.popupObjects.indexOf(objDom) >= 0)
        {
            return;
        }
        function popup(e)
        {
            var evt = D3Api.getEvent(e);
            var coords = getClientEventCoords(evt); 
 
            if((evt.button && evt.button == 2) || (evt.which && evt.which == 3))
            {
                    dom.D3Store.popupObject = objDom || dom.D3Store.popupObject;
                    D3Api.PopupMenuCtrl.show(dom,coords);
                    D3Api.stopEvent(evt);
            }
        }
        
        if (objDom)
        {
            dom.D3Store.popupObjects.push(objDom);
            D3Api.addEvent(objDom,'mousedown',popup);
        }
    }

    /**
     *
     * @param dom
     * @param coords
     */
    this.show = function PopupMenuCtrl_Show(dom,coords)
    {
        if(dom.D3Store.waitAction)
        {
            D3Api.addClass(dom, 'waitAction');
            dom.D3Form.getAction(dom.D3Store.waitAction).execute();
        }else
        {
            D3Api.removeClass(dom, 'waitAction');
            var reqAmount = 0;
            var reqUids = {};
            if(dom.D3Store.uidBReq)
            {
                D3Api.Base.removeEvent('onRequestServerBegin',dom.D3Store.uidBReq);
            }
            if(dom.D3Store.uidEReq)
            {
                D3Api.Base.removeEvent('onRequestServerEnd',dom.D3Store.uidEReq);
            }
            dom.D3Store.uidBReq = D3Api.Base.addEvent('onRequestServerBegin', function(reqObj,reqUid){
                if(reqAmount == 0)
                    D3Api.addClass(dom, 'waitAction');
                reqAmount++;
                reqUids[reqUid] = true;
            });
            dom.D3Store.uidEReq = D3Api.Base.addEvent('onRequestServerEnd', function(reqObj,reqUid){
                if(reqUids[reqUid])
                    reqAmount--;
                if(reqAmount > 0)
                    return;
                
                if(dom.D3Store.uidBReq)
                {
                    D3Api.Base.removeEvent('onRequestServerBegin',dom.D3Store.uidBReq);
                    dom.D3Store.uidBReq = null;
                }
                if(dom.D3Store.uidEReq)
                {
                    D3Api.Base.removeEvent('onRequestServerEnd',dom.D3Store.uidEReq);
                    dom.D3Store.uidEReq = null;
                }
                
                if(dom.D3Store.hideFunc == null)
                    return;
                
                var res = dom.D3Base.callEvent('onpopup',coords,true);
                if(res === false)
                {
                    dom.D3Store.hideFunc();
                    return;
                }
                D3Api.removeClass(dom, 'waitAction');
                calcPos();
            });
            var res = dom.D3Base.callEvent('onpopup',coords);
            if(res === false)
                return;
            
            if(reqAmount == 0)
            {
                if(dom.D3Store.uidBReq)
                {
                    D3Api.Base.removeEvent('onRequestServerBegin',dom.D3Store.uidBReq);
                    dom.D3Store.uidBReq = null;
                }
                if(dom.D3Store.uidEReq)
                {
                    D3Api.Base.removeEvent('onRequestServerEnd',dom.D3Store.uidEReq);
                    dom.D3Store.uidEReq = null;
                }
            }
        }
        D3Api.removeClass(dom, 'notactive');
        var iact = D3Api.getAllDomBy(dom, '.item.active');
        for(var i = 0, c = iact.length; i < c; i++)
            D3Api.removeClass(iact[i], 'active');
        
        var calcPos = function(){
            var sX = D3Api.getBodyScrollLeft();
            var sY = D3Api.getBodyScrollTop();
            D3Api.showDomBlock(dom);
            var el_size = D3Api.getAbsoluteClientRect(dom);
            el_size.x = coords.left-5;
            el_size.y = coords.top-5;

            var page = D3Api.getPageWindowSize();

            var h = page.windowHeight+sY;
            var mcY = el_size.y+el_size.height;

            if (mcY-h > 0)
                el_size.y -=mcY-h+7;

            var w = page.windowWidth+sX;
            var mcX = el_size.x+el_size.width;

            if (mcX-w > 0)
                el_size.x -=mcX-w+7;

            dom.style.left = el_size.x+'px';
            dom.style.top  = el_size.y+'px';
        }
        calcPos();
        dom.D3Store.hideFunc = function(event)
        {
            if(event)
            {
                var t = D3Api.getEventTarget(event);
                t = D3Api.getControlByDom(t, 'PopupMenu');
                if(t == dom)
                    return;
            }
            D3Api.setDomDisplayDefault(dom);
            dom.D3Store.selected_item = null;
            dom.D3Store.parent_item = new Array();
            //setTimeout(function(){D3Api.hideDom(dom)},100);
            D3Api.removeEvent(document,"mousedown",dom.D3Store.hideFunc,true);
            dom.D3Store.hideFunc = null;
            D3Api.stopEvent(event);
        }
        
        D3Api.addEvent(document,"mousedown",dom.D3Store.hideFunc,true);
        //setTimeout(function(){D3Api.setDomDisplayDefault(dom)},1000);
    }
    function getClientEventCoords(evt)
    {
            var coords = {left:0, top:0};

            coords.left = evt.clientX;
            coords.top = evt.clientY;

            return coords;
    }

    /**
     *
     * @param event
     * @param anyDom
     * @param menuName
     */
    this.showPopupMenu = function(event,anyDom,menuName)
    {
        var ctrl = D3Api.getControlByDom(anyDom);
        var menu = ctrl.D3Form.getControl(menuName);
        if (menu)
        {
            menu.D3Store.popupObject = ctrl || menu.D3Store.popupObject;
            var evt = D3Api.getEvent(event);
            var coords = getClientEventCoords(evt); 
            D3Api.PopupMenuCtrl.show(menu,coords);      
        }
    }

    /**
     *
     * @param dom
     * @param itemDom
     * @param itemCont
     */
    this.addItemDom = function(dom,itemDom,itemCont)
    {
        if(itemCont)
        {
            itemCont = D3Api.getDomByAttr(itemCont, 'cont', 'menu');
        }else
            itemCont = dom;
        D3Api.addDom(itemCont, itemDom);
    }

    /**
     *
     * @param dom
     * @param rootOnly
     * @param onlySeparators
     * @returns {*}
     */
    this.getItems = function(dom,rootOnly,onlySeparators)
    {
        return D3Api.getAllDomBy(dom, '[cmptype="PopupItem"'+(rootOnly?'][rootitem="true"':'')+(onlySeparators===true?'][item_split="true"':'')+']');
    }

    /**
     *
     * @param dom
     * @returns {*|boolean}
     */
    this.getEnabled = function(dom)
    {
        return D3Api.hasClass(dom, 'ctrl_disable');
    }

    /**
     *
     * @param dom
     * @param value
     * @returns {boolean}
     */
    this.setEnabled = function(dom,value)
    {
        var items = D3Api.PopupMenuCtrl.getItems(dom,true);
        
        for(var i = 0, c = items.length; i < c; i++)
        {
            D3Api.setControlPropertyByDom(items[i], 'enabled', value, true);
        }
        if(D3Api.getBoolean(value))
            D3Api.removeClass(dom,'ctrl_disable');
        else
            D3Api.addClass(dom,'ctrl_disable');
        return true;
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getWaitAction = function(dom)
    {
        return dom.D3Store.waitAction;
    }

    /**
     *
     * @param dom
     * @param value
     * @returns {boolean}
     */
    this.setWaitAction = function(dom,value)
    {
        if(dom.D3Store.waitAction)
            dom.D3Form.getAction(dom.D3Store.waitAction).removeEvent('onafter_execute',dom.D3Store.waitActionAUid);
        if(D3Api.empty(value))
        {
            dom.D3Store.waitAction = value;
            return true;
        }
        var act = dom.D3Form.getAction(value);
        if(!act)
            return false;
        
        dom.D3Store.waitAction = value;
        //Значит в загрузке
        dom.D3Store.waitActionAUid = act.addEvent('onafter_execute',function(){
            if(!dom.D3Store.hideFunc)
                return;
            
            var res = dom.D3Base.callEvent('onpopup');
            if(res === false)
            {
                dom.D3Store.hideFunc();
                return;
            }
            
            D3Api.removeClass(dom, 'waitAction');
        });
    }

    /**
     *
     * @param dom
     * @param item
     * @param name
     * @returns {*}
     */
    this.addGroupItem = function(dom, item, name) {
        name = (typeof name === 'string') ? 'name="' + name + '"' : '';
        var groupitem = D3Api.createDom('<div ' + name + ' class="popupGroupItem" cont="groupitem" cmptype="PopupGroupItem"></div>');
        dom.D3Form.parse(groupitem);
        item = typeof item === 'string' && D3Api.getDomByAttr(dom, 'name', item) || typeof item === 'object' && item || null;
        if(item) 
            return D3Api.insertAfterDom(item, groupitem);
        return D3Api.addDom(dom, groupitem);
    };

    /**
     *
     * @param dom
     * @param attrs
     * @param rootItem
     * @param rootGroup
     * @param boolBefore
     * @param posItem
     * @returns {null|*}
     */
    this.addItem = function(dom,attrs,rootItem,rootGroup,boolBefore,posItem)
    {
        posItem = typeof posItem === 'string' && D3Api.getDomByAttr(dom, 'name', posItem) || typeof posItem === 'object' && posItem || null;
        if(!rootItem)
            rootItem = posItem && posItem.D3Store.parentItem?posItem.D3Store.parentItem:dom;
        else if(typeof(rootItem) == 'string')
            rootItem = D3Api.getDomByAttr(dom, 'name', rootItem);
        else
            rootItem = rootItem;
        rootGroup = typeof rootGroup === 'string' && D3Api.getDomByAttr(rootItem, 'name', rootGroup) || null;
                
        var rootItemCont = rootItem;
        if (D3Api.getProperty(rootItem, 'cmptype') == 'PopupItem')
        {
            D3Api.addClass(rootItem, 'haveItems');
            var submenu = D3Api.getDomByAttr(rootItem, 'cont', 'menu');
            if(!submenu)
            {
                var rootItemNew = (rootItem.outerHTML)?D3Api.createDom(rootItem.outerHTML):rootItem.cloneNode(true);
                D3Api.insertBeforeDom(rootItem, rootItemNew);
                D3Api.removeDom(rootItem);
                rootItem = null;
                rootItem = rootItemNew;
                var itemCont = D3Api.getDomByAttr(rootItem, 'cont', 'item');
                D3Api.setProperty(itemCont, 'onmouseover', ((attrs['onmouseover']) ? attrs['onmouseover']+';' : '') + 'D3Api.PopupItemCtrl.hoverItem(this);');
                D3Api.setProperty(itemCont, 'onclick', 'D3Api.PopupItemCtrl.hoverItem(this,true);');
                dom.D3Form.parse(rootItem);
            
                submenu = D3Api.createDom('<div class="popupMenu subItems" cont="menu"></div>');
                D3Api.addDom(rootGroup || rootItem,submenu);
            }
            rootItemCont = submenu;          
        }
        var attrStr = 'cmptype="PopupItem" '+(rootItemCont == dom?'rootitem="true" ':'');
        var events = '';
        var itemText = '';
        var item;
        if(attrs['caption'] && attrs['caption'] == '-')
        {
            itemText = '<div class="item separator" '+attrStr+(attrs['name'] && attrs['name']!=''?' name="'+attrs['name']+'"':'')+' item_split="true" ></div>';
        }else
        {
            if(attrs['onclick'])
            {
                events += ' onclick="'+attrs['onclick']+'; D3Api.PopupItemCtrl.clickItem(this);"';
                attrs['onclick'] = undefined;
                delete attrStr['onclick'];
            }
            if(attrs['onmouseover'])
            {
                events += ' onmouseover="'+attrs['onmouseover']+'; D3Api.PopupItemCtrl.hoverItem(this);"';
                attrs['onmouseover'] = undefined;
                delete attrs['onmouseover'];
            }
            else {
                events += ' onmouseover="D3Api.PopupItemCtrl.hoverItem(this);"';
            }
            for(var a in attrs)
            {
                if(attrs.hasOwnProperty(a)){
                    attrStr += ' '+a+'="'+attrs[a]+'"';
                }
            }
            itemText = '<div class="item" '+attrStr+' ><table style="width:100%" cmpparse="PopupItem" '+events+' cont="item"><tr><td class="itemCaption"><img src="'+(attrs['icon'] || '')+'" cont="itemIcon" class="itemIcon"/><span cont="itemCaption">'+attrs['caption']+'</span></td><td class="caret">&nbsp;&nbsp;</td></tr></table></div>';
        }
        item = D3Api.createDom(itemText);
        if(!item)
            return null;
        dom.D3Form.parse(item);
        var rootEl = rootGroup || rootItemCont;
        if(posItem)
        {
            if(boolBefore) 
                D3Api.insertBeforeDom(posItem, item);
            else
                D3Api.insertAfterDom(posItem, item);
        }else
        {
            if(boolBefore && rootEl.firstChild) 
                D3Api.insertBeforeDom(rootEl.firstChild, item);
            else 
                D3Api.addDom(rootEl, item);
            if(rootGroup && rootGroup.D3Store && rootGroup.D3Store.separator) {
                D3Api.removeClass(rootGroup.D3Store.separator, 'ctrl_hidden');
            }
        }
        item.D3Store.parentItem = rootItem;
        dom.D3Base.callEvent('onitem_add',item,rootEl);
        return item;
    }

    /**
     *
     * @param dom
     * @param itemDom
     */
    this.deleteItem = function(dom,itemDom)
    {
        var rootEl = itemDom.parentNode;
        if(dom.D3Base.callEvent('onitem_delete',itemDom,rootEl) !== false)
            D3Api.removeDom(itemDom);     
    }

    /**
     *
     * @param dom
     */
    this.defaultAction = function(dom)
    {
        var item = D3Api.getDomBy(dom,'[cmptype="PopupItem"][default="true"]>table[cont="item"]');

        if (item) {
            item.dispatchEvent(new CustomEvent('click'));
        }
    }

    /**
     *
     * @param dom
     * @param e
     */
    this.CtrlKeyDown = function(dom, e)
    {
        switch (e.keyCode) {
            case 40: //стрелка вниз
                D3Api.PopupMenuCtrl.setNextItem(dom, 1);
                D3Api.stopEvent(e)
                break;
            case 38: //стрелка вверх
                D3Api.PopupMenuCtrl.setNextItem(dom, -1);
                D3Api.stopEvent(e)
                break;
            case 39: //стрелка вправо
                var submenu = D3Api.getDomByAttr(D3Api.PopupMenuCtrl.getSelectedItem(dom), 'cont', 'menu');
                if(submenu)
                {
                    if(!dom.D3Store.parent_item)
                        dom.D3Store.parent_item = new Array();
                    dom.D3Store.parent_item.push(D3Api.PopupMenuCtrl.getSelectedItem(dom));
                    dom.D3Store.selected_item = null;
                    D3Api.PopupMenuCtrl.setNextItem(dom, 1);
                }
                D3Api.stopEvent(e)
                break;
            case 37: //стрелка влево
                if(!dom.D3Store.parent_item)
                    break;
                var parent_item = dom.D3Store.parent_item[dom.D3Store.parent_item.length - 1];

                if(!parent_item)
                    break;
                D3Api.PopupItemCtrl.hoverItem(parent_item);
                dom.D3Store.parent_item.pop();
                var items = D3Api.PopupMenuCtrl.getItemsOfActiveMenu(dom);
                for(var i = 0; i < items.length; i++) {
                    if (items[i] == parent_item) {
                        dom.D3Store.selected_item = i+1;
                        D3Api.PopupMenuCtrl.setNextItem(dom, -1);
                        break;
                    }
                }
                D3Api.stopEvent(e)
                break;
            case 13://Enter
                var selected_item=D3Api.PopupMenuCtrl.getSelectedItem(dom);
                var cont_item = D3Api.getDomByAttr(selected_item, 'cont', 'item');
                cont_item.click();
                D3Api.stopEvent(e)
                break;
            case 27: //Esc
                dom.D3Store.hideFunc();
                if(dom.D3Form.lastFocusControl)
                    dom.D3Form.lastFocusControl.focus();
                D3Api.stopEvent(e)
                break;
        }
    }
    ///delta = 1 движение вниз по меню
    ///delta = -1 движение вверх по меню

    /**
     *
     * @param dom
     * @param delta
     * @returns {*}
     */
    this.setNextItem = function(dom, delta)
    {
        var n = dom.D3Store.selected_item;

        if(n === undefined || n === null)
            n = 0;
        else
        {
            n += delta;
        }

        n = this.setSelectedItemIndex(dom, n);
        if(n && D3Api.hasClass(D3Api.PopupMenuCtrl.getSelectedItem(dom), 'separator'))
        {
            n += delta;
            n = this.setSelectedItemIndex(dom, n);
        }

        return n;
    };

    /**
     *
     * @param dom
     * @param index
     * @returns {*}
     */
    this.setSelectedItemIndex = function(dom, index)
    {
        var active_menu_items = D3Api.PopupMenuCtrl.getItemsOfActiveMenu(dom);
        if(active_menu_items && index != -1 && index !== false &&
            index < active_menu_items.length &&
            active_menu_items[index])
        {
            dom.D3Store.selected_item = index;
            D3Api.PopupItemCtrl.hoverItem(active_menu_items[index]);
        }

        return dom.D3Store.selected_item;
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getSelectedItem = function(dom)
    {
        return D3Api.PopupMenuCtrl.getItemsOfActiveMenu(dom)[dom.D3Store.selected_item];
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getItemsOfActiveMenu = function(dom)
    {
        if(!dom.D3Store.parent_item || dom.D3Store.parent_item.length == 0)
        {
            return  D3Api.PopupMenuCtrl.getItems(dom, true);
        }
        else
        {
            var submenu = D3Api.getDomByAttr(dom.D3Store.parent_item[dom.D3Store.parent_item.length - 1], 'cont', 'menu');
            if(!submenu)
                return;

            return D3Api.PopupMenuCtrl.getItems(submenu);
        }
    }
}
D3Api.controlsApi['PopupMenu'] = new D3Api.ControlBaseProperties(D3Api.PopupMenuCtrl);
D3Api.controlsApi['PopupMenu']['popupobject']={get:D3Api.PopupMenuCtrl.getPopupObject,set: D3Api.PopupMenuCtrl.setPopupObject};
D3Api.controlsApi['PopupMenu']['enabled']={get:D3Api.PopupMenuCtrl.getEnabled,set: D3Api.PopupMenuCtrl.setEnabled};
D3Api.controlsApi['PopupMenu']['onpopup_action']={get:D3Api.PopupMenuCtrl.getWaitAction,set: D3Api.PopupMenuCtrl.setWaitAction};
D3Api.controlsApi['PopupMenu']['item']={set: D3Api.PopupMenuCtrl.setSelectedItemIndex};


/**
 *
 * @component
 */
D3Api.PopupItemCtrl = new function()
{

    /**
     *
     * @param dom
     */
    this.clickItem = function(dom)
    {
        var m = D3Api.getControlByDom(dom, 'PopupMenu');
        
        m.D3Store.hideFunc && m.D3Store.hideFunc();
    }
    
    /**
     *
     * @param dom
     * @param click
     */
    this.hoverItem = function(dom,click)
    {
        var event = D3Api.getEvent();
        if(D3Api.BROWSER.msie && !click) {
            var toElement = event.relatedTarget || event.fromElement;
            while(toElement && toElement !== dom) {
                toElement = toElement.parentNode;
            }
            if(toElement === dom) return;
        }
        var item = D3Api.getControlByDom(dom, 'PopupItem');
        var toogle = D3Api.hasClass(item, 'active');
        if(D3Api.getEventTarget() != D3Api.getEventCurrentTarget() && toogle && event.type != 'click' && event.type != 'keydown')
            return;     
        var menu = D3Api.getDomByDomAttr(dom, 'cont', 'menu');
        if(!menu)
            return;
        D3Api.removeClass(menu, 'notactive');
        var iact = D3Api.getAllDomBy(menu, '.item.active');
        for(var i = 0, c = iact.length; i < c; i++)
            D3Api.removeClass(iact[i], 'active');
        
        if(toogle)
            return;
        
        D3Api.addClass(item, 'active');
        
        var submenu = D3Api.getDomByAttr(item, 'cont', 'menu');
        if(!submenu)
            return;
        D3Api.addClass(menu, 'notactive');
        D3Api.removeClass(submenu, 'notactive');
        
        var rect = D3Api.getAbsoluteClientRect(item);
        
        
        var sX = D3Api.getBodyScrollLeft();
        var sY = D3Api.getBodyScrollTop();
        var el_size = D3Api.getAbsoluteClientRect(submenu);

        var page = D3Api.getPageWindowSize();

        var h = page.windowHeight+sY;
        var mcY = rect.y+el_size.height;

        var dY = 0;
        if (mcY-h > 0)
            dY = -(mcY-h);

        var w = page.windowWidth+sX;
        var mcX = rect.x+rect.width+el_size.width;

        var dX = rect.width-5;
        if (mcX-w > 0)
            dX = -(el_size.width-5);

        submenu.style.left = dX+'px';
        submenu.style.top  = dY+'px';
        submenu.style.zIndex = 10;
    }

    /**
     *
     * @param _dom
     * @param _value
     */
    this.setVisible = function PopupItem_setVisible(_dom, _value)
    {
        D3Api.BaseCtrl.setVisible(_dom,_value);
        var items = _dom.parentNode.childNodes, item = false, splitItem = null, isSplit = false;

        for(var i = 0, c = items.length; i < c; i++)
        {
            if(D3Api.hasProperty(items[i],'item_split'))
            {
                if(!item)
                {
                    if(splitItem)
                    {    
                        if(splitItem != _dom) D3Api.BaseCtrl.setVisible(splitItem, true);
                    }
                    D3Api.BaseCtrl.setVisible(items[i],false);
                }else
                {
                    splitItem = items[i];
                    item = false;
                }
            }else if(['PopupItem','PopupGroupItem'].indexOf(D3Api.getProperty(items[i],'cmptype')) != -1 && D3Api.BaseCtrl.getVisible(items[i]))
            {
                item = true;
                if(splitItem)
                {    
                    if(splitItem != _dom) D3Api.BaseCtrl.setVisible(splitItem, true);
                    splitItem = null;
                }
            }                     
        }    
        if(splitItem)
            D3Api.BaseCtrl.setVisible(splitItem,false);
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getCaption = function PopupItemCtrl_getCaption(dom)
    {
        var cont = D3Api.getDomByAttr(dom, 'cont', 'itemCaption');
        return D3Api.getTextContent(cont);
    }

    /**
     *
     * @param dom
     * @param value
     */
    this.setCaption = function PopupItemCtrl_setCaption(dom,value)
    {
        var cont = D3Api.getDomByAttr(dom, 'cont', 'itemCaption');
        D3Api.addTextNode(cont, D3Api.empty(value) ? '' : value, true);
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getIcon = function PopupItemCtrl_getIcon(dom)
    {
        var cont = D3Api.getDomByAttr(dom, 'cont', 'itemIcon');
        return cont.src;
    }

    /**
     *
     * @param dom
     * @param value
     */
    this.setIcon = function PopupItemCtrl_setIcon(dom,value)
    {
        var cont = D3Api.getDomByAttr(dom, 'cont', 'itemIcon');
        cont.src = D3Api.empty(value) ? '' : value;
    }
}
D3Api.controlsApi['PopupItem'] = new D3Api.ControlBaseProperties(D3Api.PopupItemCtrl);
D3Api.controlsApi['PopupItem']['visible'].set = D3Api.PopupItemCtrl.setVisible;
D3Api.controlsApi['PopupItem']['caption'] = {get: D3Api.PopupItemCtrl.getCaption, set: D3Api.PopupItemCtrl.setCaption};
D3Api.controlsApi['PopupItem']['icon'] = {get: D3Api.PopupItemCtrl.getIcon, set: D3Api.PopupItemCtrl.setIcon};

/**
 *
 * @component
 */
D3Api.PopupGroupItemCtrl = new function()
{
    
}

D3Api.controlsApi['PopupGroupItem'] = new D3Api.ControlBaseProperties(D3Api.PopupGroupItemCtrl);
/**
 *
 * @component
 */
D3Api.DialogCtrl = new function()
{

    /**
     *
     * @param dom
     */
    this.init = function(dom)
    {
    };

    /**
     *
     * @param dom
     * @param value
     */
    this.setValue= function(dom,value)
    {
        var ctrlName = D3Api.getProperty(dom,'name','');
        var domTextControl = D3Api.getDomByName(dom, ctrlName +'_text');
        D3Api.LabelCtrl.setCaption(domTextControl, value);
    };

    /**
     *
     * @param dom
     */
    this.getValue= function(dom)
    {
        var ctrlName = D3Api.getProperty(dom,'name','');
        var domTextControl = D3Api.getDomByName(dom, ctrlName +'_text');
        return D3Api.LabelCtrl.getCaption(domTextControl);
    };

    /**
     *
     * @param dom
     * @param value
     * @returns {string}
     */
    this.setVisible = function (dom, value) {
        var ctrlName = D3Api.getProperty(dom,'name','');
        if(!ctrlName)return 'Компонент с именем ' + ctrlName + ' не найден!';
        if(value){
            D3Api.addClass(D3Api.getDomByName(D3Api.MainDom, ctrlName), "active");
            D3Api.addClass(D3Api.getDomByName(D3Api.MainDom, ctrlName + "_background"), "active");
        }else {
            D3Api.removeClass(D3Api.getDomByName(D3Api.MainDom, ctrlName), "active");
            D3Api.removeClass(D3Api.getDomByName(D3Api.MainDom, ctrlName + "_background"), "active");
        };
    };

    /**
     *
     * @param dom
     * @param value
     */
    this.setCaption = function (dom, value) {
        var ctrlName = D3Api.getProperty(dom,'name','');
        var domTextControl = D3Api.getDomByName(dom, ctrlName +'_caption');
        D3Api.LabelCtrl.setCaption(domTextControl, value);
    };

    /**
     *
     */
    this.getCaption = function (dom) {
        var ctrlName = D3Api.getProperty(dom,'name','');
        var domTextControl = D3Api.getDomByName(dom, ctrlName +'_caption');
        return D3Api.LabelCtrl.getCaption(domTextControl);
    };
};

D3Api.controlsApi['Dialog'] = new D3Api.ControlBaseProperties(D3Api.DialogCtrl);
D3Api.controlsApi['Dialog']['value'] = {get: D3Api.DialogCtrl.getValue, set: D3Api.DialogCtrl.setValue};
D3Api.controlsApi['Dialog']['visible'] = {set: D3Api.DialogCtrl.setVisible};
D3Api.controlsApi['Dialog']['caption'] = {get:D3Api.DialogCtrl.getCaption, set: D3Api.DialogCtrl.setCaption};/**
 *
 * @component
 */
D3Api.ImageCtrl = new function()
{
    /**
     *
     * @param dom
     */
    this.init = function(dom)
    {
        dom.D3Store.isFileLob = D3Api.getBoolean(D3Api.getProperty(dom,'lob',false));
        dom.D3Store.mType = D3Api.getProperty(dom,'mtype','');
        this.init_focus(dom);
    }
       
    /**
     *
     * @param dom
     * @param value
     */
    this.setSource = function(dom,value)
    {
        dom.src = (dom.D3Store.isFileLob?'-file_lob?mtype='+dom.D3Store.mType+'&id=':'')+value;
        if(D3Api.empty(value))
            D3Api.addClass(dom,'ctrl_hidden');
        else
            D3Api.removeClass(dom,'ctrl_hidden');
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getSource = function(dom)
    {
        return controlDom.D3Store._properties_['src'] || controlDom.D3Store._properties_['value'];
    }
}

D3Api.controlsApi['Image'] = new D3Api.ControlBaseProperties(D3Api.ImageCtrl);
D3Api.controlsApi['Image']['src'] = {get:D3Api.ImageCtrl.getSource,set:D3Api.ImageCtrl.setSource};
D3Api.controlsApi['Image']['value'] = D3Api.controlsApi['Image']['src'];
/**
 *
 * @component
 */
D3Api.ToolbarCtrl = new function()
{
    /**
     *
     * @param dom
     */
    this.init = function(dom)
    {
        // если форма развернуа на весь экран
        if ((dom.parentElement.parentElement.getAttribute("class") === "D3MainContainer") && (dom.getAttribute("bottom")) ){
           dom.style.right = "0px";
           dom.style.left = "0px";
           dom.style.bottom = "0px";
           dom.style.width = "100%";
        }

        D3Api.BaseCtrl.initEvent(dom,'onchange');
        dom.D3Base.addEvent('onchange_property',function(property,value){
            if (property == 'value')
            {
                dom.D3Base.callEvent('onchange');
            };
        });
    };

    /**
     *
     * @param dom
     * @param value
     */
    this.setValue= function(dom,value)
    {
        D3Api.setProperty(dom,'value',value);
    };

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getValue= function(dom)
    {
        return D3Api.getProperty(dom,'value','');
    };

    /**
     *
     * @param dom
     * @param value
     */
    this.setUnitcode= function(dom,value)
    {
        D3Api.setProperty(dom,'unitcode',value);
    };

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getUnitcode= function(dom)
    {
        return D3Api.getProperty(dom,'unitcode','');
    };

    /**
     *
     * @param dom
     */
    this.onChangeToolbar = function (dom) {
        if(D3Api.getProperty(dom,'df','')){
            dom.D3Form.refreshDataSet('DS_toolbar_status_list_'+ D3Api.getProperty(dom,'name',''));
        };
        if(D3Api.getProperty(dom,'sttf','')){
            dom.D3Form.refreshDataSet('DS_toolbar_sttf_list_'+ D3Api.getProperty(dom,'name',''));
        };
        if(D3Api.getProperty(dom,'info','')){
            dom.D3Form.setValue('info_about_record_'+ D3Api.getProperty(dom,'name',''), dom.D3Form.getValue(D3Api.getProperty(dom,'name','')));
        };

    };

    /**
     *
     * @param dom
     */
    this.statusHistory = function (dom) {
        dom.D3Form.openForm('df/df_status_history', {
            vars: {
                identifier: dom.D3Form.getValue(D3Api.getProperty(dom,'toolbar',''))
            }
        },D3Api.MainDom);
    };

    /**
     *
     * @param dom
     * @param callback
     */
    this.onChangeDf = function (dom, callback) {
        if(!D3Api.isUserEvent())return;
        var ctrl = dom.D3Form.getControlProperty(D3Api.getProperty(dom,'name',''),'data');

        if (!ctrl.actioncode) return;
        if(ctrl.use_dialog==1){
            if(dom.modeValues){
                dom.D3Form.setValue(dom,dom.modeValues.old_value);
            }
            dom.D3Form.getValue(D3Api.getProperty(dom,'toolbar',''));
            dom.D3Form.openForm('df/df_dialog_generate', {
                request:{
                    df_flow_id:ctrl.df_flow_id,
                    actioncode:ctrl.actioncode,
                    unitcode:ctrl.unitcode,
                    id:dom.D3Form.getValue(D3Api.getProperty(dom,'toolbar',''))
                },
                modal_form: true,
                onclose: function (result) {
                    if (result) {
                        dom.D3Form.refreshDataSet('DS_toolbar_status_list_'+ D3Api.getProperty(dom,'toolbar',''), function () {
                            if (typeof callback === 'function'){
                                callback();
                            };
                        });
                    }
                }
            },D3Api.MainDom);
        }else{
            var req = {
                toolbar:{
                    type: 'Toolbar',
                    params: {
                        unitcode: ctrl.unitcode,
                        actioncode: ctrl.actioncode,
                        id: dom.D3Form.getValue(D3Api.getProperty(dom,'toolbar',''))
                    }
                }
            };
            D3Api.requestServer({
                                    url: 'request.php',
                                    method: 'POST',
                                    urlData:{
                                        action: 'toolbarDfSetStatus'
                                    },
                                    data: {
                                        request: D3Api.JSONstringify(req)
                                    },
                                    contextObj:dom,
                                    onSuccess: function(res) {
                                        if(res.match(/(?:MESSAGE_TEXT:)([\s\S]+?)(?:PG_EXCEPTION_DETAIL:|$)/)){
                                            dom.D3Form.setValue(D3Api.getProperty(dom,'name',''), '');
                                            D3Api.alert_msg(res);
                                            return;
                                        }
                                        var result = JSON.parse(res);
                                        if(result['toolbarDfSetStatus'].error){
                                            D3Api.alert_msg(result['toolbarDfSetStatus'].error);
                                            dom.D3Form.setValue(D3Api.getProperty(dom,'name',''), '');
                                            return;
                                        };
                                        dom.D3Form.refreshDataSet('DS_toolbar_status_list_'+ D3Api.getProperty(dom,'toolbar',''), function () {
                                            if (typeof callback === 'function'){
                                                callback();
                                            };
                                        });
                                    },
                                    onError: function (res) {
                                        D3Api.alert_msg(res);
                                    }
                                });
        }
    };

    /**
     *
     * @param dom
     */
    this.onChangeSttf = function (dom) {
        if(!D3Api.isUserEvent())return;
        var data = dom.D3Form.getControlProperty(D3Api.getProperty(dom,'name',''), 'data')
        if(!data.code)return;

        dom.D3Form.openForm('StatisticForms/sttf_generate', {
            request: {
                sttf_id: data.id,
                sttf_synchronous: 1
            },
            vars: {
                sttf_data: {
                    id: dom.D3Form.getValue(D3Api.getProperty(dom,'toolbar','')),
                }
            }
        }, D3Api.MainDom);
        dom.D3Form.setValue(D3Api.getProperty(dom,'name',''), '');

    }
};

D3Api.controlsApi['Toolbar'] = new D3Api.ControlBaseProperties(D3Api.ToolbarCtrl);
D3Api.controlsApi['Toolbar']['value'] = {get: D3Api.ToolbarCtrl.getValue, set: D3Api.ToolbarCtrl.setValue};
D3Api.controlsApi['Toolbar']['unitcode'] = {get: D3Api.ToolbarCtrl.getUnitcode, set: D3Api.ToolbarCtrl.setUnitcode};
D3Api.controlsApi['ToolbarItemGroup'] = new D3Api.ControlBaseProperties(D3Api.ToolbarCtrl);

/**
 *
 * @component
 */
D3Api.PageControlCtrl = new function()
{
    /**
     *
     * @param dom
     */
    this.init = function PageControlCreate(dom)
    {
        this.init_focus(dom);
        dom.D3Store.uniqId = D3Api.getProperty(dom,'uniqid','');
        D3Api.PageControlCtrl.setActiveIndex(dom,D3Api.getProperty(dom,'activeindex',0));
        D3Api.BaseCtrl.initEvent(dom,'onpagechange','showIndex,hideIndex');
        D3Api.BaseCtrl.initEvent(dom,'onpageshow','pageIndex');
        D3Api.BaseCtrl.initEvent(dom,'onpagehide','pageIndex');
        dom.D3Form.addEvent('onResize',function(){D3Api.PageControlCtrl.resize(dom)});
        dom.D3Store.ShowIndex=0;
        dom.D3Store.mode = dom.getAttribute('mode');
        D3Api.PageControlCtrl.CalckTabSheetHead(dom);
        D3Api.PageControlCtrl.resize(dom);
    }
    
    /**
     *
     * @param dom
     * @constructor
     */
    this.CalckTabSheetHead= function(dom)
    {
        if (dom.D3Store.mode === 'vertical') return;
        dom.D3Store.HeadWidth=0;
        var ul_dom= D3Api.getDomByAttr(dom, 'cont', 'PageControl_head');
        dom.D3Store.TabSheetHeads = D3Api.getAllDomBy(ul_dom, '[cmptype="TabSheet"]');
        for( var i=0;i<dom.D3Store.TabSheetHeads.length;i++)
        {
           if(D3Api.getControlPropertyByDom(dom.D3Store.TabSheetHeads[i],'visible'))
             dom.D3Store.HeadWidth=dom.D3Store.HeadWidth+dom.D3Store.TabSheetHeads[i].offsetWidth;
        }
    }
    
    /**
     *
     * @param dom
     */
    this.resize = function(dom) {
        if (dom.D3Store.mode === 'vertical') return;

        var ul_dom = D3Api.getDomByAttr(dom, 'cont', 'PageControl_head');
        var scroll_next = D3Api.getDomByAttr(dom, 'cont', 'ScrollNext');
        var scroll_prior = D3Api.getDomByAttr(dom, 'cont', 'ScrollPrior');
        var div_dom = D3Api.getDomByAttr(dom, 'cont', 'div_ul');
        if (div_dom.offsetWidth < dom.D3Store.HeadWidth) {
            if ((-1 * ul_dom.offsetLeft + div_dom.offsetWidth) < dom.D3Store.HeadWidth) {
                D3Api.showDomBlock(scroll_next);
            } else {
                D3Api.hideDom(scroll_next);
            }

            if (ul_dom.offsetLeft == '0') {
                D3Api.hideDom(scroll_prior);
            } else {
                D3Api.showDomBlock(scroll_prior);
            }
        } else {
            D3Api.hideDom(scroll_next);
            D3Api.hideDom(scroll_prior);
            D3Api.setStyle(ul_dom, 'left', '0');
            dom.D3Store.ShowIndex = 0;
        }
    };
    
    /**
     *
     * @param dom
     * @constructor
     */
    this.ScrollNext = function(dom)
    {
         var page_control=D3Api.getControlByDom(dom, 'PageControl');   
         var ul_dom=  D3Api.getDomByAttr(page_control, 'cont', 'PageControl_head');
         var div_dom= D3Api.getDomByAttr(page_control, 'cont', 'div_ul');
         var scroll_lenght=0;
         if (page_control.D3Store.ShowIndex==0) scroll_lenght=-20;
         while ((scroll_lenght<Math.round(div_dom.offsetWidth/2))&&(page_control.D3Store.ShowIndex<page_control.D3Store.TabSheetHeads.length))
             {
                 if(D3Api.getControlPropertyByDom(page_control.D3Store.TabSheetHeads[page_control.D3Store.ShowIndex],'visible'))
                    scroll_lenght=scroll_lenght+page_control.D3Store.TabSheetHeads[page_control.D3Store.ShowIndex].offsetWidth;
                 page_control.D3Store.ShowIndex++;
             }
         D3Api.setStyle(ul_dom,'left',(ul_dom.offsetLeft-scroll_lenght)+'px');
         D3Api.PageControlCtrl.resize(page_control);
    }

    /**
     *
     * @param dom
     * @constructor
     */
    this.ScrollPrior = function(dom)
    {
         var page_control=D3Api.getControlByDom(dom, 'PageControl');   
         var ul_dom=  D3Api.getDomByAttr(page_control, 'cont', 'PageControl_head');
         var div_dom= D3Api.getDomByAttr(page_control, 'cont', 'div_ul');
         var scroll_lenght=0;     
         while ((scroll_lenght<Math.round(div_dom.offsetWidth/2))&&(page_control.D3Store.ShowIndex>0))
             {
                 page_control.D3Store.ShowIndex--;
                 if(D3Api.getControlPropertyByDom(page_control.D3Store.TabSheetHeads[page_control.D3Store.ShowIndex],'visible'))
                    scroll_lenght=scroll_lenght+page_control.D3Store.TabSheetHeads[page_control.D3Store.ShowIndex].offsetWidth;
             }
         if (page_control.D3Store.ShowIndex==0) 
             D3Api.setStyle(ul_dom,'left','0');
         else
             D3Api.setStyle(ul_dom,'left',(ul_dom.offsetLeft+scroll_lenght)+'px');
         D3Api.PageControlCtrl.resize(page_control);
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getActiveIndex = function(dom)
    {
        return dom.D3Store.activeIndex;
    }

    /**
     *
     * @param dom
     * @param index
     */
    this.setActiveIndex = function(dom,index)
    {
        index = +index;
        if (index === dom.D3Store.activeIndex)
            return;
        if (dom.D3Store.activeIndex != undefined)
        {
            var tab = D3Api.getDomBy(dom, '.tab'+dom.D3Store.activeIndex+'_'+dom.D3Store.uniqId);
            D3Api.removeClass(tab, 'active');
            var page = D3Api.getDomBy(dom, '.page'+dom.D3Store.activeIndex+'_'+dom.D3Store.uniqId);
            dom.D3Base.callEvent('onpagehide', dom.D3Store.activeIndex);
            D3Api.hideDom(page);
        }
        tab = D3Api.getDomBy(dom, '.tab'+index+'_'+dom.D3Store.uniqId);
        D3Api.addClass(tab, 'active');
        page = D3Api.getDomBy(dom, '.page'+index+'_'+dom.D3Store.uniqId);
        D3Api.showDomBlock(page);
        dom.D3Base.callEvent('onpageshow', index);
        var hInd = dom.D3Store.activeIndex;
        dom.D3Store.activeIndex = index;
        dom.D3Base.callEvent('onpagechange',index,hInd);
        D3Api.resize();
    }

    /**
     *
     * @param dom
     */
    this.showTab = function showTab(dom)
    {
        var pc = D3Api.getControlByDom(dom, 'PageControl');
        var index = D3Api.getProperty(dom, 'pageindex', 0);
        this.setActiveIndex(pc,index); 
    }

    /**
     *
     * @param dom
     * @param index
     * @returns {*}
     */
    this.getPageByIndex = function(dom,index)
    {
        index = index || dom.D3Store.activeIndex;
        var page = D3Api.getDomBy(dom, '.page'+index);
        if (!page)
            D3Api.debug_msg('Закладка с индесом '+index+' не найдена.');
        return page;
    }

    /**
     *
     * @param dom
     * @param index
     * @returns {*}
     */
    this.getTabByIndex = function(dom,index)
    {
        if(D3Api.isUndefined(index))
            index = dom.D3Store.activeIndex;

        var tab = D3Api.getDomByAttr(dom, 'pageindex', index);
        if (!tab)
            D3Api.debug_msg('Кнопка закладки с индесом '+index+' не найдена.');
        return tab;
    }

    /**
     *
     * @param dom
     * @param e
     */
    this.CtrlKeyDown = function(dom, e)
    {
        switch (e.keyCode)
        {
            case 33: //PageUp
            case 38: //стрелка вверх
            case 37: //стрелка влево
                var activeIndex = D3Api.PageControlCtrl.getActiveIndex(dom);
                var flag = false;

                while (!flag)
                {
                    var nextTab = D3Api.PageControlCtrl.getTabByIndex(dom, activeIndex-1);

                    if(nextTab)
                    {
                        if(D3Api.BaseCtrl.getVisible(nextTab))
                        {
                            D3Api.PageControlCtrl.showTab(nextTab);
                            flag = true;
                        }
                    }
                    else
                        flag = true;

                    activeIndex = nextTab;
                }
                D3Api.stopEvent(e);
                break;
            case 34: //PageDown
            case 40: //стрелка вниз
            case 39: //стрелка вправо
                var activeIndex = D3Api.PageControlCtrl.getActiveIndex(dom);
                var flag = false;

                while (!flag)
                {
                    var nextTab = D3Api.PageControlCtrl.getTabByIndex(dom, activeIndex+1);

                    if(nextTab)
                    {
                        if(D3Api.BaseCtrl.getVisible(nextTab))
                        {
                            D3Api.PageControlCtrl.showTab(nextTab);
                            flag = true;
                        }
                    }
                    else
                        flag = true;

                    activeIndex = nextTab;
                }
                D3Api.stopEvent(e);
                break;
        }
    }
}
D3Api.controlsApi['PageControl'] = new D3Api.ControlBaseProperties(D3Api.PageControlCtrl);
D3Api.controlsApi['PageControl']['activeIndex']={get:D3Api.PageControlCtrl.getActiveIndex,set:D3Api.PageControlCtrl.setActiveIndex};

/**
 *
 * @component
 */
D3Api.TabSheetCtrl = new function()
{

    /**
     *
     * @param dom
     * @param value
     */
    this.setVisible = function(dom, value)
    {
        D3Api.BaseCtrl.setVisible(dom,value);
        
        var pc = D3Api.getControlByDom(dom, 'PageControl');
        var ind = D3Api.getProperty(dom, 'pageindex', false);
        var page = D3Api.getDomByAttr(pc, 'cont', 'page'+ind+'_'+pc.D3Store.uniqId);
        
        if(!page)
            return;
        D3Api.BaseCtrl.setVisible(page,value);
        D3Api.PageControlCtrl.CalckTabSheetHead(pc);
        D3Api.PageControlCtrl.resize(pc);
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getIndex = function(dom)
    {
        return D3Api.getProperty(dom, 'pageindex', null);
    }

    /**
     *
     * @param dom
     * @returns {*}
     */
    this.getCaption = function(dom)
    {
        var cc = D3Api.getDomByAttr(dom, 'cont', 'tabcaption');
        return D3Api.getTextContent(cc);
    }

    /**
     *
     * @param dom
     * @param value
     * @returns {boolean}
     */
    this.setCaption = function(dom,value)
    {
        var cc = D3Api.getDomByAttr(dom, 'cont', 'tabcaption');
        D3Api.addTextNode(cc, value, true);
        return true;
    }
}

D3Api.controlsApi['TabSheet'] = new D3Api.ControlBaseProperties(D3Api.TabSheetCtrl);
D3Api.controlsApi['TabSheet']['visible'].set = D3Api.TabSheetCtrl.setVisible;
D3Api.controlsApi['TabSheet']['index']={get:D3Api.TabSheetCtrl.getIndex};
D3Api.controlsApi['TabSheet']['caption']={get: D3Api.TabSheetCtrl.getCaption, set: D3Api.TabSheetCtrl.setCaption};

D3Api.OpenStreetMapCtrl = new function()
{
    var map;                                              // слой карты
    var markers;        // слой маркеров
    var fromProjection;  // Transform from WGS 1984
    var toProjection;  // to Spherical Mercator Projection
    var click;
    var uniqid ; // Уникальный ID  сомпонента(генерируется)
    this.init = function(_dom)
    {
        var uniqid = _dom.getAttribute("uniqid")

        var mapBodyConteyner = _dom.querySelector('.MapContent'+uniqid);
        if (mapBodyConteyner) {
             setTimeout(function sayHi() {
                _dom.querySelector('.olControlAttribution').style.display="none"; // убираем  логотип OSM

               // Добавить кнопки + - по селекторам
               //   + olControlZoomIn olButton
               //   - olControlZoomOut olButton
             }, 200);
             /*
                 console.log(_dom.parentNode);
                 console.log(_dom.parentNode.parentNode);
                 console.log(_dom.parentNode.parentNode.getBoundingClientRect());
             */
             var rectPar = _dom.parentNode.getBoundingClientRect();
             var height = _dom.getAttribute("height")
             var width = _dom.getAttribute("width")
             if (!width){
                mapBodyConteyner.style.height = rectPar.height + "px";
                _dom.style.height = rectPar.height + "px";
             }

             if (!height){
                mapBodyConteyner.style.height = rectPar.height + "px";
                _dom.style.height = rectPar.height + "px";
             }
             /*
                 blockEdit.style.left =  rect.left + "px";
                 blockEdit.style.top =  rect.top + "px";
                 rect = _dom.getBoundingClientRect();
                 mapBodyConteyner.style.width = rect.width + "px";
                 mapBodyConteyner.style.height = rect.height + "px";
                 console.log(mapBodyConteyner)
             */

        }


        markers = new OpenLayers.Layer.Markers("Markers");        // слой маркеров
		fromProjection = new OpenLayers.Projection('EPSG:4326');  // Transform from WGS 1984
		toProjection = new OpenLayers.Projection('EPSG:900913');  // to Spherical Mercator Projection
        map = new OpenLayers.Map('basicMap'+uniqid);
        map.addLayer(markers);
        var mapnik = new OpenLayers.Layer.OSM();
        var position = new OpenLayers.LonLat(83.03330, 54.97525).transform(fromProjection, toProjection);
        var zoom = 15;
        map.addLayer(mapnik);
        map.setCenter(position, zoom);
        OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {
						defaultHandlerOptions: {
							'single': true,
							'double': false,
							'pixelTolerance': 0,
							'stopSingle': false,
							'stopDouble': false
			},
            initialize: function (options) {
                this.handlerOptions = OpenLayers.Util.extend({}, this.defaultHandlerOptions);
                OpenLayers.Control.prototype.initialize.apply(this, arguments);
                this.handler = new OpenLayers.Handler.Click(this, {'click': this.trigger}, this.handlerOptions);
            },
            trigger: function (event) {
                var lonlat = map.getLonLatFromViewPortPx(event.xy)
                lonlat.transform(new OpenLayers.Projection('EPSG:900913'), new OpenLayers.Projection('EPSG:4326'));
                var locatObjUrl = "http://nominatim.openstreetmap.org/reverse?format=json&lat=" + lonlat.lat + "&lon=" + lonlat.lon + "&zoom=18&addressdetails=1";
				D3Api.OpenStreetMapCtrl.ajax_get(locatObjUrl, function (data, status,...args) {
				     console.log("Дописать метод обработки полученной информации о геоданных 'onclickmap':")
				     console.log("data",data)
				     var codeOnclick = _dom.getAttribute("onclickmap")
                     _dom.D3Form.execDomEventFunc(_dom, {func: codeOnclick, args: data});
                     //chk = _dom.D3Form.execDomEventFunc(ctrl, {func: desc[2], args: 'value'});
				     //form.execDomEventFunc(dom, {func: prop, args: 'clone'}));
				     //dom.D3Dependences.repeater.addEvent('onclone_remove',function(){D3Api.DependencesCtrl.refresh(dom);});
				     //var codeOnclick = _dom.getAttribute("onclickmap")
				     //codeOnclick && eval(codeOnclick) // переписать
                });
            }
        });
        click = new OpenLayers.Control.Click();
        map.addControl(click);
        click.activate();
    }


     // Процедура поиска Гео-объекта по фразе
     // @param foundObj
     this.getGisObjest = function (foundObj,callback) {
         var urlLoad = 'http://nominatim.openstreetmap.org/?format=json&addressdetails=1&q=' + encodeURIComponent(foundObj);
         var data = this.ajax_get(urlLoad);
         if (typeof data === 'object' ){
                // Рисуем метки
                for (var ind in data) {
                    var position = new OpenLayers.LonLat(data[ind].lon, data[ind].lat).transform(fromProjection, toProjection);
                    markers.addMarker(new OpenLayers.Marker(position));
                }
                // перемезаемся на первую точку
                if (data[0]){
                    var position = new OpenLayers.LonLat(data[0].lon, data[0].lat).transform(fromProjection, toProjection);
                    map.setCenter(position);
                }
          }
         return data;
     }

    this.setLocate = function TextArea_SetValue(_dom,_value)
    {
        //_dom = D3Api.getChildTag(_dom,'textarea',0);
        //_dom.value = (_value == null)?'':_value;
    }

    this.getLocate = function TextArea_GetValue(_dom)
    {
        return {};
    }
    this.ajax_get = function(url, callback,...args) {
        var xmlhttp = new XMLHttpRequest();
        if (callback) {
            xmlhttp.onreadystatechange = function() {
                if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                    // console.log('responseText:' + xmlhttp.responseText);
                    try {
                        var data = JSON.parse(xmlhttp.responseText);
                    } catch(err) {
                        console.log(err.message + " in " + xmlhttp.responseText);
                    }
                    callback && callback(data,xmlhttp.status,...args);
                }
            };
            xmlhttp.open("GET", url, true);
            xmlhttp.send();
        } else{
            xmlhttp.open("GET", url, false);
            xmlhttp.send();
            // 4. Если код ответа сервера не 200, то это ошибка
            if (xmlhttp.status != 200) {
              // обработать ошибку
              return statusText;
            } else {
                 try {
                     return JSON.parse(xmlhttp.responseText);
                 } catch(err) {
                    return xmlhttp.responseText;
                 }
            }
        }
	}
}

D3Api.controlsApi['OpenStreetMap'] = new D3Api.ControlBaseProperties(D3Api.OpenStreetMapCtrl);
// D3Api.controlsApi['OpenStreetMap']['locate']={get:D3Api.OpenStreetMapCtrl.setLocate,set:D3Api.TextAreaCtrl.setLocate};
// D3Api.controlsApi['OpenStreetMap']['value']={get:D3Api.OpenStreetMapCtrl.getValue,set:D3Api.TextAreaCtrl.setValue};
// D3Api.controlsApi['OpenStreetMap']['enabled'].set = D3Api.OpenStreetMapCtrl.setEnabled;
// D3Api.controlsApi['OpenStreetMap']['input']={get: D3Api.OpenStreetMapCtrl.getInput, type: 'dom'};
/**
 *
 * @component
 */
D3Api.TreeCtrl = new function() {

    this.init = function(dom) {

    };

};

D3Api.controlsApi['Tree'] = new D3Api.ControlBaseProperties(D3Api.TreeCtrl);


})();D3Api.SYS_CACHE_UID = "ceea1f42bfc8a409077827cd3a5538af8";D3Api.SYS_CONFIG = {"formCache":false,"showDependence":false};D3Api.SYS_CONFIG.debug = 1;D3Api.startInit = function (){};
 D3Api.MULTI_REQUEST = {"MAX_THREAD":"","MAX_REQUEST":""};
 D3Api.cache_enabled = 0;
 D3Api.startInit();
 D3Api.init();
 // D3Api.showForm('Tutorial/main', undefined, {history: false});
 window.addEventListener('DOMContentLoaded', function() {
      D3Api.MainDom = document.body;
      D3Api.D3MainContainer = D3Api.MainDom;
      document.oncontextmenu="return D3Api.onContextMenuBody(event);";
      var formText = D3Api.MainDom.outerHTML.replace("</body"+">", "")
           .replace('<div cmptype="sysinfo" style="display:none;">', '</div><div cmptype="sysinfo" style="display:none;">')
           .replace("<body ", "<div cmptype='Form' ");
      D3Api.MainDom.innerHTML = '';
      D3Api.MainDom.removeAttribute("name");
      D3Api.MainDom.removeAttribute("class");
      D3Api.MainDom.setAttribute("id","D3MainContainer");
      data = {};                                 // дописать инициализацию переменных
      form = new D3Api.D3Form("System/loginPostgres.frm", formText); // дописать инициализацию имени открываемой формы 
      form.show(data, D3Api.MainDom);
      D3Api.MainDom = D3Api.MainDom.firstChild;
      D3Api.D3MainContainer = D3Api.MainDom;
      D3Api.isFrameWindow = false; // окно открыто внутри IFRAME
      if (window.frames.frameElement) {
         D3Api.isFrameWindow = true;
      }
      // Получение переменных из родительского окна
      var dataItemsName = "D3(tmp):/System/loginPostgres.frm:history_state";
      if (localStorage.getItem(dataItemsName)) {
         var formObj = JSON.parse(localStorage.getItem(dataItemsName));
         localStorage.removeItem(dataItemsName);
         if ( (formObj['data']) && (formObj['data']['vars']) ) {
            for (var key in formObj["data"]['vars']) {
               D3Api.setVar(key, formObj["data"]['vars'][key]);
            }
         }
      }
 },true);
    